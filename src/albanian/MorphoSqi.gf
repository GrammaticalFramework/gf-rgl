resource MorphoSqi = open CatSqi, ResSqi, Predef in {

oper

mkN001 : Str -> N ;
mkN001 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN002 : Str -> N ;
mkN002 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"eve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"esh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"et"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"eve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"eve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN003 : Str -> N ;
mkN003 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"ash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"at" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"at" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"ave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"ave" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN004 : Str -> N ;
mkN004 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"-i" ;
                            Pl => base_1+"i" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"-in" ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"-it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"-it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN005 : Str -> N ;
mkN005 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN006 : Str -> N ;
mkN006 base =
  case base of {
    base_1+"ll" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"lli" ; --guessed
                                  Pl => base_1+"jeve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"lli" ; --guessed
                                    Pl => base_1+"jesh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"lli" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => base_1+"llin" ; --guessed
                                Pl => base_1+"jet" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"llit" ; --guessed
                                Pl => base_1+"jeve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"llit" ; --guessed
                                  Pl => base_1+"jeve" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN006"
  } ;

mkN007 : Str -> N ;
mkN007 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"Ã«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"Ã«ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN008 : Str -> N ;
mkN008 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"jeje" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"jeje" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN009 : Str -> N ;
mkN009 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"ash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"Ã«n" ; --guessed
                            Pl => base_1+"at" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"Ã«s" ; --guessed
                            Pl => base_1+"ave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"Ã«s" ; --guessed
                              Pl => base_1+"ave" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN010 : Str -> N ;
mkN010 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ;
                              Pl => base_1+"njve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"njsh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"njtÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ;
                            Pl => base_1+"njtÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ;
                            Pl => base_1+"njve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ;
                              Pl => base_1+"njve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN011 : Str -> N ;
mkN011 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => base_1+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ;
                                Pl => base_1+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ;
                                  Pl => base_1+"eve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN011"
  } ;

mkN012 : Str -> N ;
mkN012 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"ash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ; --guessed
                            Pl => base_1+"at" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"at" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"ave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"ave" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN013 : Str -> N ;
mkN013 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"ave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"ash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"at"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"ave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"ave"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN014 : Str -> N ;
mkN014 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"je"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"je"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ; --guessed
                              Pl => base_1+"jeve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ; --guessed
                                Pl => base_1+"jesh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"jet"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ; --guessed
                            Pl => base_1+"jet" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => base_1+"jeve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => base_1+"jeve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN015 : Str -> N ;
mkN015 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1 --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1 --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"ri" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"ri" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"rin" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN016 : Str -> N ;
mkN016 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"llarÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"llarÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"llarÃ«ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"llarÃ«sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"llarÃ«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"llarÃ«t"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"llarÃ«ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"llarÃ«ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN017 : Str -> N ;
mkN017 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"ash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"Ã«n" ; --guessed
                            Pl => base_1+"at" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"Ã«s" ; --guessed
                            Pl => base_1+"ave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"Ã«s" ; --guessed
                              Pl => base_1+"ave" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN018 : Str -> N ;
mkN018 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"lerÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"lerÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"i" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ; --guessed
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN019 : Str -> N ;
mkN019 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"rave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"rash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ; --guessed
                            Pl => base_1+"rat" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"rat" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"rave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"rave" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN020 : Str -> N ;
mkN020 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"Ã«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"Ã«ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN021 : Str -> N ;
mkN021 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"ri" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"ri" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"rin" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN022 : Str -> N ;
mkN022 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"Ã©"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"Ã©"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ei" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ei" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©ja" ;
                                Pl => base_1+"Ã©tÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã©jat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã©jat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN022"
  } ;

mkN023 : Str -> N ;
mkN023 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"jeje" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"jeje" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"t" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN024 : Str -> N ;
mkN024 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ja"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ja"
                            } ;
                     Dat => table {
                              Sg => base_1+"je" ; --guessed
                              Pl => base_1+"jave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"je" ; --guessed
                                Pl => base_1+"jash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"jat" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"jat" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ; --guessed
                            Pl => base_1+"jave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ; --guessed
                              Pl => base_1+"jave" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN025 : Str -> N ;
mkN025 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN026 : Str -> N ;
mkN026 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"Ã«" ; --guessed
                              Pl => base_1+"ive" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"Ã«" ; --guessed
                                Pl => base_1+"ish" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"Ã«" ;
                            Pl => base_1+"it" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"Ã«n" ; --guessed
                            Pl => base_1+"it" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"Ã«t" ; --guessed
                            Pl => base_1+"ive" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"Ã«t" ; --guessed
                              Pl => base_1+"ive" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN027 : Str -> N ;
mkN027 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"e" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN028 : Str -> N ;
mkN028 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"ejatn" ; --guessed
                                Pl => base_1+"et" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"ejats" ; --guessed
                                Pl => base_1+"eve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ejats" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN028"
  } ;

mkN029 : Str -> N ;
mkN029 base =
  case base of {
    base_1+"r" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"r" ;
                                  Pl => base_1+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"r" ;
                                  Pl => base_1+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ri" ;
                                  Pl => base_1+"jve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ri" ;
                                    Pl => base_1+"jsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ri" ;
                                Pl => base_1+"jtÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"rin" ;
                                Pl => base_1+"jtÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"rit" ;
                                Pl => base_1+"jve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"rit" ;
                                  Pl => base_1+"jve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN029"
  } ;

mkN030 : Str -> N ;
mkN030 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"je"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"je"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"jet"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN031 : Str -> N ;
mkN031 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"Ã«ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"Ã«ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"Ã«ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN032 : Str -> N ;
mkN032 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"je" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"je" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => base_1+"en" ; --guessed
                            Pl => base_1+"t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"es" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"es" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN033 : Str -> N ;
mkN033 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"eve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"esh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"et" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"eve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"eve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN034 : Str -> N ;
mkN034 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ; --guessed
                                Pl => base_1+"Ã«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ; --guessed
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ; --guessed
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => base_1+"Ã«ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN035 : Str -> N ;
mkN035 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"Ã©" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"Ã©" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+"ei" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ei" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©ja" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã©jat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã©jat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN035"
  } ;

mkN036 : Str -> N ;
mkN036 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"na"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"na"
                            } ;
                     Dat => table {
                              Sg => base_1+"ni" ;
                              Pl => base_1+"nave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"ni" ;
                                Pl => base_1+"nash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ni" ;
                            Pl => base_1+"nat"
                          } ;
                   Acc => table {
                            Sg => base_1+"nin" ;
                            Pl => base_1+"nat"
                          } ;
                   Dat => table {
                            Sg => base_1+"nit" ;
                            Pl => base_1+"nave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"nit" ;
                              Pl => base_1+"nave"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN037 : Str -> N ;
mkN037 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+"je" ; --guessed
                                  Pl => base_1+"etve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"je" ; --guessed
                                    Pl => base_1+"etsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"tÃ«" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ; --guessed
                                Pl => base_1+"ett" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ; --guessed
                                Pl => base_1+"etve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ; --guessed
                                  Pl => base_1+"etve" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN037"
  } ;

mkN038 : Str -> N ;
mkN038 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ; --guessed
                              Pl => base_1+"eve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ; --guessed
                                Pl => base_1+"esh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ; --guessed
                            Pl => base_1+"et" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => base_1+"eve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => base_1+"eve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN039 : Str -> N ;
mkN039 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"jeje" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"jeje" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN040 : Str -> N ;
mkN040 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1 --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1 --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN041 : Str -> N ;
mkN041 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ; --guessed
                                Pl => base_1+"Ã«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ; --guessed
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => base_1+"Ã«ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN042 : Str -> N ;
mkN042 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Dat => table {
                              Sg => base_1+"ri" ; --guessed
                              Pl => base_1+"njve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"ri" ; --guessed
                                Pl => base_1+"njsh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => base_1+"njtÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"rin" ; --guessed
                            Pl => base_1+"njtÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ; --guessed
                            Pl => base_1+"njve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ; --guessed
                              Pl => base_1+"njve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN043 : Str -> N ;
mkN043 base =
  case base of {
    base_1+"a"+base_2@(?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"i" ; --guessed
                                  Pl => base_1+"e"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"i" ; --guessed
                                    Pl => base_1+"e"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"i" ;
                                Pl => base_1+"e"+base_2+"tÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"a"+base_2+"in" ; --guessed
                                Pl => base_1+"e"+base_2+"tÃ«" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"it" ; --guessed
                                Pl => base_1+"e"+base_2+"ve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"it" ; --guessed
                                  Pl => base_1+"e"+base_2+"ve" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN043"
  } ;

mkN044 : Str -> N ;
mkN044 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"llarÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"llarÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"llarÃ«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"llarÃ«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"llarÃ«t" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"llarÃ«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"llarÃ«ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"llarÃ«ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN045 : Str -> N ;
mkN045 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"Ã«rave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«rash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«rat"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"Ã«rat"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"Ã«rave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"Ã«rave"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN046 : Str -> N ;
mkN046 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"na"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"na"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"nave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"nash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"nat"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"nat"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"nave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"nave"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN047 : Str -> N ;
mkN047 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"je"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"je"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ;
                              Pl => base_1+"jeve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"jesh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"jet"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ;
                            Pl => base_1+"jet"
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ;
                            Pl => base_1+"jeve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ;
                              Pl => base_1+"jeve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN048 : Str -> N ;
mkN048 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ; --guessed
                                Pl => base_1+"et" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ; --guessed
                                Pl => base_1+"eve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN048"
  } ;

mkN049 : Str -> N ;
mkN049 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN050 : Str -> N ;
mkN050 base =
  case base of {
    base_1+"k" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"q"
                                } ;
                         Acc => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"q"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ku" ; --guessed
                                  Pl => base_1+"qve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ku" ; --guessed
                                    Pl => base_1+"qsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ku" ;
                                Pl => base_1+"qtÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"kun" ; --guessed
                                Pl => base_1+"qtÃ«" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"kut" ; --guessed
                                Pl => base_1+"qve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"kut" ; --guessed
                                  Pl => base_1+"qve" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN050"
  } ;

mkN051 : Str -> N ;
mkN051 base =
  case base of {
    base_1+"k" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"q"
                                } ;
                         Acc => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"q"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ku" ;
                                  Pl => base_1+"qve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ku" ;
                                    Pl => base_1+"qsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ku" ;
                                Pl => base_1+"qtÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"kun" ;
                                Pl => base_1+"qtÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"kut" ;
                                Pl => base_1+"qve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"kut" ;
                                  Pl => base_1+"qve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN051"
  } ;

mkN052 : Str -> N ;
mkN052 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ; --guessed
                                Pl => base_1+"Ã«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ; --guessed
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => base_1+"Ã«ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN053 : Str -> N ;
mkN053 base =
  case base of {
    base_1+"k" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"qe"
                                } ;
                         Acc => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"qe"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ku" ;
                                  Pl => base_1+"qeve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ku" ;
                                    Pl => base_1+"qesh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ku" ;
                                Pl => base_1+"qet"
                              } ;
                       Acc => table {
                                Sg => base_1+"kun" ;
                                Pl => base_1+"qet"
                              } ;
                       Dat => table {
                                Sg => base_1+"kut" ;
                                Pl => base_1+"qeve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"kut" ;
                                  Pl => base_1+"qeve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN053"
  } ;

mkN054 : Str -> N ;
mkN054 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"at" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"at" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN055 : Str -> N ;
mkN055 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ; --guessed
                                Pl => base_1+"Ã«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ;
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => base_1+"Ã«ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN056 : Str -> N ;
mkN056 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ime"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ime"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"imet"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN057 : Str -> N ;
mkN057 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"ash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"Ã«n" ; --guessed
                            Pl => base_1+"at" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"Ã«s" ; --guessed
                            Pl => base_1+"ave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"Ã«s" ; --guessed
                              Pl => base_1+"ave" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN058 : Str -> N ;
mkN058 base =
  case base of {
    base_1+"ll" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"lli" ;
                                  Pl => base_1+"jve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"lli" ;
                                    Pl => base_1+"jsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"lli" ;
                                Pl => base_1+"jtÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"llin" ;
                                Pl => base_1+"jtÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"llit" ;
                                Pl => base_1+"jve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"llit" ;
                                  Pl => base_1+"jve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN058"
  } ;

mkN059 : Str -> N ;
mkN059 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN060 : Str -> N ;
mkN060 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ; --guessed
                                Pl => base_1+"Ã«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ; --guessed
                            Pl => base_1+"Ã«rt" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ; --guessed
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => base_1+"Ã«ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN061 : Str -> N ;
mkN061 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«rt"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN062 : Str -> N ;
mkN062 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ;
                                    Pl => base_1+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => base_1+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ;
                                Pl => base_1+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ;
                                  Pl => base_1+"eve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN062"
  } ;

mkN063 : Str -> N ;
mkN063 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => base_1+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ;
                                Pl => base_1+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ;
                                  Pl => base_1+"eve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN063"
  } ;

mkN064 : Str -> N ;
mkN064 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ;
                              Pl => base_1+"Ã«ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"Ã«sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ;
                            Pl => base_1+"Ã«ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ;
                              Pl => base_1+"Ã«ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN065 : Str -> N ;
mkN065 base =
  case base of {
    base_1+"a" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"erÃ«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"erÃ«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ai" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ai" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ari" ;
                                Pl => base_1+"erÃ«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"arit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"arit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN065"
  } ;

mkN066 : Str -> N ;
mkN066 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN067 : Str -> N ;
mkN067 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"Ã«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"et" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"Ã«vet" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"Ã«vet" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN068 : Str -> N ;
mkN068 base =
  case base of {
    base_1+"Ã«"+base_2@("sh"|?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"i" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"i" ; --guessed
                                    Pl => base_1+base_2+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"in" ; --guessed
                                Pl => base_1+base_2+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ; --guessed
                                Pl => base_1+base_2+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN068"
  } ;

mkN069 : Str -> N ;
mkN069 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN070 : Str -> N ;
mkN070 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"je" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"je" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN071 : Str -> N ;
mkN071 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"it"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"it" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN072 : Str -> N ;
mkN072 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => base_1+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ; --guessed
                                Pl => base_1+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN072"
  } ;

mkN073 : Str -> N ;
mkN073 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN073"
  } ;

mkN074 : Str -> N ;
mkN074 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN075 : Str -> N ;
mkN075 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ; --guessed
                              Pl => base_1+"eve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ; --guessed
                                Pl => base_1+"esh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ; --guessed
                            Pl => base_1+"et" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ; --guessed
                            Pl => base_1+"et" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => base_1+"eve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => base_1+"eve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN076 : Str -> N ;
mkN076 base =
  case base of {
    base_1+"a"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"u" ;
                                  Pl => base_1+"e"+base_2+"jeve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"u" ;
                                    Pl => base_1+"e"+base_2+"jesh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"u" ;
                                Pl => base_1+"e"+base_2+"jet"
                              } ;
                       Acc => table {
                                Sg => base_1+"a"+base_2+"un" ;
                                Pl => base_1+"e"+base_2+"jet"
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"ut" ;
                                Pl => base_1+"e"+base_2+"jeve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"ut" ;
                                  Pl => base_1+"e"+base_2+"jeve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN076"
  } ;

mkN077 : Str -> N ;
mkN077 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1 --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1 --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"je" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"je" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1 ; --guessed
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => base_1+"en" ; --guessed
                            Pl => base_1+"t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"es" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"es" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN078 : Str -> N ;
mkN078 base =
  case base of {
    base_1+"ll" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+"lli" ; --guessed
                                  Pl => base_1+"llve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"lli" ; --guessed
                                    Pl => base_1+"llsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"je" ;
                                Pl => base_1+"lli"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"jet" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"jet" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN078"
  } ;

mkN079 : Str -> N ;
mkN079 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"ash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"atn" ; --guessed
                            Pl => base_1+"at" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ats" ; --guessed
                            Pl => base_1+"ave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ats" ; --guessed
                              Pl => base_1+"ave" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN080 : Str -> N ;
mkN080 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ; --guessed
                                Pl => base_1+"et" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ; --guessed
                                Pl => base_1+"eve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN080"
  } ;

mkN081 : Str -> N ;
mkN081 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"je" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"je" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN082 : Str -> N ;
mkN082 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"rave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"rash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"rat"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"rat"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"rave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"rave"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN083 : Str -> N ;
mkN083 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN084 : Str -> N ;
mkN084 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"at" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"at" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN085 : Str -> N ;
mkN085 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ive" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"ish" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"it" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"atn" ; --guessed
                            Pl => base_1+"it" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ats" ; --guessed
                            Pl => base_1+"ive" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ats" ; --guessed
                              Pl => base_1+"ive" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN086 : Str -> N ;
mkN086 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"jet"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN087 : Str -> N ;
mkN087 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ; --guessed
                              Pl => base_1+"jve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ; --guessed
                                Pl => base_1+"jsh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ; --guessed
                            Pl => base_1+"jet" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ; --guessed
                            Pl => base_1+"jet" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => base_1+"jve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => base_1+"jve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN088 : Str -> N ;
mkN088 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"tÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"tÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"je" ; --guessed
                            Pl => base_1+"u" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"jet" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"jet" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN089 : Str -> N ;
mkN089 base =
  case base of {
    base_1+"ll" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"lli" ;
                                  Pl => base_1+"jeve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"lli" ;
                                    Pl => base_1+"jesh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"lli" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => base_1+"llin" ;
                                Pl => base_1+"jet"
                              } ;
                       Dat => table {
                                Sg => base_1+"llit" ;
                                Pl => base_1+"jeve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"llit" ;
                                  Pl => base_1+"jeve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN089"
  } ;

mkN090 : Str -> N ;
mkN090 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"rat"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN091 : Str -> N ;
mkN091 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN092 : Str -> N ;
mkN092 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1 ;
                            Pl => base_1+"ja"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN093 : Str -> N ;
mkN093 base =
  case base of {
    base_1+"i"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"i"+base_2 ;
                                  Pl => base_1+"je"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"i"+base_2 ;
                                  Pl => base_1+"je"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"i"+base_2+"i" ;
                                  Pl => base_1+"je"+base_2+"ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"i"+base_2+"i" ;
                                    Pl => base_1+"je"+base_2+"sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i"+base_2+"i" ;
                                Pl => base_1+"je"+base_2+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"i"+base_2+"in" ;
                                Pl => base_1+"je"+base_2+"Ã«t"
                              } ;
                       Dat => table {
                                Sg => base_1+"i"+base_2+"it" ;
                                Pl => base_1+"je"+base_2+"ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"i"+base_2+"it" ;
                                  Pl => base_1+"je"+base_2+"ve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN093"
  } ;

mkN094 : Str -> N ;
mkN094 base =
  case base of {
    "ka" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "ka" ;
                                  Pl => "qe"
                                } ;
                         Acc => table {
                                  Sg => "ka" ;
                                  Pl => "qe"
                                } ;
                         Dat => table {
                                  Sg => "kau" ;
                                  Pl => "qeve"
                                } ;
                         Ablat => table {
                                    Sg => "kau" ;
                                    Pl => "qesh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => "kau" ;
                                Pl => "qetÃ«"
                              } ;
                       Acc => table {
                                Sg => "kaun" ;
                                Pl => "qetÃ«"
                              } ;
                       Dat => table {
                                Sg => "kaut" ;
                                Pl => "qeve"
                              } ;
                       Ablat => table {
                                  Sg => "kaut" ;
                                  Pl => "qeve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN094"
  } ;

mkN095 : Str -> N ;
mkN095 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1 ;
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN096 : Str -> N ;
mkN096 base =
  case base of {
    base_1+"o" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"o" ;
                                  Pl => base_1+"o"
                                } ;
                         Acc => table {
                                  Sg => base_1+"o" ;
                                  Pl => base_1+"o"
                                } ;
                         Dat => table {
                                  Sg => base_1+"oi" ; --guessed
                                  Pl => base_1+"ove" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"oi" ; --guessed
                                    Pl => base_1+"osh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ua" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"uat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"uat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN096"
  } ;

mkN097 : Str -> N ;
mkN097 base =
  case base of {
    base_1+"e"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => base_1+"i"+base_2+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => base_1+"i"+base_2+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"i" ; --guessed
                                  Pl => base_1+"e"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"i" ; --guessed
                                    Pl => base_1+"e"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"e"+base_2+"u" ; --guessed
                                Pl => base_1+"i"+base_2+"jet" --guessed
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"e"+base_2+"ut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"e"+base_2+"ut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN097"
  } ;

mkN098 : Str -> N ;
mkN098 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1 ;
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN099 : Str -> N ;
mkN099 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ;
                              Pl => base_1+"jve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"jsh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"jet"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ;
                            Pl => base_1+"jet"
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ;
                            Pl => base_1+"jve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ;
                              Pl => base_1+"jve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN100 : Str -> N ;
mkN100 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"jeje" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"jeje" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"jan" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"jas" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"jas" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN101 : Str -> N ;
mkN101 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ; --guessed
                                Pl => base_1+"at" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ; --guessed
                                Pl => base_1+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ; --guessed
                                Pl => base_1+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN101"
  } ;

mkN102 : Str -> N ;
mkN102 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"rÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"rÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"ri" ; --guessed
                              Pl => base_1+"rÃ«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"ri" ; --guessed
                                Pl => base_1+"rÃ«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"rin" ; --guessed
                            Pl => base_1+"rÃ«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ; --guessed
                            Pl => base_1+"rÃ«ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ; --guessed
                              Pl => base_1+"rÃ«ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN103 : Str -> N ;
mkN103 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ni" ;
                            Pl => base_1+"jtÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"nit" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"nit" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN104 : Str -> N ;
mkN104 base =
  case base of {
    base_1+"k" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"qe"
                                } ;
                         Acc => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"qe"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ki" ; --guessed
                                  Pl => base_1+"kve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ki" ; --guessed
                                    Pl => base_1+"ksh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ku" ;
                                Pl => base_1+"qet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"kut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"kut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN104"
  } ;

mkN105 : Str -> N ;
mkN105 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"je" ;
                            Pl => base_1+"u"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"jet" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"jet" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN106 : Str -> N ;
mkN106 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN107 : Str -> N ;
mkN107 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ;
                              Pl => base_1+"rave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"rash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"rat"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ;
                            Pl => base_1+"rat"
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ;
                            Pl => base_1+"rave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ;
                              Pl => base_1+"rave"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN108 : Str -> N ;
mkN108 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN109 : Str -> N ;
mkN109 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => base_1+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ; --guessed
                                Pl => base_1+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN109"
  } ;

mkN110 : Str -> N ;
mkN110 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«ra"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«ra"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"Ã«rave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"Ã«rash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«rat"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"Ã«rat"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"Ã«rave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"Ã«rave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN110"
  } ;

mkN111 : Str -> N ;
mkN111 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ; --guessed
                              Pl => base_1+"eve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ; --guessed
                                Pl => base_1+"esh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"et" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ; --guessed
                            Pl => base_1+"et" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => base_1+"eve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => base_1+"eve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN112 : Str -> N ;
mkN112 base =
  case base of {
    base_1+"Ã«"+base_2@("rr"|?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"e" ;
                                  Pl => base_1+base_2+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"e" ;
                                    Pl => base_1+base_2+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"Ã«n" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"Ã«s" ;
                                Pl => base_1+base_2+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"Ã«s" ;
                                  Pl => base_1+base_2+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN112"
  } ;

mkN113 : Str -> N ;
mkN113 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"it"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"it"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN114 : Str -> N ;
mkN114 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"Ã«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ; --guessed
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"n" ; --guessed
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"s" ; --guessed
                            Pl => base_1+"Ã«ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"s" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN115 : Str -> N ;
mkN115 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Dat => table {
                              Sg => base_1+"ri" ; --guessed
                              Pl => base_1+"njve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"ri" ; --guessed
                                Pl => base_1+"njsh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => base_1+"njtÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"rin" ; --guessed
                            Pl => base_1+"njtÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ; --guessed
                            Pl => base_1+"njve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ; --guessed
                              Pl => base_1+"njve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN116 : Str -> N ;
mkN116 base =
  case base of {
    base_1+"j" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"j" ;
                                  Pl => base_1+"jlerÃ«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"j" ;
                                  Pl => base_1+"jlerÃ«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"u" ;
                                  Pl => base_1+"jlerÃ«ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"u" ;
                                    Pl => base_1+"jlerÃ«sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"jlerÃ«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"un" ;
                                Pl => base_1+"jlerÃ«t"
                              } ;
                       Dat => table {
                                Sg => base_1+"ut" ;
                                Pl => base_1+"jlerÃ«ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ut" ;
                                  Pl => base_1+"jlerÃ«ve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN116"
  } ;

mkN117 : Str -> N ;
mkN117 base =
  case base of {
    base_1+"u"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"u"+base_2 ;
                                  Pl => base_1+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"u"+base_2 ;
                                  Pl => base_1+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"u"+base_2+"jeje" ;
                                  Pl => base_1+base_2+"ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"u"+base_2+"jeje" ;
                                    Pl => base_1+base_2+"sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"u"+base_2+"ja" ;
                                Pl => base_1+base_2+"tÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"u"+base_2+"n" ;
                                Pl => base_1+base_2+"tÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"u"+base_2+"s" ;
                                Pl => base_1+base_2+"ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"u"+base_2+"s" ;
                                  Pl => base_1+base_2+"ve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN117"
  } ;

mkN118 : Str -> N ;
mkN118 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1 --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1 --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"je" ; --guessed
                              Pl => base_1+"jave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"je" ; --guessed
                                Pl => base_1+"jash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"jat" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"jat" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ; --guessed
                            Pl => base_1+"jave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ; --guessed
                              Pl => base_1+"jave" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN119 : Str -> N ;
mkN119 base =
  case base of {
    base_1+"o"+base_2@?+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"o"+base_2+"Ã«" ;
                                  Pl => base_1+"ua"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"o"+base_2+"Ã«" ;
                                  Pl => base_1+"ua"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"o"+base_2+"eje" ;
                                  Pl => base_1+"ua"+base_2+"ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"o"+base_2+"eje" ;
                                    Pl => base_1+"ua"+base_2+"sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"o"+base_2+"a" ;
                                Pl => base_1+"ua"+base_2+"t"
                              } ;
                       Acc => table {
                                Sg => base_1+"o"+base_2+"Ã«n" ;
                                Pl => base_1+"ua"+base_2+"t"
                              } ;
                       Dat => table {
                                Sg => base_1+"o"+base_2+"Ã«s" ;
                                Pl => base_1+"ua"+base_2+"ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"o"+base_2+"Ã«s" ;
                                  Pl => base_1+"ua"+base_2+"ve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN119"
  } ;

mkN120 : Str -> N ;
mkN120 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ive" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"ish" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ; --guessed
                            Pl => base_1+"itÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"it" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ats" ; --guessed
                            Pl => base_1+"ive" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ats" ; --guessed
                              Pl => base_1+"ive" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN121 : Str -> N ;
mkN121 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ; --guessed
                            Pl => base_1+"Ã«rat" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN122 : Str -> N ;
mkN122 base =
  case base of {
    base_1+"ll" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"lli" ;
                                  Pl => base_1+"jve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"lli" ;
                                    Pl => base_1+"jsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"lli" ;
                                Pl => base_1+"jt"
                              } ;
                       Acc => table {
                                Sg => base_1+"llin" ;
                                Pl => base_1+"jt"
                              } ;
                       Dat => table {
                                Sg => base_1+"llit" ;
                                Pl => base_1+"jve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"llit" ;
                                  Pl => base_1+"jve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN122"
  } ;

mkN123 : Str -> N ;
mkN123 base =
  case base of {
    base_1+"ll" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"lli" ; --guessed
                                  Pl => base_1+"llve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"lli" ; --guessed
                                    Pl => base_1+"llsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"lli" ; --guessed
                                Pl => base_1+"jtÃ«" --guessed
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"llit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"llit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN123"
  } ;

mkN124 : Str -> N ;
mkN124 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"rÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"rÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN125 : Str -> N ;
mkN125 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«rinj"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN126 : Str -> N ;
mkN126 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN127 : Str -> N ;
mkN127 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ni" ;
                            Pl => base_1+"njtÃ«"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"nit" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"nit" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN128 : Str -> N ;
mkN128 base =
  case base of {
    base_1+"a"+base_2@(?+?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"je"+base_2+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"je"+base_2+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"i" ;
                                  Pl => base_1+"je"+base_2+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"i" ;
                                    Pl => base_1+"je"+base_2+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"i" ;
                                Pl => base_1+"je"+base_2+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"a"+base_2+"in" ;
                                Pl => base_1+"je"+base_2+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"it" ;
                                Pl => base_1+"je"+base_2+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"it" ;
                                  Pl => base_1+"je"+base_2+"eve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN128"
  } ;

mkN129 : Str -> N ;
mkN129 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN129"
  } ;

mkN130 : Str -> N ;
mkN130 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN130"
  } ;

mkN131 : Str -> N ;
mkN131 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN132 : Str -> N ;
mkN132 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"eve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN132"
  } ;

mkN133 : Str -> N ;
mkN133 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+"i" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"i" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"at" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"in" ; --guessed
                                Pl => base_1+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"it" ; --guessed
                                Pl => base_1+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"it" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN133"
  } ;

mkN134 : Str -> N ;
mkN134 base =
  case base of {
    base_1+"a"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"i" ;
                                  Pl => base_1+"e"+base_2+"ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"i" ;
                                    Pl => base_1+"e"+base_2+"sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"i" ;
                                Pl => base_1+"e"+base_2+"tÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"a"+base_2+"in" ;
                                Pl => base_1+"e"+base_2+"tÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"it" ;
                                Pl => base_1+"e"+base_2+"ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"it" ;
                                  Pl => base_1+"e"+base_2+"ve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN134"
  } ;

mkN135 : Str -> N ;
mkN135 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"rat"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN136 : Str -> N ;
mkN136 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ;
                              Pl => base_1+"ave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ;
                                Pl => base_1+"ash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"Ã«n" ;
                            Pl => base_1+"at"
                          } ;
                   Dat => table {
                            Sg => base_1+"Ã«s" ;
                            Pl => base_1+"ave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"Ã«s" ;
                              Pl => base_1+"ave"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN137 : Str -> N ;
mkN137 base =
  case base of {
    base_1+"Ã«"+base_2@("rr"|?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"eje" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"eje" ; --guessed
                                    Pl => base_1+base_2+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«"+base_2+"n" ; --guessed
                                Pl => base_1+base_2+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«"+base_2+"s" ; --guessed
                                Pl => base_1+base_2+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«"+base_2+"s" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN137"
  } ;

mkN138 : Str -> N ;
mkN138 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"llarÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"llarÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"llarÃ«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"llarÃ«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"llarÃ«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"llarÃ«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"llarÃ«ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"llarÃ«ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN139 : Str -> N ;
mkN139 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"jat" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"jat" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN140 : Str -> N ;
mkN140 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"tÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"tÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"ve" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN141 : Str -> N ;
mkN141 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ee" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ee" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"tÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN141"
  } ;

mkN142 : Str -> N ;
mkN142 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"ja"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"ja"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"jave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"jash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jat"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => base_1+"jat"
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ;
                                Pl => base_1+"jave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ;
                                  Pl => base_1+"jave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN142"
  } ;

mkN143 : Str -> N ;
mkN143 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«t"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«t"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN144 : Str -> N ;
mkN144 base =
  case base of {
    base_1+"e"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => base_1+"Ã©"+base_2+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => base_1+"Ã©"+base_2+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"i" ; --guessed
                                  Pl => base_1+"e"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"i" ; --guessed
                                    Pl => base_1+"e"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©"+base_2+"i" ;
                                Pl => base_1+"Ã©"+base_2+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã©"+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã©"+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN144"
  } ;

mkN145 : Str -> N ;
mkN145 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«rat"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN146 : Str -> N ;
mkN146 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"Ã«ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"Ã«sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"Ã«ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"Ã«ve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN146"
  } ;

mkN147 : Str -> N ;
mkN147 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"t"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN148 : Str -> N ;
mkN148 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => base_1+"Ã«t" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ; --guessed
                                Pl => base_1+"Ã«ve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN148"
  } ;

mkN149 : Str -> N ;
mkN149 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ; --guessed
                            Pl => base_1+"jat" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN150 : Str -> N ;
mkN150 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"jat"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN151 : Str -> N ;
mkN151 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ;
                              Pl => base_1+"jve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"jsh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"jtÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ;
                            Pl => base_1+"jtÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ;
                            Pl => base_1+"jve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ;
                              Pl => base_1+"jve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN152 : Str -> N ;
mkN152 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN153 : Str -> N ;
mkN153 base =
  case base of {
    base_1+"ak" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ak" ;
                                  Pl => base_1+"eq"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ak" ;
                                  Pl => base_1+"eq"
                                } ;
                         Dat => table {
                                  Sg => base_1+"aki" ; --guessed
                                  Pl => base_1+"akve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"aki" ; --guessed
                                    Pl => base_1+"aksh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"aku" ; --guessed
                                Pl => base_1+"eqÃ«t" --guessed
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"akut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"akut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN153"
  } ;

mkN154 : Str -> N ;
mkN154 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN155 : Str -> N ;
mkN155 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"ja"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"ja"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"jave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"jash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jat"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ; --guessed
                                Pl => base_1+"jat" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ; --guessed
                                Pl => base_1+"jave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ; --guessed
                                  Pl => base_1+"jave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN155"
  } ;

mkN156 : Str -> N ;
mkN156 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"rat" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN157 : Str -> N ;
mkN157 base =
  case base of {
    base_1+"Ã«r" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«r" ;
                                  Pl => base_1+"inj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«r" ;
                                  Pl => base_1+"inj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ri" ;
                                  Pl => base_1+"injve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ri" ;
                                    Pl => base_1+"injsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ri" ;
                                Pl => base_1+"injtÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"rin" ;
                                Pl => base_1+"injtÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"rit" ;
                                Pl => base_1+"injve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"rit" ;
                                  Pl => base_1+"injve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN157"
  } ;

mkN158 : Str -> N ;
mkN158 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"Ã«rve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«rish"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«rit"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"Ã«rit"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"Ã«rve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"Ã«rve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN159 : Str -> N ;
mkN159 base =
  case base of {
    base_1+"y"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"y"+base_2 ;
                                  Pl => base_1+base_2+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"y"+base_2 ;
                                  Pl => base_1+base_2+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"y"+base_2+"i" ; --guessed
                                  Pl => base_1+"y"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"y"+base_2+"i" ; --guessed
                                    Pl => base_1+"y"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"ni" ;
                                Pl => base_1+base_2+"jet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"nit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"nit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN159"
  } ;

mkN160 : Str -> N ;
mkN160 base =
  case base of {
    base_1+"hÃ«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"hÃ«"+base_2 ;
                                  Pl => base_1+"h"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"hÃ«"+base_2 ;
                                  Pl => base_1+"h"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"h"+base_2+"i" ;
                                  Pl => base_1+"h"+base_2+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"h"+base_2+"i" ;
                                    Pl => base_1+"h"+base_2+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"h"+base_2+"i" ;
                                Pl => base_1+"h"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"in" ;
                                Pl => base_1+"h"+base_2+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"h"+base_2+"it" ;
                                Pl => base_1+"h"+base_2+"avet"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"h"+base_2+"it" ;
                                  Pl => base_1+"h"+base_2+"avet"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN160"
  } ;

mkN161 : Str -> N ;
mkN161 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"i" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"i" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"in" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"it" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"it" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN161"
  } ;

mkN162 : Str -> N ;
mkN162 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"in" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN162"
  } ;

mkN163 : Str -> N ;
mkN163 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ; --guessed
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => base_1+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«ats" ; --guessed
                                Pl => base_1+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«ats" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN163"
  } ;

mkN164 : Str -> N ;
mkN164 base =
  case base of {
    base_1+"a"+base_2@?+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2+"Ã«" ;
                                  Pl => base_1+"e"+base_2+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2+"Ã«" ;
                                  Pl => base_1+"e"+base_2+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"eje" ;
                                  Pl => base_1+"e"+base_2+"Ã«ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"eje" ;
                                    Pl => base_1+"e"+base_2+"Ã«sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"a" ;
                                Pl => base_1+"e"+base_2+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"a"+base_2+"Ã«n" ;
                                Pl => base_1+"e"+base_2+"Ã«t"
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"Ã«s" ;
                                Pl => base_1+"e"+base_2+"Ã«ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"Ã«s" ;
                                  Pl => base_1+"e"+base_2+"Ã«ve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN164"
  } ;

mkN165 : Str -> N ;
mkN165 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"i" ;
                                  Pl => base_1+base_2+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"i" ;
                                    Pl => base_1+base_2+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"in" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ;
                                Pl => base_1+base_2+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ;
                                  Pl => base_1+base_2+"ave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN165"
  } ;

mkN166 : Str -> N ;
mkN166 base =
  case base of {
    base_1+base_2@?+"lÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"lÃ«" ;
                                  Pl => base_1+"u"+base_2+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"lÃ«" ;
                                  Pl => base_1+"u"+base_2+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"li" ;
                                  Pl => base_1+"u"+base_2+"jve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"li" ;
                                    Pl => base_1+"u"+base_2+"jsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"li" ;
                                Pl => base_1+"u"+base_2+"jt"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"lin" ;
                                Pl => base_1+"u"+base_2+"jt"
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"lit" ;
                                Pl => base_1+"u"+base_2+"jve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"lit" ;
                                  Pl => base_1+"u"+base_2+"jve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN166"
  } ;

mkN167 : Str -> N ;
mkN167 base =
  case base of {
    base_1+"e"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => base_1+"i"+base_2+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => base_1+"i"+base_2+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"i" ; --guessed
                                  Pl => base_1+"e"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"i" ; --guessed
                                    Pl => base_1+"e"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"e"+base_2+"u" ;
                                Pl => base_1+"i"+base_2+"jet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"e"+base_2+"ut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"e"+base_2+"ut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN167"
  } ;

mkN168 : Str -> N ;
mkN168 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«ra"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«ra"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ; --guessed
                                  Pl => base_1+"Ã«rave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ; --guessed
                                    Pl => base_1+"Ã«rash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«rat"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => base_1+"Ã«rat" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ; --guessed
                                Pl => base_1+"Ã«rave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ; --guessed
                                  Pl => base_1+"Ã«rave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN168"
  } ;

mkN169 : Str -> N ;
mkN169 base =
  case base of {
    "a"+base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "a"+base_1+"Ã«" ;
                                  Pl => "e"+base_1+"Ã«r"
                                } ;
                         Acc => table {
                                  Sg => "a"+base_1+"Ã«" ;
                                  Pl => "e"+base_1+"Ã«r"
                                } ;
                         Dat => table {
                                  Sg => "e"+base_1+"i" ;
                                  Pl => "e"+base_1+"Ã«rve"
                                } ;
                         Ablat => table {
                                    Sg => "e"+base_1+"i" ;
                                    Pl => "e"+base_1+"Ã«rish"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => "a"+base_1+"i" ;
                                Pl => "e"+base_1+"Ã«rit"
                              } ;
                       Acc => table {
                                Sg => "a"+base_1+"in" ;
                                Pl => "e"+base_1+"Ã«rit"
                              } ;
                       Dat => table {
                                Sg => "a"+base_1+"it" ;
                                Pl => "e"+base_1+"Ã«rve"
                              } ;
                       Ablat => table {
                                  Sg => "a"+base_1+"it" ;
                                  Pl => "e"+base_1+"Ã«rve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN169"
  } ;

mkN170 : Str -> N ;
mkN170 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ;
                              Pl => base_1+"ave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ;
                                Pl => base_1+"ash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"n" ;
                            Pl => base_1+"at"
                          } ;
                   Dat => table {
                            Sg => base_1+"s" ;
                            Pl => base_1+"ave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"s" ;
                              Pl => base_1+"ave"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN171 : Str -> N ;
mkN171 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ia" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ; --guessed
                                Pl => base_1+"et" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ; --guessed
                                Pl => base_1+"eve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN171"
  } ;

mkN172 : Str -> N ;
mkN172 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN173 : Str -> N ;
mkN173 base =
  case base of {
    base_1+"e"+base_2@(?+?+?)+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2+"e" ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2+"e" ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"ei" ; --guessed
                                  Pl => base_1+"e"+base_2+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"ei" ; --guessed
                                    Pl => base_1+"e"+base_2+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©"+base_2+"a" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã©"+base_2+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã©"+base_2+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN173"
  } ;

mkN174 : Str -> N ;
mkN174 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN174"
  } ;

mkN175 : Str -> N ;
mkN175 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"Ã«s"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ;
                                    Pl => base_1+"Ã«s"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"ave" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"ave" ;
                                Pl => base_1+"avet"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ave" ;
                                  Pl => base_1+"avet"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN175"
  } ;

mkN176 : Str -> N ;
mkN176 base =
  case base of {
    base_1+"ll" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"lli" ; --guessed
                                  Pl => base_1+"llve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"lli" ; --guessed
                                    Pl => base_1+"llsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"lli" ;
                                Pl => base_1+"jtÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"llit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"llit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN176"
  } ;

mkN177 : Str -> N ;
mkN177 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ; --guessed
                            Pl => base_1+"t" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ; --guessed
                            Pl => base_1+"t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN178 : Str -> N ;
mkN178 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ;
                              Pl => base_1+"ave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"ash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ;
                            Pl => base_1+"at"
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ;
                            Pl => base_1+"ave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ;
                              Pl => base_1+"ave"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN179 : Str -> N ;
mkN179 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ;
                            Pl => base_1+"t"
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN180 : Str -> N ;
mkN180 base =
  case base of {
    base_1+"e"+base_2@("ndth"|"dh"|?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"i" ; --guessed
                                  Pl => base_1+"e"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"i" ; --guessed
                                    Pl => base_1+"e"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©"+base_2+"i" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã©"+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã©"+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN180"
  } ;

mkN181 : Str -> N ;
mkN181 base =
  case base of {
    base_1+"o" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"o" ;
                                  Pl => base_1+"o"
                                } ;
                         Acc => table {
                                  Sg => base_1+"o" ;
                                  Pl => base_1+"o"
                                } ;
                         Dat => table {
                                  Sg => base_1+"oe" ; --guessed
                                  Pl => base_1+"ove" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"oe" ; --guessed
                                    Pl => base_1+"osh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ua" ;
                                Pl => base_1+"ot"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN181"
  } ;

mkN182 : Str -> N ;
mkN182 base =
  case base of {
    base_1+"k" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"q"
                                } ;
                         Acc => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"q"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ku" ;
                                  Pl => base_1+"qve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ku" ;
                                    Pl => base_1+"qish"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ku" ;
                                Pl => base_1+"qit"
                              } ;
                       Acc => table {
                                Sg => base_1+"kun" ;
                                Pl => base_1+"qit"
                              } ;
                       Dat => table {
                                Sg => base_1+"kut" ;
                                Pl => base_1+"qve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"kut" ;
                                  Pl => base_1+"qve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN182"
  } ;

mkN183 : Str -> N ;
mkN183 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«ra"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«ra"
                                } ;
                         Dat => table {
                                  Sg => base_1+"i" ;
                                  Pl => base_1+"Ã«rave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"i" ;
                                    Pl => base_1+"Ã«rash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«rat"
                              } ;
                       Acc => table {
                                Sg => base_1+"in" ;
                                Pl => base_1+"Ã«rat"
                              } ;
                       Dat => table {
                                Sg => base_1+"it" ;
                                Pl => base_1+"Ã«rave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"it" ;
                                  Pl => base_1+"Ã«rave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN183"
  } ;

mkN184 : Str -> N ;
mkN184 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN184"
  } ;

mkN185 : Str -> N ;
mkN185 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2+"inj" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2+"inj" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"i" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"injve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"i" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"injsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+"Ã«"+base_2+"injtÃ«" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"in" ;
                                Pl => base_1+"Ã«"+base_2+"injtÃ«" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ; --guessed
                                Pl => base_1+"Ã«"+base_2+"injve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"injve" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN185"
  } ;

mkN186 : Str -> N ;
mkN186 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"njÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"njÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"ri" ;
                              Pl => base_1+"njÃ«ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"ri" ;
                                Pl => base_1+"njÃ«sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => base_1+"njÃ«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"rin" ;
                            Pl => base_1+"njÃ«t"
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ;
                            Pl => base_1+"njÃ«ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ;
                              Pl => base_1+"njÃ«ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN187 : Str -> N ;
mkN187 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => base_1+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ;
                                Pl => base_1+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ;
                                  Pl => base_1+"eve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN187"
  } ;

mkN188 : Str -> N ;
mkN188 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"enj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"enj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"i" ;
                                  Pl => base_1+"enjve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"i" ;
                                    Pl => base_1+"enjsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"enjtÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"in" ;
                                Pl => base_1+"enjtÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"it" ;
                                Pl => base_1+"enjve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"it" ;
                                  Pl => base_1+"enjve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN188"
  } ;

mkN189 : Str -> N ;
mkN189 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ja"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ja"
                            } ;
                     Dat => table {
                              Sg => base_1+"je" ;
                              Pl => base_1+"jave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"je" ;
                                Pl => base_1+"jash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"jat"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => base_1+"jat"
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ;
                            Pl => base_1+"jave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ;
                              Pl => base_1+"jave"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN190 : Str -> N ;
mkN190 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => base_1+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«ats" ; --guessed
                                Pl => base_1+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«ats" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN190"
  } ;

mkN191 : Str -> N ;
mkN191 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN192 : Str -> N ;
mkN192 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«ra"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«ra"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"Ã«rave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ;
                                    Pl => base_1+"Ã«rash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«rat"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"Ã«rat"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"Ã«rave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"Ã«rave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN192"
  } ;

mkN193 : Str -> N ;
mkN193 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"in" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN193"
  } ;

mkN194 : Str -> N ;
mkN194 base =
  case base of {
    base_1+"ua" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ua" ;
                                  Pl => base_1+"onj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ua" ;
                                  Pl => base_1+"onj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"oi" ;
                                  Pl => base_1+"onjve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"oi" ;
                                    Pl => base_1+"onjsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"oi" ;
                                Pl => base_1+"onjtÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"oin" ;
                                Pl => base_1+"onjtÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"oit" ;
                                Pl => base_1+"onjve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"oit" ;
                                  Pl => base_1+"onjve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN194"
  } ;

mkN195 : Str -> N ;
mkN195 base =
  case base of {
    base_1+base_2@?+"j"+base_3@(?+?)+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"j"+base_3+"e" ;
                                  Pl => base_1+"j"+base_2+base_3+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"j"+base_3+"e" ;
                                  Pl => base_1+"j"+base_2+base_3+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"j"+base_3+"ee" ; --guessed
                                  Pl => base_1+base_2+"j"+base_3+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"j"+base_3+"ee" ; --guessed
                                    Pl => base_1+base_2+"j"+base_3+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"j"+base_3+"a" ;
                                Pl => base_1+base_2+"j"+base_3+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN195"
  } ;

mkN196 : Str -> N ;
mkN196 base =
  case base of {
    base_1+"ua" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ua" ;
                                  Pl => base_1+"oj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ua" ;
                                  Pl => base_1+"oj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"uai" ; --guessed
                                  Pl => base_1+"uave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"uai" ; --guessed
                                    Pl => base_1+"uash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"oi" ;
                                Pl => base_1+"ojtÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"oit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"oit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN196"
  } ;

mkN197 : Str -> N ;
mkN197 base =
  case base of {
    base_1+base_2@(?+?+?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2 ;
                                  Pl => base_1+base_2+"nj"
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2 ;
                                  Pl => base_1+base_2+"nj"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"i" ; --guessed
                                  Pl => base_1+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"i" ; --guessed
                                    Pl => base_1+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"h"+base_2+"u" ;
                                Pl => base_1+base_2+"njtÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"h"+base_2+"ut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"h"+base_2+"ut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN197"
  } ;

mkN198 : Str -> N ;
mkN198 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"at" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"in" ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN198"
  } ;

mkN199 : Str -> N ;
mkN199 base =
  case base of {
    base_1+"i" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"i" ;
                                  Pl => base_1+"Ã«z"
                                } ;
                         Acc => table {
                                  Sg => base_1+"i" ;
                                  Pl => base_1+"Ã«z"
                                } ;
                         Dat => table {
                                  Sg => base_1+"iu" ;
                                  Pl => base_1+"Ã«zve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"iu" ;
                                    Pl => base_1+"Ã«zish"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"iu" ;
                                Pl => base_1+"Ã«zit"
                              } ;
                       Acc => table {
                                Sg => base_1+"iun" ;
                                Pl => base_1+"Ã«zit"
                              } ;
                       Dat => table {
                                Sg => base_1+"iut" ;
                                Pl => base_1+"Ã«zve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"iut" ;
                                  Pl => base_1+"Ã«zve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN199"
  } ;

mkN200 : Str -> N ;
mkN200 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"Ã«ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ;
                                    Pl => base_1+"Ã«sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"Ã«ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"Ã«ve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN200"
  } ;

mkN201 : Str -> N ;
mkN201 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ee" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ee" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN201"
  } ;

mkN202 : Str -> N ;
mkN202 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"je" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"je" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => base_1+"n" ; --guessed
                            Pl => base_1+"t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"s" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"s" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN203 : Str -> N ;
mkN203 base =
  case base of {
    base_1+"a" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"ai"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"ai"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ai" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ai" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"enj" ;
                                Pl => base_1+"enjtÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"enjt" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"enjt" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN203"
  } ;

mkN204 : Str -> N ;
mkN204 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN205 : Str -> N ;
mkN205 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"Ã«rve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«rish"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"et"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"Ã«rve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"Ã«rve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN206 : Str -> N ;
mkN206 base =
  case base of {
    base_1+"ll" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"lli" ; --guessed
                                  Pl => base_1+"llve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"lli" ; --guessed
                                    Pl => base_1+"llsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"lli" ;
                                Pl => base_1+"jt"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"llit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"llit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN206"
  } ;

mkN207 : Str -> N ;
mkN207 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2+"inj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2+"inj"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"i" ;
                                  Pl => base_1+"Ã«"+base_2+"injve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"i" ;
                                    Pl => base_1+"Ã«"+base_2+"injsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+"Ã«"+base_2+"injtÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"in" ;
                                Pl => base_1+"Ã«"+base_2+"injtÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ;
                                Pl => base_1+"Ã«"+base_2+"injve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ;
                                  Pl => base_1+"Ã«"+base_2+"injve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN207"
  } ;

mkN208 : Str -> N ;
mkN208 base =
  case base of {
    base_1+"a" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"ezÃ«r"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"ezÃ«r"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ai" ;
                                  Pl => base_1+"ezÃ«rve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ai" ;
                                    Pl => base_1+"ezÃ«rish"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ai" ;
                                Pl => base_1+"ezÃ«rit"
                              } ;
                       Acc => table {
                                Sg => base_1+"anÃ«" ;
                                Pl => base_1+"ezÃ«rit"
                              } ;
                       Dat => table {
                                Sg => base_1+"ait" ;
                                Pl => base_1+"ezÃ«rve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ait" ;
                                  Pl => base_1+"ezÃ«rve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN208"
  } ;

mkN209 : Str -> N ;
mkN209 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ;
                              Pl => base_1+"ave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ;
                                Pl => base_1+"ash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"Ã«n" ;
                            Pl => base_1+"at"
                          } ;
                   Dat => table {
                            Sg => base_1+"Ã«s" ;
                            Pl => base_1+"ave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"Ã«s" ;
                              Pl => base_1+"ave"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN210 : Str -> N ;
mkN210 base =
  case base of {
    base_1+"l" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"l" ;
                                  Pl => base_1+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"l" ;
                                  Pl => base_1+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"li" ;
                                  Pl => base_1+"jve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"li" ;
                                    Pl => base_1+"jsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"li" ;
                                Pl => base_1+"jt"
                              } ;
                       Acc => table {
                                Sg => base_1+"lin" ;
                                Pl => base_1+"jt"
                              } ;
                       Dat => table {
                                Sg => base_1+"lit" ;
                                Pl => base_1+"jve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"lit" ;
                                  Pl => base_1+"jve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN210"
  } ;

mkN211 : Str -> N ;
mkN211 base =
  case base of {
    base_1+"alÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"alÃ«" ;
                                  Pl => base_1+"em"
                                } ;
                         Acc => table {
                                  Sg => base_1+"alÃ«" ;
                                  Pl => base_1+"em"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ali" ;
                                  Pl => base_1+"emve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ali" ;
                                    Pl => base_1+"emsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ali" ;
                                Pl => base_1+"emtÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"alin" ;
                                Pl => base_1+"emtÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"alit" ;
                                Pl => base_1+"emve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"alit" ;
                                  Pl => base_1+"emve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN211"
  } ;

mkN212 : Str -> N ;
mkN212 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"ri" ;
                              Pl => base_1+"rave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"ri" ;
                                Pl => base_1+"rash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => base_1+"rat"
                          } ;
                   Acc => table {
                            Sg => base_1+"rin" ;
                            Pl => base_1+"rat"
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ;
                            Pl => base_1+"rave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ;
                              Pl => base_1+"rave"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN213 : Str -> N ;
mkN213 base =
  case base of {
    base_1+"ak" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ak" ;
                                  Pl => base_1+"eqe"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ak" ;
                                  Pl => base_1+"eqe"
                                } ;
                         Dat => table {
                                  Sg => base_1+"aku" ;
                                  Pl => base_1+"eqeve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"aku" ;
                                    Pl => base_1+"eqesh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"aku" ;
                                Pl => base_1+"eqet"
                              } ;
                       Acc => table {
                                Sg => base_1+"akun" ;
                                Pl => base_1+"eqet"
                              } ;
                       Dat => table {
                                Sg => base_1+"akut" ;
                                Pl => base_1+"eqeve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"akut" ;
                                  Pl => base_1+"eqeve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN213"
  } ;

mkN214 : Str -> N ;
mkN214 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"et"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"et"
                                } ;
                         Dat => table {
                                  Sg => base_1+"je" ; --guessed
                                  Pl => base_1+"etve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"je" ; --guessed
                                    Pl => base_1+"etsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"ett" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ; --guessed
                                Pl => base_1+"ett" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ; --guessed
                                Pl => base_1+"etve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ; --guessed
                                  Pl => base_1+"etve" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN214"
  } ;

mkN215 : Str -> N ;
mkN215 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"et"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"et"
                                } ;
                         Dat => table {
                                  Sg => base_1+"je" ;
                                  Pl => base_1+"etve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"je" ;
                                    Pl => base_1+"etsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"ett"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => base_1+"ett"
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ;
                                Pl => base_1+"etve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ;
                                  Pl => base_1+"etve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN215"
  } ;

mkN216 : Str -> N ;
mkN216 base =
  case base of {
    base_1+"ua"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ua"+base_2 ;
                                  Pl => base_1+"o"+base_2+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ua"+base_2 ;
                                  Pl => base_1+"o"+base_2+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ua"+base_2+"i" ; --guessed
                                  Pl => base_1+"ua"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ua"+base_2+"i" ; --guessed
                                    Pl => base_1+"ua"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ua"+base_2+"i" ;
                                Pl => base_1+"o"+base_2+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"ua"+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ua"+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN216"
  } ;

mkN217 : Str -> N ;
mkN217 base =
  case base of {
    base_1+base_2@?+"k" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"k" ;
                                  Pl => base_1+"iq"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"k" ;
                                  Pl => base_1+"iq"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"ki" ; --guessed
                                  Pl => base_1+base_2+"kve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"ki" ; --guessed
                                    Pl => base_1+base_2+"ksh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"ku" ;
                                Pl => base_1+"iq"+base_2+"t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"kut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"kut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN217"
  } ;

mkN218 : Str -> N ;
mkN218 base =
  case base of {
    base_1+"a"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"Ã«r"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"Ã«r"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"i" ; --guessed
                                  Pl => base_1+"e"+base_2+"Ã«rve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"i" ; --guessed
                                    Pl => base_1+"e"+base_2+"Ã«rsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"i" ;
                                Pl => base_1+"e"+base_2+"Ã«rit"
                              } ;
                       Acc => table {
                                Sg => base_1+"a"+base_2+"in" ; --guessed
                                Pl => base_1+"e"+base_2+"Ã«rit" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"it" ; --guessed
                                Pl => base_1+"e"+base_2+"Ã«rve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"it" ; --guessed
                                  Pl => base_1+"e"+base_2+"Ã«rve" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN218"
  } ;

mkN219 : Str -> N ;
mkN219 base =
  case base of {
    base_1+base_2@(?+?)+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"Ã«" ;
                                  Pl => base_1+"y"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"Ã«" ;
                                  Pl => base_1+"y"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"eje" ;
                                  Pl => base_1+"y"+base_2+"ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"eje" ;
                                    Pl => base_1+"y"+base_2+"sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+"y"+base_2+"t"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"Ã«n" ;
                                Pl => base_1+"y"+base_2+"t"
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"Ã«s" ;
                                Pl => base_1+"y"+base_2+"ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"Ã«s" ;
                                  Pl => base_1+"y"+base_2+"ve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN219"
  } ;

mkN220 : Str -> N ;
mkN220 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"it"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"it"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1 ;
                            Pl => base_1+"i" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"t" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"t" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN221 : Str -> N ;
mkN221 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => base_1+"et" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ; --guessed
                                Pl => base_1+"eve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN221"
  } ;

mkN222 : Str -> N ;
mkN222 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"Ã«ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ;
                                    Pl => base_1+"Ã«sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"Ã«ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"Ã«ve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN222"
  } ;

mkN223 : Str -> N ;
mkN223 base =
  case base of {
    base_1+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2 ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2 ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"e" ; --guessed
                                  Pl => base_1+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"e" ; --guessed
                                    Pl => base_1+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"j"+base_2 ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN223"
  } ;

mkN224 : Str -> N ;
mkN224 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ;
                              Pl => base_1+"eve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"esh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ;
                            Pl => base_1+"et"
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ;
                            Pl => base_1+"eve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ;
                              Pl => base_1+"eve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN225 : Str -> N ;
mkN225 base =
  case base of {
    base_1+"k" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"qe"
                                } ;
                         Acc => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"qe"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ki" ; --guessed
                                  Pl => base_1+"kve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ki" ; --guessed
                                    Pl => base_1+"ksh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ku" ; --guessed
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"kut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"kut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN225"
  } ;

mkN226 : Str -> N ;
mkN226 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"et" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"ejatn" ; --guessed
                                Pl => base_1+"et" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"ejats" ; --guessed
                                Pl => base_1+"eve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ejats" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN226"
  } ;

mkN227 : Str -> N ;
mkN227 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => base_1+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ;
                                Pl => base_1+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ;
                                  Pl => base_1+"eve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN227"
  } ;

mkN228 : Str -> N ;
mkN228 base =
  case base of {
    "a"+base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "a"+base_1+"Ã«" ;
                                  Pl => "e"+base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => "a"+base_1+"Ã«" ;
                                  Pl => "e"+base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => "a"+base_1+"Ã«e" ; --guessed
                                  Pl => "a"+base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => "a"+base_1+"Ã«e" ; --guessed
                                    Pl => "a"+base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => "a"+base_1+"a" ;
                                Pl => "e"+base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN228"
  } ;

mkN229 : Str -> N ;
mkN229 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"njtÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN230 : Str -> N ;
mkN230 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"t" ;
                            Pl => base_1+"t" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"tt" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"tt" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN231 : Str -> N ;
mkN231 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"jeje" ;
                              Pl => base_1+"rave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"jeje" ;
                                Pl => base_1+"rash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"rat"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => base_1+"rat"
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ;
                            Pl => base_1+"rave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ;
                              Pl => base_1+"rave"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN232 : Str -> N ;
mkN232 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«t" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => base_1+"Ã«t" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ; --guessed
                                Pl => base_1+"Ã«ve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN232"
  } ;

mkN233 : Str -> N ;
mkN233 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"eje" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"eje" ; --guessed
                                    Pl => base_1+base_2+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+"Ã«"+base_2+"at" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«"+base_2+"n" ; --guessed
                                Pl => base_1+base_2+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«"+base_2+"s" ; --guessed
                                Pl => base_1+base_2+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«"+base_2+"s" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN233"
  } ;

mkN234 : Str -> N ;
mkN234 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"ve" ;
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"t" ;
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"t" ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN235 : Str -> N ;
mkN235 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"njtÃ«"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN236 : Str -> N ;
mkN236 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2 --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2 --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"i" ; --guessed
                                  Pl => base_1+base_2+"ove" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"i" ; --guessed
                                    Pl => base_1+base_2+"osh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+base_2+"it" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"in" ; --guessed
                                Pl => base_1+base_2+"ot" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ; --guessed
                                Pl => base_1+base_2+"ove" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ; --guessed
                                  Pl => base_1+base_2+"ove" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN236"
  } ;

mkN237 : Str -> N ;
mkN237 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN238 : Str -> N ;
mkN238 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+"ei" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ei" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jat" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"jat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"jat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN238"
  } ;

mkN239 : Str -> N ;
mkN239 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"a" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"a" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ; --guessed
                                Pl => base_1+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ; --guessed
                                Pl => base_1+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN239"
  } ;

mkN240 : Str -> N ;
mkN240 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"ish" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"it" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"it" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN241 : Str -> N ;
mkN241 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"jtÃ«"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN242 : Str -> N ;
mkN242 base =
  case base of {
    "b"+base_1+"nor" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "b"+base_1+"nor" ;
                                  Pl => "b"+base_1+"norÃ«"
                                } ;
                         Acc => table {
                                  Sg => "b"+base_1+"nor" ;
                                  Pl => "b"+base_1+"norÃ«"
                                } ;
                         Dat => table {
                                  Sg => "b"+base_1+"nori" ; --guessed
                                  Pl => "b"+base_1+"norve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => "b"+base_1+"nori" ; --guessed
                                    Pl => "b"+base_1+"norsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => "j"+base_1 ;
                                Pl => "b"+base_1+"norÃ«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => "j"+base_1+"t" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => "j"+base_1+"t" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN242"
  } ;

mkN243 : Str -> N ;
mkN243 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Dat => table {
                              Sg => base_1+"ri" ; --guessed
                              Pl => base_1+"njve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"ri" ; --guessed
                                Pl => base_1+"njsh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ; --guessed
                            Pl => base_1+"njtÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"rin" ; --guessed
                            Pl => base_1+"njtÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ; --guessed
                            Pl => base_1+"njve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ; --guessed
                              Pl => base_1+"njve" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN244 : Str -> N ;
mkN244 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"Ã«ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"Ã«sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"Ã«ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"Ã«ve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN244"
  } ;

mkN245 : Str -> N ;
mkN245 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"je"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"je"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"i" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN246 : Str -> N ;
mkN246 base =
  case base of {
    base_1+"r" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"r" ;
                                  Pl => base_1+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"r" ;
                                  Pl => base_1+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ri" ;
                                  Pl => base_1+"jve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ri" ;
                                    Pl => base_1+"jsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ri" ;
                                Pl => base_1+"jt"
                              } ;
                       Acc => table {
                                Sg => base_1+"rin" ;
                                Pl => base_1+"jt"
                              } ;
                       Dat => table {
                                Sg => base_1+"rit" ;
                                Pl => base_1+"jve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"rit" ;
                                  Pl => base_1+"jve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN246"
  } ;

mkN247 : Str -> N ;
mkN247 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ; --guessed
                                Pl => base_1+"at" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => base_1+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«ats" ; --guessed
                                Pl => base_1+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«ats" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN247"
  } ;

mkN248 : Str -> N ;
mkN248 base =
  case base of {
    base_1@(?+?)+"e"+base_2 => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => base_1+"a"+base_2+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => base_1+"a"+base_2+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"i" ;
                                  Pl => base_1+"a"+base_2+"Ã«ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"i" ;
                                    Pl => base_1+"a"+base_2+"Ã«sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"e"+base_2+"i" ;
                                Pl => base_1+"a"+base_2+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"e"+base_2+"in" ;
                                Pl => base_1+"a"+base_2+"Ã«t"
                              } ;
                       Dat => table {
                                Sg => base_1+"e"+base_2+"it" ;
                                Pl => base_1+"a"+base_2+"Ã«ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"e"+base_2+"it" ;
                                  Pl => base_1+"a"+base_2+"Ã«ve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN248"
  } ;

mkN249 : Str -> N ;
mkN249 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"i" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN250 : Str -> N ;
mkN250 base =
  case base of {
    base_1+"uall" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"uall" ;
                                  Pl => base_1+"oje"
                                } ;
                         Acc => table {
                                  Sg => base_1+"uall" ;
                                  Pl => base_1+"oje"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ualli" ; --guessed
                                  Pl => base_1+"uallve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ualli" ; --guessed
                                    Pl => base_1+"uallsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ualli" ;
                                Pl => base_1+"ojet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"uallit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"uallit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN250"
  } ;

mkN251 : Str -> N ;
mkN251 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"rÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"rÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"ri" ;
                              Pl => base_1+"rÃ«ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"ri" ;
                                Pl => base_1+"rÃ«sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => base_1+"rÃ«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"rin" ;
                            Pl => base_1+"rÃ«t"
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ;
                            Pl => base_1+"rÃ«ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ;
                              Pl => base_1+"rÃ«ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN252 : Str -> N ;
mkN252 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"rÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"rÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1 ; --guessed
                            Pl => base_1+"i" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"t" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"t" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN253 : Str -> N ;
mkN253 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN253"
  } ;

mkN254 : Str -> N ;
mkN254 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1 ; --guessed
                            Pl => base_1+"i"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"t" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"t" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN255 : Str -> N ;
mkN255 base =
  case base of {
    base_1+"a"+base_2@(?+?+?+?)+"ll" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2+"ll" ;
                                  Pl => base_1+"e"+base_2+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2+"ll" ;
                                  Pl => base_1+"e"+base_2+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"lli" ;
                                  Pl => base_1+"e"+base_2+"jve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"lli" ;
                                    Pl => base_1+"e"+base_2+"jsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"lli" ;
                                Pl => base_1+"e"+base_2+"jt"
                              } ;
                       Acc => table {
                                Sg => base_1+"a"+base_2+"llin" ;
                                Pl => base_1+"e"+base_2+"jt"
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"llit" ;
                                Pl => base_1+"e"+base_2+"jve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"llit" ;
                                  Pl => base_1+"e"+base_2+"jve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN255"
  } ;

mkN256 : Str -> N ;
mkN256 base =
  case base of {
    base_1+base_2@(?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2 ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2 ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"i" ; --guessed
                                  Pl => base_1+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"i" ; --guessed
                                    Pl => base_1+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"n"+base_2+"i" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"n"+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"n"+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN256"
  } ;

mkN257 : Str -> N ;
mkN257 base =
  case base of {
    base_1+"a"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"Ã«r"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"Ã«r"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"i" ;
                                  Pl => base_1+"e"+base_2+"Ã«rve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"i" ;
                                    Pl => base_1+"e"+base_2+"Ã«rsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"i" ;
                                Pl => base_1+"e"+base_2+"Ã«rit"
                              } ;
                       Acc => table {
                                Sg => base_1+"a"+base_2+"in" ;
                                Pl => base_1+"e"+base_2+"Ã«rit"
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"it" ;
                                Pl => base_1+"e"+base_2+"Ã«rve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"it" ;
                                  Pl => base_1+"e"+base_2+"Ã«rve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN257"
  } ;

mkN258 : Str -> N ;
mkN258 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"dve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"dsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"dt" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ; --guessed
                                Pl => base_1+"dve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ; --guessed
                                  Pl => base_1+"dve" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN258"
  } ;

mkN259 : Str -> N ;
mkN259 base =
  case base of {
    base_1+base_2@(?+?+?+?+?)+"Ã«"+base_3@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"Ã«"+base_3 ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"Ã«"+base_3 ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"Ã«"+base_3+"i" ; --guessed
                                  Pl => base_1+base_2+"Ã«"+base_3+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"Ã«"+base_3+"i" ; --guessed
                                    Pl => base_1+base_2+"Ã«"+base_3+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i"+base_2+base_3+"i" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+base_3+"in" ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"i"+base_2+base_3+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"i"+base_2+base_3+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN259"
  } ;

mkN260 : Str -> N ;
mkN260 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"n" ;
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"nt" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"nt" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN261 : Str -> N ;
mkN261 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"ja"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"ja"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"jave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"jash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jat"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => base_1+"jat"
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ;
                                Pl => base_1+"jave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ;
                                  Pl => base_1+"jave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN261"
  } ;

mkN262 : Str -> N ;
mkN262 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ur" ;
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN263 : Str -> N ;
mkN263 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"je" ;
                              Pl => base_1+"ive"
                            } ;
                     Ablat => table {
                                Sg => base_1+"je" ;
                                Pl => base_1+"ish"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"je" ;
                            Pl => base_1+"it"
                          } ;
                   Acc => table {
                            Sg => base_1+"n" ;
                            Pl => base_1+"it"
                          } ;
                   Dat => table {
                            Sg => base_1+"s" ;
                            Pl => base_1+"ive"
                          } ;
                   Ablat => table {
                              Sg => base_1+"s" ;
                              Pl => base_1+"ive"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN264 : Str -> N ;
mkN264 base =
  case base of {
    base_1+"dhÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"dhÃ«" ;
                                  Pl => base_1+"gÃ«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"dhÃ«" ;
                                  Pl => base_1+"gÃ«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"dhÃ«e" ; --guessed
                                  Pl => base_1+"dhÃ«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"dhÃ«e" ; --guessed
                                    Pl => base_1+"dhÃ«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ga" ;
                                Pl => base_1+"gÃ«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN264"
  } ;

mkN265 : Str -> N ;
mkN265 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"ja"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"ja"
                                } ;
                         Dat => table {
                                  Sg => base_1+"jeje" ;
                                  Pl => base_1+"jave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"jeje" ;
                                    Pl => base_1+"jash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jat"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"jat"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"jave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"jave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN265"
  } ;

mkN266 : Str -> N ;
mkN266 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1 ;
                            Pl => base_1+"i"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"t" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"t" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN267 : Str -> N ;
mkN267 base =
  case base of {
    base_1+"y"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"y"+base_2 ;
                                  Pl => base_1+base_2+"rÃ«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"y"+base_2 ;
                                  Pl => base_1+base_2+"rÃ«"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"u" ; --guessed
                                  Pl => base_1+base_2+"rÃ«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"u" ; --guessed
                                    Pl => base_1+base_2+"rÃ«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"u" ;
                                Pl => base_1+base_2+"rÃ«t"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"un" ; --guessed
                                Pl => base_1+base_2+"rÃ«t" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"ut" ; --guessed
                                Pl => base_1+base_2+"rÃ«ve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"ut" ; --guessed
                                  Pl => base_1+base_2+"rÃ«ve" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN267"
  } ;

mkN268 : Str -> N ;
mkN268 base =
  case base of {
    base_1+"y"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"y"+base_2 ;
                                  Pl => base_1+base_2+"rÃ«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"y"+base_2 ;
                                  Pl => base_1+base_2+"rÃ«"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"u" ;
                                  Pl => base_1+base_2+"rÃ«ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"u" ;
                                    Pl => base_1+base_2+"rÃ«sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"u" ;
                                Pl => base_1+base_2+"rÃ«t"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"un" ;
                                Pl => base_1+base_2+"rÃ«t"
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"ut" ;
                                Pl => base_1+base_2+"rÃ«ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"ut" ;
                                  Pl => base_1+base_2+"rÃ«ve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN268"
  } ;

mkN269 : Str -> N ;
mkN269 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+base_2+"it"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN269"
  } ;

mkN270 : Str -> N ;
mkN270 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN270"
  } ;

mkN271 : Str -> N ;
mkN271 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"ash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"at" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"Ã«n" ; --guessed
                            Pl => base_1+"at" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"Ã«s" ; --guessed
                            Pl => base_1+"ave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"Ã«s" ; --guessed
                              Pl => base_1+"ave" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN272 : Str -> N ;
mkN272 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«na"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«na"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"Ã«nave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«nash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«nat"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"Ã«nat"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"Ã«nave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"Ã«nave"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN273 : Str -> N ;
mkN273 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«rit"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN274 : Str -> N ;
mkN274 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ee" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ee" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN274"
  } ;

mkN275 : Str -> N ;
mkN275 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"ash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ; --guessed
                            Pl => base_1+"at" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"n" ; --guessed
                            Pl => base_1+"at" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"s" ; --guessed
                            Pl => base_1+"ave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"s" ; --guessed
                              Pl => base_1+"ave" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN276 : Str -> N ;
mkN276 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN277 : Str -> N ;
mkN277 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => base_1+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ; --guessed
                                Pl => base_1+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN277"
  } ;

mkN278 : Str -> N ;
mkN278 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN278"
  } ;

mkN279 : Str -> N ;
mkN279 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«rinj"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«rinj"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«rinjtÃ«"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN280 : Str -> N ;
mkN280 base =
  case base of {
    base_1+"k" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"q"
                                } ;
                         Acc => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"q"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ki" ; --guessed
                                  Pl => base_1+"kve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ki" ; --guessed
                                    Pl => base_1+"ksh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ku" ;
                                Pl => base_1+"qit"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"kut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"kut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN280"
  } ;

mkN281 : Str -> N ;
mkN281 base =
  case base of {
    base_1+"y"+base_2@?+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"y"+base_2+"Ã«" ;
                                  Pl => base_1+"Ã½"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"y"+base_2+"Ã«" ;
                                  Pl => base_1+"Ã½"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"y"+base_2+"Ã«e" ; --guessed
                                  Pl => base_1+"y"+base_2+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"y"+base_2+"Ã«e" ; --guessed
                                    Pl => base_1+"y"+base_2+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã½"+base_2+"a" ;
                                Pl => base_1+"Ã½"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN281"
  } ;

mkN282 : Str -> N ;
mkN282 base =
  case base of {
    base_1+"a"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"i" ; --guessed
                                  Pl => base_1+"a"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"i" ; --guessed
                                    Pl => base_1+"a"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => nonExist ;
                                Pl => base_1+"e"+base_2+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist+"t" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist+"t" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN282"
  } ;

mkN283 : Str -> N ;
mkN283 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Dat => table {
                              Sg => base_1+"ri" ;
                              Pl => base_1+"njve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"ri" ;
                                Pl => base_1+"njsh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => base_1+"njtÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"rin" ;
                            Pl => base_1+"njtÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ;
                            Pl => base_1+"njve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ;
                              Pl => base_1+"njve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN284 : Str -> N ;
mkN284 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1 --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1 --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ; --guessed
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ; --guessed
                            Pl => base_1+"tÃ«" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN285 : Str -> N ;
mkN285 base =
  case base of {
    base_1+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2 ;
                                  Pl => base_1+base_2+"njÃ«"
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2 ;
                                  Pl => base_1+base_2+"njÃ«"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"i" ; --guessed
                                  Pl => base_1+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"i" ; --guessed
                                    Pl => base_1+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"yr"+base_2 ;
                                Pl => base_1+base_2+"njtÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"yr"+base_2+"t" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"yr"+base_2+"t" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN285"
  } ;

mkN286 : Str -> N ;
mkN286 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«r"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ; --guessed
                            Pl => base_1+"it" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN287 : Str -> N ;
mkN287 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"eje" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"eje" ; --guessed
                                    Pl => base_1+base_2+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+base_2+"Ã«t" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«"+base_2+"n" ; --guessed
                                Pl => base_1+base_2+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«"+base_2+"s" ; --guessed
                                Pl => base_1+base_2+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«"+base_2+"s" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN287"
  } ;

mkN288 : Str -> N ;
mkN288 base =
  case base of {
    "makth" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "makth" ;
                                  Pl => "makthÃ«r"
                                } ;
                         Acc => table {
                                  Sg => "makth" ;
                                  Pl => "makthÃ«r"
                                } ;
                         Dat => table {
                                  Sg => "-" ;
                                  Pl => "makthÃ«rve"
                                } ;
                         Ablat => table {
                                    Sg => "-" ;
                                    Pl => "makthÃ«rish"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => "-" ;
                                Pl => "-"
                              } ;
                       Acc => table {
                                Sg => "-n" ;
                                Pl => "-"
                              } ;
                       Dat => table {
                                Sg => "-t" ;
                                Pl => "makthÃ«rve"
                              } ;
                       Ablat => table {
                                  Sg => "-t" ;
                                  Pl => "makthÃ«rve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN288"
  } ;

mkN289 : Str -> N ;
mkN289 base =
  case base of {
    base_1+"Ã«"+base_2@(?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"e" ;
                                  Pl => base_1+base_2+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"e" ;
                                    Pl => base_1+base_2+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«"+base_2+"Ã«n" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«"+base_2+"Ã«s" ;
                                Pl => base_1+base_2+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«"+base_2+"Ã«s" ;
                                  Pl => base_1+base_2+"ave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN289"
  } ;

mkN290 : Str -> N ;
mkN290 base =
  case base of {
    base_1+"m"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"m"+base_2 ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"m"+base_2 ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"m"+base_2+"e" ; --guessed
                                  Pl => base_1+"m"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"m"+base_2+"e" ; --guessed
                                    Pl => base_1+"m"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"r"+base_2+"t" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN290"
  } ;

mkN291 : Str -> N ;
mkN291 base =
  case base of {
    "a"+base_1 => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "a"+base_1 ;
                                  Pl => "e"+base_1+"ra"
                                } ;
                         Acc => table {
                                  Sg => "a"+base_1 ;
                                  Pl => "e"+base_1+"ra"
                                } ;
                         Dat => table {
                                  Sg => "a"+base_1+"i" ;
                                  Pl => "e"+base_1+"rave"
                                } ;
                         Ablat => table {
                                    Sg => "a"+base_1+"i" ;
                                    Pl => "e"+base_1+"rash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => "a"+base_1+"i" ;
                                Pl => "e"+base_1+"rat"
                              } ;
                       Acc => table {
                                Sg => "a"+base_1+"in" ;
                                Pl => "e"+base_1+"rat"
                              } ;
                       Dat => table {
                                Sg => "a"+base_1+"it" ;
                                Pl => "e"+base_1+"rave"
                              } ;
                       Ablat => table {
                                  Sg => "a"+base_1+"it" ;
                                  Pl => "e"+base_1+"rave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN291"
  } ;

mkN292 : Str -> N ;
mkN292 base =
  case base of {
    base_1@(?+?+?+?+?)+"Ã«"+base_2 => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"u"+base_2+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"u"+base_2+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+"u"+base_2+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN292"
  } ;

mkN293 : Str -> N ;
mkN293 base =
  case base of {
    base_1+base_2@?+"t" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"t" ;
                                  Pl => base_1+"et"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"t" ;
                                  Pl => base_1+"et"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"ti" ; --guessed
                                  Pl => base_1+base_2+"tve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"ti" ; --guessed
                                    Pl => base_1+base_2+"tsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"ti" ;
                                Pl => base_1+"et"+base_2+"t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"tit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"tit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN293"
  } ;

mkN294 : Str -> N ;
mkN294 base =
  case base of {
    base_1+"u"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"u"+base_2 ;
                                  Pl => base_1+base_2+"nj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"u"+base_2 ;
                                  Pl => base_1+base_2+"nj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"u"+base_2+"i" ; --guessed
                                  Pl => base_1+"u"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"u"+base_2+"i" ; --guessed
                                    Pl => base_1+"u"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist+"t" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist+"t" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN294"
  } ;

mkN295 : Str -> N ;
mkN295 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"njï¼kallÃ«za"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"njï¼kallÃ«za"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => base_1+"it" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN296 : Str -> N ;
mkN296 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"t" ;
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"tt" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"tt" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN297 : Str -> N ;
mkN297 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN298 : Str -> N ;
mkN298 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã«t" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«tt" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«tt" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN298"
  } ;

mkN299 : Str -> N ;
mkN299 base =
  case base of {
    base_1+"a"+base_2@(?+?)+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2+"Ã«" ;
                                  Pl => base_1+"u"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2+"Ã«" ;
                                  Pl => base_1+"u"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"u"+base_2+"eje" ;
                                  Pl => base_1+"u"+base_2+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"u"+base_2+"eje" ;
                                    Pl => base_1+"u"+base_2+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"u"+base_2+"a" ;
                                Pl => base_1+"u"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"a"+base_2+"Ã«n" ;
                                Pl => base_1+"u"+base_2+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"Ã«s" ;
                                Pl => base_1+"u"+base_2+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"Ã«s" ;
                                  Pl => base_1+"u"+base_2+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN299"
  } ;

mkN300 : Str -> N ;
mkN300 base =
  case base of {
    base_1+"Ã«"+base_2@(?+?+?+?+?)+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2+"Ã«" ;
                                  Pl => base_1+"e"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2+"Ã«" ;
                                  Pl => base_1+"e"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"eje" ;
                                  Pl => base_1+"e"+base_2+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"eje" ;
                                    Pl => base_1+"e"+base_2+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"e"+base_2+"a" ;
                                Pl => base_1+"e"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«"+base_2+"Ã«n" ;
                                Pl => base_1+"e"+base_2+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«"+base_2+"Ã«s" ;
                                Pl => base_1+"e"+base_2+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«"+base_2+"Ã«s" ;
                                  Pl => base_1+"e"+base_2+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN300"
  } ;

mkN301 : Str -> N ;
mkN301 base =
  case base of {
    base_1+"u"+base_2@?+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"u"+base_2+"Ã«" ;
                                  Pl => base_1+"u"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"u"+base_2+"Ã«" ;
                                  Pl => base_1+"u"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"u"+base_2+"Ã«e" ; --guessed
                                  Pl => base_1+"u"+base_2+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"u"+base_2+"Ã«e" ; --guessed
                                    Pl => base_1+"u"+base_2+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"y"+base_2+"a" ;
                                Pl => base_1+"u"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN301"
  } ;

mkN302 : Str -> N ;
mkN302 base =
  case base of {
    base_1+"Ã«"+base_2@("rr"|"ll"|?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"eje" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"eje" ; --guessed
                                    Pl => base_1+base_2+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã«"+base_2 ; --guessed
                                Pl => base_1+base_2+"at" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«"+base_2+"n" ; --guessed
                                Pl => base_1+base_2+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«"+base_2+"s" ; --guessed
                                Pl => base_1+base_2+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«"+base_2+"s" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN302"
  } ;

mkN303 : Str -> N ;
mkN303 base =
  case base of {
    base_1+"b" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"b" ;
                                  Pl => base_1+"pinj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"b" ;
                                  Pl => base_1+"pinj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"bi" ;
                                  Pl => base_1+"pinjve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"bi" ;
                                    Pl => base_1+"pinjsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"bi" ;
                                Pl => base_1+"pinjtÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"bin" ;
                                Pl => base_1+"pinjtÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"bit" ;
                                Pl => base_1+"pinjve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"bit" ;
                                  Pl => base_1+"pinjve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN303"
  } ;

mkN304 : Str -> N ;
mkN304 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"it" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN305 : Str -> N ;
mkN305 base =
  case base of {
    base_1+"a" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1
                                } ;
                         Acc => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1
                                } ;
                         Dat => table {
                                  Sg => base_1+"ae" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ae" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN305"
  } ;

mkN306 : Str -> N ;
mkN306 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"Ã©"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"Ã©"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ei" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ei" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©ja" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã©jat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã©jat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN306"
  } ;

mkN307 : Str -> N ;
mkN307 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"ra"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"ra"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN307"
  } ;

mkN308 : Str -> N ;
mkN308 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«rat"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN308"
  } ;

mkN309 : Str -> N ;
mkN309 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ; --guessed
                                Pl => base_1+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ; --guessed
                                Pl => base_1+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN309"
  } ;

mkN310 : Str -> N ;
mkN310 base =
  case base of {
    base_1+"uall" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"uall" ;
                                  Pl => base_1+"oje"
                                } ;
                         Acc => table {
                                  Sg => base_1+"uall" ;
                                  Pl => base_1+"oje"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ualli" ; --guessed
                                  Pl => base_1+"uallve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ualli" ; --guessed
                                    Pl => base_1+"uallsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"oj" ;
                                Pl => base_1+"ojet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"ojt" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ojt" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN310"
  } ;

mkN311 : Str -> N ;
mkN311 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ee" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ee" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN311"
  } ;

mkN312 : Str -> N ;
mkN312 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"ut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN312"
  } ;

mkN313 : Str -> N ;
mkN313 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"rave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"rash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"rat"
                          } ;
                   Acc => table {
                            Sg => base_1+"n" ; --guessed
                            Pl => base_1+"rat" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"s" ; --guessed
                            Pl => base_1+"rave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"s" ; --guessed
                              Pl => base_1+"rave" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN314 : Str -> N ;
mkN314 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"at" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"at" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN315 : Str -> N ;
mkN315 base =
  case base of {
    base_1+"r"+base_2@(?+?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"r"+base_2 ;
                                  Pl => base_1+base_2+"ra"
                                } ;
                         Acc => table {
                                  Sg => base_1+"r"+base_2 ;
                                  Pl => base_1+base_2+"ra"
                                } ;
                         Dat => table {
                                  Sg => base_1+"r"+base_2+"e" ; --guessed
                                  Pl => base_1+"r"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"r"+base_2+"e" ; --guessed
                                    Pl => base_1+"r"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"ra" ;
                                Pl => base_1+base_2+"rat"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN315"
  } ;

mkN316 : Str -> N ;
mkN316 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN317 : Str -> N ;
mkN317 base =
  case base of {
    base_1+"lli" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"lli" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"lli" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"llie" ; --guessed
                                  Pl => base_1+"llive" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"llie" ; --guessed
                                    Pl => base_1+"llish" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"lli" ;
                                Pl => base_1+"jÃ«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN317"
  } ;

mkN318 : Str -> N ;
mkN318 base =
  case base of {
    base_1+"Ã«r" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«r" ;
                                  Pl => base_1+"Ã«ra"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«r" ;
                                  Pl => base_1+"Ã«ra"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«re" ; --guessed
                                  Pl => base_1+"Ã«rve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«re" ; --guessed
                                    Pl => base_1+"Ã«rsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«rat"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN318"
  } ;

mkN319 : Str -> N ;
mkN319 base =
  case base of {
    base_1+"e"+base_2@(?+?+?+?+?)+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2+"Ã«" ;
                                  Pl => base_1+"Ã«"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2+"Ã«" ;
                                  Pl => base_1+"Ã«"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"Ã«e" ; --guessed
                                  Pl => base_1+"e"+base_2+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"Ã«e" ; --guessed
                                    Pl => base_1+"e"+base_2+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã«"+base_2+"a" ;
                                Pl => base_1+"Ã«"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN319"
  } ;

mkN320 : Str -> N ;
mkN320 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN320"
  } ;

mkN321 : Str -> N ;
mkN321 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN321"
  } ;

mkN322 : Str -> N ;
mkN322 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"inj"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"inj"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"injtÃ«"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN323 : Str -> N ;
mkN323 base =
  case base of {
    base_1+"y"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"y"+base_2 ;
                                  Pl => base_1+base_2+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"y"+base_2 ;
                                  Pl => base_1+base_2+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"y"+base_2+"i" ; --guessed
                                  Pl => base_1+"y"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"y"+base_2+"i" ; --guessed
                                    Pl => base_1+"y"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"u" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"ut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"ut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN323"
  } ;

mkN324 : Str -> N ;
mkN324 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"je" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"je" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => base_1+"n" ;
                            Pl => base_1+"t"
                          } ;
                   Dat => table {
                            Sg => base_1+"s" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"s" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN325 : Str -> N ;
mkN325 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"u"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"u"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"je" ; --guessed
                            Pl => base_1+"jet" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"jet" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"jet" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN326 : Str -> N ;
mkN326 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"eve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN326"
  } ;

mkN327 : Str -> N ;
mkN327 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN328 : Str -> N ;
mkN328 base =
  case base of {
    base_1+"a"+base_2@?+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2+"Ã«" ;
                                  Pl => base_1+"e"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2+"Ã«" ;
                                  Pl => base_1+"e"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"Ã«e" ; --guessed
                                  Pl => base_1+"a"+base_2+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"Ã«e" ; --guessed
                                    Pl => base_1+"a"+base_2+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"a" ;
                                Pl => base_1+"e"+base_2+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN328"
  } ;

mkN329 : Str -> N ;
mkN329 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ive" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"ish" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ; --guessed
                            Pl => base_1+"it"
                          } ;
                   Acc => table {
                            Sg => base_1+"atn" ; --guessed
                            Pl => base_1+"it" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"ats" ; --guessed
                            Pl => base_1+"ive" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"ats" ; --guessed
                              Pl => base_1+"ive" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN330 : Str -> N ;
mkN330 base =
  case base of {
    base_1+base_2@?+"l"+base_3@?+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"l"+base_3+"Ã«" ;
                                  Pl => base_1+base_2+"l"+base_3+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"l"+base_3+"Ã«" ;
                                  Pl => base_1+base_2+"l"+base_3+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"l"+base_3+"Ã«e" ; --guessed
                                  Pl => base_1+base_2+"l"+base_3+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"l"+base_3+"Ã«e" ; --guessed
                                    Pl => base_1+base_2+"l"+base_3+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"l"+base_3+"a" ;
                                Pl => base_1+"l"+base_2+base_3+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN330"
  } ;

mkN331 : Str -> N ;
mkN331 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN331"
  } ;

mkN332 : Str -> N ;
mkN332 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ive" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"ish" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"it" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"it" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"ive" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"ive" --guessed
                            }
                 }
        } ;
    g = Masc
  } ;

mkN333 : Str -> N ;
mkN333 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN333"
  } ;

mkN334 : Str -> N ;
mkN334 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ; --guessed
                              Pl => base_1+"ave" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ; --guessed
                                Pl => base_1+"ash" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"at" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"n" ; --guessed
                            Pl => base_1+"at" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"s" ; --guessed
                            Pl => base_1+"ave" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"s" ; --guessed
                              Pl => base_1+"ave" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN335 : Str -> N ;
mkN335 base =
  case base of {
    base_1+base_2@?+"e"+base_3@?+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"e"+base_3+"e" ;
                                  Pl => base_1+base_2+"e"+base_3+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"e"+base_3+"e" ;
                                  Pl => base_1+base_2+"e"+base_3+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"e"+base_3+"ee" ; --guessed
                                  Pl => base_1+base_2+"e"+base_3+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"e"+base_3+"ee" ; --guessed
                                    Pl => base_1+base_2+"e"+base_3+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã«"+base_2+base_3+"a" ;
                                Pl => base_1+base_2+"e"+base_3+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN335"
  } ;

mkN336 : Str -> N ;
mkN336 base =
  case base of {
    base_1+"lÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"lÃ«" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"lÃ«" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"lÃ«e" ; --guessed
                                  Pl => base_1+"lÃ«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"lÃ«e" ; --guessed
                                    Pl => base_1+"lÃ«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"la" ;
                                Pl => base_1+"rjet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN336"
  } ;

mkN337 : Str -> N ;
mkN337 base =
  case base of {
    base_1+"l"+base_2@?+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"l"+base_2+"Ã«" ;
                                  Pl => base_1+"j"+base_2+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"l"+base_2+"Ã«" ;
                                  Pl => base_1+"j"+base_2+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"l"+base_2+"Ã«e" ; --guessed
                                  Pl => base_1+"l"+base_2+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"l"+base_2+"Ã«e" ; --guessed
                                    Pl => base_1+"l"+base_2+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"l"+base_2+"a" ;
                                Pl => base_1+"j"+base_2+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN337"
  } ;

mkN338 : Str -> N ;
mkN338 base =
  case base of {
    base_1+"k" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"kÃ«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"kÃ«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ke" ; --guessed
                                  Pl => base_1+"kve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ke" ; --guessed
                                    Pl => base_1+"ksh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ku" ;
                                Pl => base_1+"qet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN338"
  } ;

mkN339 : Str -> N ;
mkN339 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN340 : Str -> N ;
mkN340 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã«" ;
                                Pl => base_1+"a"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN340"
  } ;

mkN341 : Str -> N ;
mkN341 base =
  case base of {
    base_1+"llÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"llÃ«" ;
                                  Pl => base_1+"lla"
                                } ;
                         Acc => table {
                                  Sg => base_1+"llÃ«" ;
                                  Pl => base_1+"lla"
                                } ;
                         Dat => table {
                                  Sg => base_1+"llÃ«e" ; --guessed
                                  Pl => base_1+"llÃ«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"llÃ«e" ; --guessed
                                    Pl => base_1+"llÃ«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"lla" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN341"
  } ;

mkN342 : Str -> N ;
mkN342 base =
  case base of {
    base_1+"a"+base_2@(?+?)+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2+"Ã«" ;
                                  Pl => base_1+"Ã«"+base_2+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2+"Ã«" ;
                                  Pl => base_1+"Ã«"+base_2+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"u" ;
                                  Pl => base_1+"Ã«"+base_2+"jeve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"u" ;
                                    Pl => base_1+"Ã«"+base_2+"jesh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã«"+base_2+"u" ;
                                Pl => base_1+"Ã«"+base_2+"jet"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«"+base_2+"un" ;
                                Pl => base_1+"Ã«"+base_2+"jet"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«"+base_2+"ut" ;
                                Pl => base_1+"Ã«"+base_2+"jeve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«"+base_2+"ut" ;
                                  Pl => base_1+"Ã«"+base_2+"jeve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN342"
  } ;

mkN343 : Str -> N ;
mkN343 base =
  case base of {
    base_1+"e"+base_2@(?+?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"i" ; --guessed
                                  Pl => base_1+"e"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"i" ; --guessed
                                    Pl => base_1+"e"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©"+base_2+"u" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã©"+base_2+"ut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã©"+base_2+"ut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN343"
  } ;

mkN344 : Str -> N ;
mkN344 base =
  case base of {
    base_1+"a"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"i" ; --guessed
                                  Pl => base_1+"a"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"i" ; --guessed
                                    Pl => base_1+"a"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"i" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN344"
  } ;

mkN345 : Str -> N ;
mkN345 base =
  case base of {
    base_1+"i" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"i" ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"i" ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"ie" ; --guessed
                                  Pl => base_1+"ive" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ie" ; --guessed
                                    Pl => base_1+"ish" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN345"
  } ;

mkN346 : Str -> N ;
mkN346 base =
  case base of {
    base_1+"ua" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ua" ;
                                  Pl => base_1+"onj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ua" ;
                                  Pl => base_1+"onj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"uai" ; --guessed
                                  Pl => base_1+"uave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"uai" ; --guessed
                                    Pl => base_1+"uash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"oi" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"oit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"oit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN346"
  } ;

mkN347 : Str -> N ;
mkN347 base =
  case base of {
    base_1+"llÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"llÃ«" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"llÃ«" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"llÃ«e" ; --guessed
                                  Pl => base_1+"llÃ«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"llÃ«e" ; --guessed
                                    Pl => base_1+"llÃ«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"lla" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN347"
  } ;

mkN348 : Str -> N ;
mkN348 base =
  case base of {
    base_1+"a"+base_2@(?+?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"na"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"na"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"e" ; --guessed
                                  Pl => base_1+"a"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"e" ; --guessed
                                    Pl => base_1+"a"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"i" ;
                                Pl => base_1+"e"+base_2+"nat"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN348"
  } ;

mkN349 : Str -> N ;
mkN349 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => "r"+base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => "r"+base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => "r"+base_1+"a" ;
                                Pl => "r"+base_1+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN349"
  } ;

mkN350 : Str -> N ;
mkN350 base =
  case base of {
    base_1+"a"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"i" ; --guessed
                                  Pl => base_1+"a"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"i" ; --guessed
                                    Pl => base_1+"a"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"u" ;
                                Pl => base_1+"e"+base_2+"jet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"ut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"ut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN350"
  } ;

mkN351 : Str -> N ;
mkN351 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«je" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«je" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => base_1+"et" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ; --guessed
                                Pl => base_1+"eve" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN351"
  } ;

mkN352 : Str -> N ;
mkN352 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"at" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"at" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN353 : Str -> N ;
mkN353 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"je"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"je"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"jet"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN354 : Str -> N ;
mkN354 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+"Ã«"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN354"
  } ;

mkN355 : Str -> N ;
mkN355 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => "sh"+base_1+"i" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => "sh"+base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => "sh"+base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN356 : Str -> N ;
mkN356 base =
  case base of {
    base_1+"ez"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ez"+base_2 ;
                                  Pl => base_1+base_2+"ze"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ez"+base_2 ;
                                  Pl => base_1+base_2+"ze"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ez"+base_2+"e" ; --guessed
                                  Pl => base_1+"ez"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ez"+base_2+"e" ; --guessed
                                    Pl => base_1+"ez"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"zja" ;
                                Pl => base_1+base_2+"zet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN356"
  } ;

mkN357 : Str -> N ;
mkN357 base =
  case base of {
    base_1+"qe" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"qe" ;
                                  Pl => base_1+"qe"
                                } ;
                         Acc => table {
                                  Sg => base_1+"qe" ;
                                  Pl => base_1+"qe"
                                } ;
                         Dat => table {
                                  Sg => base_1+"qee" ; --guessed
                                  Pl => base_1+"qeve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"qee" ; --guessed
                                    Pl => base_1+"qesh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ka" ;
                                Pl => base_1+"qet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN357"
  } ;

mkN358 : Str -> N ;
mkN358 base =
  case base of {
    base_1+"pri" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"pri" ;
                                  Pl => base_1+"nza"
                                } ;
                         Acc => table {
                                  Sg => base_1+"pri" ;
                                  Pl => base_1+"nza"
                                } ;
                         Dat => table {
                                  Sg => base_1+"prie" ; --guessed
                                  Pl => base_1+"prive" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"prie" ; --guessed
                                    Pl => base_1+"prish" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"nza" ;
                                Pl => base_1+"nzat"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN358"
  } ;

mkN359 : Str -> N ;
mkN359 base =
  case base of {
    base_1+base_2@(?+?+?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2 ;
                                  Pl => base_1+"r"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2 ;
                                  Pl => base_1+"r"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"i" ; --guessed
                                  Pl => base_1+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"i" ; --guessed
                                    Pl => base_1+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+"r"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN359"
  } ;

mkN360 : Str -> N ;
mkN360 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"ut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN360"
  } ;

mkN361 : Str -> N ;
mkN361 base =
  case base of {
    base_1+"a" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ai" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ai" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"au" ;
                                Pl => base_1+"etÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"aut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"aut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN361"
  } ;

mkN362 : Str -> N ;
mkN362 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN362"
  } ;

mkN363 : Str -> N ;
mkN363 base =
  case base of {
    base_1+"z" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"z" ;
                                  Pl => base_1+"sa"
                                } ;
                         Acc => table {
                                  Sg => base_1+"z" ;
                                  Pl => base_1+"sa"
                                } ;
                         Dat => table {
                                  Sg => base_1+"seje" ;
                                  Pl => base_1+"save"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"seje" ;
                                    Pl => base_1+"sash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"sa" ;
                                Pl => base_1+"sat"
                              } ;
                       Acc => table {
                                Sg => base_1+"zn" ;
                                Pl => base_1+"sat"
                              } ;
                       Dat => table {
                                Sg => base_1+"zs" ;
                                Pl => base_1+"save"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"zs" ;
                                  Pl => base_1+"save"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN363"
  } ;

mkN364 : Str -> N ;
mkN364 base =
  case base of {
    base_1+"ak" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ak" ;
                                  Pl => base_1+"eq"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ak" ;
                                  Pl => base_1+"eq"
                                } ;
                         Dat => table {
                                  Sg => base_1+"aki" ; --guessed
                                  Pl => base_1+"akve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"aki" ; --guessed
                                    Pl => base_1+"aksh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"aku" ;
                                Pl => base_1+"eqÃ«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"akut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"akut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN364"
  } ;

mkN365 : Str -> N ;
mkN365 base =
  case base of {
    base_1+"a"+base_2@(?+?)+"Ã«r" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2+"Ã«r" ;
                                  Pl => base_1+"Ã«"+base_2+"enj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2+"Ã«r" ;
                                  Pl => base_1+"Ã«"+base_2+"enj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"Ã«ri" ; --guessed
                                  Pl => base_1+"a"+base_2+"Ã«rve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"Ã«ri" ; --guessed
                                    Pl => base_1+"a"+base_2+"Ã«rsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"Ã«ri" ;
                                Pl => base_1+"Ã«"+base_2+"enjÃ«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"Ã«rit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"Ã«rit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN365"
  } ;

mkN366 : Str -> N ;
mkN366 base =
  case base of {
    base_1+"k" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"qÃ«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"qÃ«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ki" ; --guessed
                                  Pl => base_1+"kve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ki" ; --guessed
                                    Pl => base_1+"ksh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ku" ;
                                Pl => base_1+"qit"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"kut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"kut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN366"
  } ;

mkN367 : Str -> N ;
mkN367 base =
  case base of {
    base_1+"u"+base_2@?+"rÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"u"+base_2+"rÃ«" ;
                                  Pl => base_1+"i"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"u"+base_2+"rÃ«" ;
                                  Pl => base_1+"i"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"i"+base_2+"eje" ;
                                  Pl => base_1+"i"+base_2+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"i"+base_2+"eje" ;
                                    Pl => base_1+"i"+base_2+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i"+base_2+"a" ;
                                Pl => base_1+"i"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"u"+base_2+"rÃ«n" ;
                                Pl => base_1+"i"+base_2+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"u"+base_2+"rÃ«s" ;
                                Pl => base_1+"i"+base_2+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"u"+base_2+"rÃ«s" ;
                                  Pl => base_1+"i"+base_2+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN367"
  } ;

mkN368 : Str -> N ;
mkN368 base =
  case base of {
    base_1+"Ã«"+base_2@?+base_3@(?+?+?)+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2+base_3+"Ã«" ;
                                  Pl => base_1+base_2+"e"+base_3+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2+base_3+"Ã«" ;
                                  Pl => base_1+base_2+"e"+base_3+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+base_3+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+base_3+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+base_3+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+base_3+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"e"+base_3+"a" ;
                                Pl => base_1+base_2+"e"+base_3+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN368"
  } ;

mkN369 : Str -> N ;
mkN369 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"itÃ«"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN370 : Str -> N ;
mkN370 base =
  case base of {
    base_1+"a"+base_2@(?+?)+"Ã«r" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2+"Ã«r" ;
                                  Pl => base_1+"Ã«"+base_2+"enj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2+"Ã«r" ;
                                  Pl => base_1+"Ã«"+base_2+"enj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"Ã«ri" ; --guessed
                                  Pl => base_1+"a"+base_2+"Ã«rve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"Ã«ri" ; --guessed
                                    Pl => base_1+"a"+base_2+"Ã«rsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"ri" ;
                                Pl => base_1+"Ã«"+base_2+"enjtÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"rit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"rit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN370"
  } ;

mkN371 : Str -> N ;
mkN371 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ;
                              Pl => base_1+"ave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ;
                                Pl => base_1+"ash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"n" ;
                            Pl => base_1+"at"
                          } ;
                   Dat => table {
                            Sg => base_1+"s" ;
                            Pl => base_1+"ave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"s" ;
                              Pl => base_1+"ave"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN372 : Str -> N ;
mkN372 base =
  case base of {
    base_1+base_2@?+"ll" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"ll" ;
                                  Pl => base_1+base_2+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"ll" ;
                                  Pl => base_1+base_2+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"lli" ; --guessed
                                  Pl => base_1+base_2+"llve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"lli" ; --guessed
                                    Pl => base_1+base_2+"llsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"lli" ;
                                Pl => base_1+"j"+base_2+"t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"llit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"llit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN372"
  } ;

mkN373 : Str -> N ;
mkN373 base =
  case base of {
    base_1+"ua" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ua" ;
                                  Pl => base_1+"enj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ua" ;
                                  Pl => base_1+"enj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"uai" ; --guessed
                                  Pl => base_1+"uave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"uai" ; --guessed
                                    Pl => base_1+"uash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"oi" ;
                                Pl => base_1+"enjt"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"oit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"oit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN373"
  } ;

mkN374 : Str -> N ;
mkN374 base =
  case base of {
    base_1+"all" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"all" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"all" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"alli" ; --guessed
                                  Pl => base_1+"allve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"alli" ; --guessed
                                    Pl => base_1+"allsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"alli" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"allit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"allit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN374"
  } ;

mkN375 : Str -> N ;
mkN375 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+base_2+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN375"
  } ;

mkN376 : Str -> N ;
mkN376 base =
  case base of {
    "r"+base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "r"+base_1+"Ã«" ;
                                  Pl => "r"+base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => "r"+base_1+"Ã«" ;
                                  Pl => "r"+base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => "r"+base_1+"Ã«e" ; --guessed
                                  Pl => "r"+base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => "r"+base_1+"Ã«e" ; --guessed
                                    Pl => "r"+base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN376"
  } ;

mkN377 : Str -> N ;
mkN377 base =
  case base of {
    base_1+base_2@(?+?+?)+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"Ã«" ;
                                  Pl => base_1+"r"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"Ã«" ;
                                  Pl => base_1+"r"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"Ã«e" ; --guessed
                                  Pl => base_1+base_2+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"Ã«e" ; --guessed
                                    Pl => base_1+base_2+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"r"+base_2+"a" ;
                                Pl => base_1+"r"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN377"
  } ;

mkN378 : Str -> N ;
mkN378 base =
  case base of {
    base_1+"l" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"l" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"l" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"li" ;
                                  Pl => base_1+"jeve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"li" ;
                                    Pl => base_1+"jesh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"li" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => base_1+"lin" ;
                                Pl => base_1+"jet"
                              } ;
                       Dat => table {
                                Sg => base_1+"lit" ;
                                Pl => base_1+"jeve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"lit" ;
                                  Pl => base_1+"jeve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN378"
  } ;

mkN379 : Str -> N ;
mkN379 base =
  case base of {
    base_1+base_2@?+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"Ã«" ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"Ã«" ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"Ã«i" ; --guessed
                                  Pl => base_1+base_2+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"Ã«i" ; --guessed
                                    Pl => base_1+base_2+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"r"+base_2+"a" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"r"+base_2+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"r"+base_2+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN379"
  } ;

mkN380 : Str -> N ;
mkN380 base =
  case base of {
    base_1+"e"+base_2@(?+?+?)+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2+"Ã«" ;
                                  Pl => base_1+"Ã«"+base_2+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2+"Ã«" ;
                                  Pl => base_1+"Ã«"+base_2+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"eje" ;
                                  Pl => base_1+"Ã«"+base_2+"Ã«ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"eje" ;
                                    Pl => base_1+"Ã«"+base_2+"Ã«sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã«"+base_2+"a" ;
                                Pl => base_1+"Ã«"+base_2+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"e"+base_2+"Ã«n" ;
                                Pl => base_1+"Ã«"+base_2+"Ã«t"
                              } ;
                       Dat => table {
                                Sg => base_1+"e"+base_2+"Ã«s" ;
                                Pl => base_1+"Ã«"+base_2+"Ã«ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"e"+base_2+"Ã«s" ;
                                  Pl => base_1+"Ã«"+base_2+"Ã«ve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN380"
  } ;

mkN381 : Str -> N ;
mkN381 base =
  case base of {
    base_1+"Ã«"+base_2@(?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"e" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"e" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+"Ã«"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN381"
  } ;

mkN382 : Str -> N ;
mkN382 base =
  case base of {
    base_1+"ll" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ll" ;
                                  Pl => base_1+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"lli" ; --guessed
                                  Pl => base_1+"llve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"lli" ; --guessed
                                    Pl => base_1+"llsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"lli" ;
                                Pl => base_1+"jÃ«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"llit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"llit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN382"
  } ;

mkN383 : Str -> N ;
mkN383 base =
  case base of {
    base_1+"Ã«"+base_2@(?+?)+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2+"Ã«" ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2+"Ã«" ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"e"+base_2+"a" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN383"
  } ;

mkN384 : Str -> N ;
mkN384 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ia" ;
                            Pl => base_1+"it"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN385 : Str -> N ;
mkN385 base =
  case base of {
    base_1+"n" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"n" ;
                                  Pl => base_1+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"n" ;
                                  Pl => base_1+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ni" ; --guessed
                                  Pl => base_1+"nve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ni" ; --guessed
                                    Pl => base_1+"nsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ni" ;
                                Pl => base_1+"jt"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"nit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"nit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN385"
  } ;

mkN386 : Str -> N ;
mkN386 base =
  case base of {
    base_1+"ke" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ke" ;
                                  Pl => base_1+"qe"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ke" ;
                                  Pl => base_1+"qe"
                                } ;
                         Dat => table {
                                  Sg => base_1+"kee" ; --guessed
                                  Pl => base_1+"keve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"kee" ; --guessed
                                    Pl => base_1+"kesh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ku" ;
                                Pl => base_1+"qet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN386"
  } ;

mkN387 : Str -> N ;
mkN387 base =
  case base of {
    base_1+"all" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"all" ;
                                  Pl => base_1+"ej"
                                } ;
                         Acc => table {
                                  Sg => base_1+"all" ;
                                  Pl => base_1+"ej"
                                } ;
                         Dat => table {
                                  Sg => base_1+"alli" ; --guessed
                                  Pl => base_1+"allve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"alli" ; --guessed
                                    Pl => base_1+"allsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"alli" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"allit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"allit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN387"
  } ;

mkN388 : Str -> N ;
mkN388 base =
  case base of {
    "a"+base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "a"+base_1+"Ã«"+base_2 ;
                                  Pl => "e"+base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => "a"+base_1+"Ã«"+base_2 ;
                                  Pl => "e"+base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => "a"+base_1+"Ã«"+base_2+"e" ; --guessed
                                  Pl => "a"+base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => "a"+base_1+"Ã«"+base_2+"e" ; --guessed
                                    Pl => "a"+base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => "a"+base_1+"Ã«"+base_2+"a" ;
                                Pl => "e"+base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN388"
  } ;

mkN389 : Str -> N ;
mkN389 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"t" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"t" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1 ; --guessed
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"t" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"t" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN390 : Str -> N ;
mkN390 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN390"
  } ;

mkN391 : Str -> N ;
mkN391 base =
  case base of {
    base_1+"gÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"gÃ«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"gÃ«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"gÃ«e" ; --guessed
                                  Pl => base_1+"gÃ«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"gÃ«e" ; --guessed
                                    Pl => base_1+"gÃ«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ga" ;
                                Pl => base_1+"gÃ«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN391"
  } ;

mkN392 : Str -> N ;
mkN392 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ;
                              Pl => base_1+"ave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ;
                                Pl => base_1+"ash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"Ã«n" ;
                            Pl => base_1+"at"
                          } ;
                   Dat => table {
                            Sg => base_1+"Ã«s" ;
                            Pl => base_1+"ave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"Ã«s" ;
                              Pl => base_1+"ave"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN393 : Str -> N ;
mkN393 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«je" ;
                                  Pl => base_1+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«je" ;
                                    Pl => base_1+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"eve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN393"
  } ;

mkN394 : Str -> N ;
mkN394 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN394"
  } ;

mkN395 : Str -> N ;
mkN395 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"nj"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ni" ;
                            Pl => nonExist
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"nit" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"nit" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN396 : Str -> N ;
mkN396 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"llarÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"llarÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"llarÃ«ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"llarÃ«sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"llarÃ«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => base_1+"llarÃ«t"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"llarÃ«ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"llarÃ«ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN397 : Str -> N ;
mkN397 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN397"
  } ;

mkN398 : Str -> N ;
mkN398 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"e" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"e" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã«"+base_2 ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN398"
  } ;

mkN399 : Str -> N ;
mkN399 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i-mohu" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"i-mohut" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"i-mohut" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN400 : Str -> N ;
mkN400 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ei" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ei" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN400"
  } ;

mkN401 : Str -> N ;
mkN401 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"et" ;
                            Pl => base_1+"i"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"ett" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"ett" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN402 : Str -> N ;
mkN402 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"et" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN402"
  } ;

mkN403 : Str -> N ;
mkN403 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN403"
  } ;

mkN404 : Str -> N ;
mkN404 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN404"
  } ;

mkN405 : Str -> N ;
mkN405 base =
  case base of {
    base_1+"kÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"kÃ«" ;
                                  Pl => base_1+"qe"
                                } ;
                         Acc => table {
                                  Sg => base_1+"kÃ«" ;
                                  Pl => base_1+"qe"
                                } ;
                         Dat => table {
                                  Sg => base_1+"kÃ«e" ; --guessed
                                  Pl => base_1+"kÃ«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"kÃ«e" ; --guessed
                                    Pl => base_1+"kÃ«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ka" ;
                                Pl => base_1+"qet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN405"
  } ;

mkN406 : Str -> N ;
mkN406 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«t"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«t"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN407 : Str -> N ;
mkN407 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«s"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN407"
  } ;

mkN408 : Str -> N ;
mkN408 base =
  case base of {
    base_1+"e"+base_2@?+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2+"Ã«" ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2+"Ã«" ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"Ã«i" ; --guessed
                                  Pl => base_1+"e"+base_2+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"Ã«i" ; --guessed
                                    Pl => base_1+"e"+base_2+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©"+base_2+"a" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã©"+base_2+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã©"+base_2+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN408"
  } ;

mkN409 : Str -> N ;
mkN409 base =
  case base of {
    base_1+"e"+base_2@(?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"i" ; --guessed
                                  Pl => base_1+"e"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"i" ; --guessed
                                    Pl => base_1+"e"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©"+base_2+"t" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã©"+base_2+"tt" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã©"+base_2+"tt" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN409"
  } ;

mkN410 : Str -> N ;
mkN410 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"e" ;
                                  Pl => base_1+base_2+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"e" ;
                                    Pl => base_1+base_2+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«"+base_2+"n" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«"+base_2+"s" ;
                                Pl => base_1+base_2+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«"+base_2+"s" ;
                                  Pl => base_1+base_2+"ave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN410"
  } ;

mkN411 : Str -> N ;
mkN411 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN412 : Str -> N ;
mkN412 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN412"
  } ;

mkN413 : Str -> N ;
mkN413 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"eve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"esh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"et" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"eve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"eve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN414 : Str -> N ;
mkN414 base =
  case base of {
    base_1+"a"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"Ã«r"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2+"Ã«r"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"i" ;
                                  Pl => base_1+"e"+base_2+"Ã«rve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"i" ;
                                    Pl => base_1+"e"+base_2+"Ã«rish"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"i" ;
                                Pl => base_1+"e"+base_2+"Ã«rit"
                              } ;
                       Acc => table {
                                Sg => base_1+"a"+base_2+"in" ;
                                Pl => base_1+"e"+base_2+"Ã«rit"
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"it" ;
                                Pl => base_1+"e"+base_2+"Ã«rve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"it" ;
                                  Pl => base_1+"e"+base_2+"Ã«rve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN414"
  } ;

mkN415 : Str -> N ;
mkN415 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"o"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"o"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"i" ;
                                  Pl => base_1+base_2+"ove"
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"i" ;
                                    Pl => base_1+base_2+"osh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+base_2+"ot"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"in" ;
                                Pl => base_1+base_2+"ot"
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ;
                                Pl => base_1+base_2+"ove"
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ;
                                  Pl => base_1+base_2+"ove"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN415"
  } ;

mkN416 : Str -> N ;
mkN416 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ra"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ;
                              Pl => base_1+"rave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ;
                                Pl => base_1+"rash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"rat"
                          } ;
                   Acc => table {
                            Sg => base_1+"n" ;
                            Pl => base_1+"rat"
                          } ;
                   Dat => table {
                            Sg => base_1+"s" ;
                            Pl => base_1+"rave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"s" ;
                              Pl => base_1+"rave"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN417 : Str -> N ;
mkN417 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«ï¼arnautllarÃ«" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«ï¼arnautllarÃ«" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN418 : Str -> N ;
mkN418 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"a" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN418"
  } ;

mkN419 : Str -> N ;
mkN419 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"e" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"e" ; --guessed
                                    Pl => base_1+base_2+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"Ã«n" ; --guessed
                                Pl => base_1+base_2+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"Ã«s" ; --guessed
                                Pl => base_1+base_2+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"Ã«s" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN419"
  } ;

mkN420 : Str -> N ;
mkN420 base =
  case base of {
    base_1+"y"+base_2@?+"ll" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"y"+base_2+"ll" ;
                                  Pl => base_1+base_2+"j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"y"+base_2+"ll" ;
                                  Pl => base_1+base_2+"j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"y"+base_2+"lli" ; --guessed
                                  Pl => base_1+"y"+base_2+"llve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"y"+base_2+"lli" ; --guessed
                                    Pl => base_1+"y"+base_2+"llsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"y"+base_2+"lli" ;
                                Pl => base_1+base_2+"jtÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"y"+base_2+"llit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"y"+base_2+"llit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN420"
  } ;

mkN421 : Str -> N ;
mkN421 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"e"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN422 : Str -> N ;
mkN422 base =
  case base of {
    base_1+"j"+base_2@?+base_3@(?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"j"+base_2+base_3 ;
                                  Pl => base_1+base_2+"j"+base_3+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"j"+base_2+base_3 ;
                                  Pl => base_1+base_2+"j"+base_3+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"j"+base_2+base_3+"i" ; --guessed
                                  Pl => base_1+"j"+base_2+base_3+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"j"+base_2+base_3+"i" ; --guessed
                                    Pl => base_1+"j"+base_2+base_3+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"j"+base_2+base_3+"i" ;
                                Pl => base_1+"j"+base_2+base_3+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"j"+base_2+base_3+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"j"+base_2+base_3+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN422"
  } ;

mkN423 : Str -> N ;
mkN423 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"Ã«sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"Ã«t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"Ã«ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"Ã«ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN424 : Str -> N ;
mkN424 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"i" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"i" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"e" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"e" ; --guessed
                                    Pl => base_1+base_2+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+base_2+"at" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"Ã«n" ; --guessed
                                Pl => base_1+base_2+"at" --guessed
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"Ã«s" ; --guessed
                                Pl => base_1+base_2+"ave" --guessed
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"Ã«s" ; --guessed
                                  Pl => base_1+base_2+"ave" --guessed
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN424"
  } ;

mkN425 : Str -> N ;
mkN425 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ni" ;
                            Pl => base_1+"jtÃ«"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"nit" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"nit" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN426 : Str -> N ;
mkN426 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"e" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"e" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN426"
  } ;

mkN427 : Str -> N ;
mkN427 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"e" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"et" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"et" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN428 : Str -> N ;
mkN428 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"eve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"esh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"et" --guessed
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ; --guessed
                            Pl => base_1+"et" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => base_1+"eve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => base_1+"eve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN429 : Str -> N ;
mkN429 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«atn" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«ats" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«ats" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN429"
  } ;

mkN430 : Str -> N ;
mkN430 base =
  case base of {
    base_1+"h"+base_2@(?+?+?+?+?)+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"h"+base_2+"e" ;
                                  Pl => base_1+base_2+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"h"+base_2+"e" ;
                                  Pl => base_1+base_2+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"h"+base_2+"eje" ;
                                  Pl => base_1+base_2+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"h"+base_2+"eje" ;
                                    Pl => base_1+base_2+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"ja" ;
                                Pl => base_1+base_2+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"h"+base_2+"en" ;
                                Pl => base_1+base_2+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"h"+base_2+"es" ;
                                Pl => base_1+base_2+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"h"+base_2+"es" ;
                                  Pl => base_1+base_2+"eve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN430"
  } ;

mkN431 : Str -> N ;
mkN431 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"i"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"i"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN431"
  } ;

mkN432 : Str -> N ;
mkN432 base =
  case base of {
    base_1+"u"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"u"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"u"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"u"+base_2+"e" ; --guessed
                                  Pl => base_1+"u"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"u"+base_2+"e" ; --guessed
                                    Pl => base_1+"u"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN432"
  } ;

mkN433 : Str -> N ;
mkN433 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN433"
  } ;

mkN434 : Str -> N ;
mkN434 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"d"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"d"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"dve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"dsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"dt"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"dt"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"dve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"dve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN434"
  } ;

mkN435 : Str -> N ;
mkN435 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+base_2+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN435"
  } ;

mkN436 : Str -> N ;
mkN436 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"e" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"e" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+base_2+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN436"
  } ;

mkN437 : Str -> N ;
mkN437 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"jat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"jat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN437"
  } ;

mkN438 : Str -> N ;
mkN438 base =
  case base of {
    base_1+"Ã¢" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã¢" ;
                                  Pl => base_1+"Ã¢j"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã¢" ;
                                  Pl => base_1+"Ã¢j"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã¢i" ; --guessed
                                  Pl => base_1+"Ã¢ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã¢i" ; --guessed
                                    Pl => base_1+"Ã¢sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ani" ;
                                Pl => base_1+"Ã¢jt"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"anit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"anit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN438"
  } ;

mkN439 : Str -> N ;
mkN439 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"t" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"t" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1 ;
                            Pl => base_1+"t" --guessed
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"t" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"t" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN440 : Str -> N ;
mkN440 base =
  case base of {
    base_1+"a" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ai" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ai" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN440"
  } ;

mkN441 : Str -> N ;
mkN441 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"t"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"t"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1 ;
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"t" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"t" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN442 : Str -> N ;
mkN442 base =
  case base of {
    base_1+"i"+base_2@(?+?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"i"+base_2 ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"i"+base_2 ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"i"+base_2+"i" ; --guessed
                                  Pl => base_1+"i"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"i"+base_2+"i" ; --guessed
                                    Pl => base_1+"i"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN442"
  } ;

mkN443 : Str -> N ;
mkN443 base =
  case base of {
    base_1+"e"+base_2@("sh"|?)+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2+"Ã«" ;
                                  Pl => base_1+"Ã©"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2+"Ã«" ;
                                  Pl => base_1+"Ã©"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"Ã«e" ; --guessed
                                  Pl => base_1+"e"+base_2+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"Ã«e" ; --guessed
                                    Pl => base_1+"e"+base_2+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©"+base_2+"a" ;
                                Pl => base_1+"Ã©"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN443"
  } ;

mkN444 : Str -> N ;
mkN444 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"eve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"esh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"et"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"eve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"eve"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN445 : Str -> N ;
mkN445 base =
  case base of {
    base_1+"k" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"qe"
                                } ;
                         Acc => table {
                                  Sg => base_1+"k" ;
                                  Pl => base_1+"qe"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ki" ; --guessed
                                  Pl => base_1+"kve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ki" ; --guessed
                                    Pl => base_1+"ksh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ku" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"kut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"kut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN445"
  } ;

mkN446 : Str -> N ;
mkN446 base =
  case base of {
    base_1+"ua" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ua" ;
                                  Pl => base_1+"uonj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ua" ;
                                  Pl => base_1+"uonj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"oi" ;
                                  Pl => base_1+"uonjve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"oi" ;
                                    Pl => base_1+"uonjsh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"oi" ;
                                Pl => base_1+"uonjtÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"oin" ;
                                Pl => base_1+"uonjtÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"oit" ;
                                Pl => base_1+"uonjve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"oit" ;
                                  Pl => base_1+"uonjve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN446"
  } ;

mkN447 : Str -> N ;
mkN447 base =
  case base of {
    "manxu"+base_1+"anÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "manxu"+base_1+"anÃ«" ;
                                  Pl => "bo"+base_1+"zilokÃ«"
                                } ;
                         Acc => table {
                                  Sg => "manxu"+base_1+"anÃ«" ;
                                  Pl => "bo"+base_1+"zilokÃ«"
                                } ;
                         Dat => table {
                                  Sg => "manxu"+base_1+"anÃ«i" ; --guessed
                                  Pl => "manxu"+base_1+"anÃ«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => "manxu"+base_1+"anÃ«i" ; --guessed
                                    Pl => "manxu"+base_1+"anÃ«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => "bo"+base_1+"ziloku" ;
                                Pl => "bo"+base_1+"zilokÃ«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => "bo"+base_1+"zilokut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => "bo"+base_1+"zilokut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN447"
  } ;

mkN448 : Str -> N ;
mkN448 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"a" ;
                              Pl => base_1+"ave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"ash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"an" ;
                            Pl => base_1+"at"
                          } ;
                   Dat => table {
                            Sg => base_1+"at" ;
                            Pl => base_1+"ave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"at" ;
                              Pl => base_1+"ave"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN449 : Str -> N ;
mkN449 base =
  case base of {
    base_1+"r" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"r" ;
                                  Pl => base_1+"nj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"r" ;
                                  Pl => base_1+"nj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ri" ; --guessed
                                  Pl => base_1+"rve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ri" ; --guessed
                                    Pl => base_1+"rsh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => nonExist ;
                                Pl => base_1+"njt"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist+"t" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist+"t" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN449"
  } ;

mkN450 : Str -> N ;
mkN450 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"e" ;
                                  Pl => base_1+base_2+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"e" ;
                                    Pl => base_1+base_2+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"Ã«n" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"Ã«s" ;
                                Pl => base_1+base_2+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"Ã«s" ;
                                  Pl => base_1+base_2+"ave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN450"
  } ;

mkN451 : Str -> N ;
mkN451 base =
  case base of {
    base_1+"rÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"rÃ«" ;
                                  Pl => base_1+"na"
                                } ;
                         Acc => table {
                                  Sg => base_1+"rÃ«" ;
                                  Pl => base_1+"na"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"nave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ;
                                    Pl => base_1+"nash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"nat"
                              } ;
                       Acc => table {
                                Sg => base_1+"rÃ«n" ;
                                Pl => base_1+"nat"
                              } ;
                       Dat => table {
                                Sg => base_1+"rÃ«s" ;
                                Pl => base_1+"nave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"rÃ«s" ;
                                  Pl => base_1+"nave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN451"
  } ;

mkN452 : Str -> N ;
mkN452 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e" --guessed
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e" --guessed
                                } ;
                         Dat => table {
                                  Sg => base_1+"ei" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ei" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jat" --guessed
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"jat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"jat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN452"
  } ;

mkN453 : Str -> N ;
mkN453 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"Ã«ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"Ã«vet"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"Ã«vet"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN454 : Str -> N ;
mkN454 base =
  case base of {
    base_1+"i" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"i" ;
                                  Pl => base_1+"i"
                                } ;
                         Acc => table {
                                  Sg => base_1+"i" ;
                                  Pl => base_1+"i"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"ive"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"ish"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ia" ;
                                Pl => base_1+"itÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"inÃ«" ;
                                Pl => base_1+"itÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"isÃ«" ;
                                Pl => base_1+"ive"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"isÃ«" ;
                                  Pl => base_1+"ive"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN454"
  } ;

mkN455 : Str -> N ;
mkN455 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"ut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN455"
  } ;

mkN456 : Str -> N ;
mkN456 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ;
                              Pl => base_1+"ave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ;
                                Pl => base_1+"ash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"Ã«n" ;
                            Pl => base_1+"at"
                          } ;
                   Dat => table {
                            Sg => base_1+"Ã«s" ;
                            Pl => base_1+"ave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"Ã«s" ;
                              Pl => base_1+"ave"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN457 : Str -> N ;
mkN457 base =
  case base of {
    "mjezditÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "mjezditÃ«" ;
                                  Pl => "{{{1}}}a"
                                } ;
                         Acc => table {
                                  Sg => "mjezditÃ«" ;
                                  Pl => "{{{1}}}a"
                                } ;
                         Dat => table {
                                  Sg => "{{{1}}}e" ;
                                  Pl => "{{{1}}}ave"
                                } ;
                         Ablat => table {
                                    Sg => "{{{1}}}e" ;
                                    Pl => "{{{1}}}ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => "{{{1}}}a" ;
                                Pl => "{{{1}}}at"
                              } ;
                       Acc => table {
                                Sg => "mjezditÃ«n" ;
                                Pl => "{{{1}}}at"
                              } ;
                       Dat => table {
                                Sg => "mjezditÃ«s" ;
                                Pl => "{{{1}}}ave"
                              } ;
                       Ablat => table {
                                  Sg => "mjezditÃ«s" ;
                                  Pl => "{{{1}}}ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN457"
  } ;

mkN458 : Str -> N ;
mkN458 base =
  case base of {
    "mjeznatÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "mjeznatÃ«" ;
                                  Pl => "{{{1}}}a"
                                } ;
                         Acc => table {
                                  Sg => "mjeznatÃ«" ;
                                  Pl => "{{{1}}}a"
                                } ;
                         Dat => table {
                                  Sg => "{{{1}}}e" ;
                                  Pl => "{{{1}}}ave"
                                } ;
                         Ablat => table {
                                    Sg => "{{{1}}}e" ;
                                    Pl => "{{{1}}}ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => "{{{1}}}a" ;
                                Pl => "{{{1}}}at"
                              } ;
                       Acc => table {
                                Sg => "mjeznatÃ«n" ;
                                Pl => "{{{1}}}at"
                              } ;
                       Dat => table {
                                Sg => "mjeznatÃ«s" ;
                                Pl => "{{{1}}}ave"
                              } ;
                       Ablat => table {
                                  Sg => "mjeznatÃ«s" ;
                                  Pl => "{{{1}}}ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN458"
  } ;

mkN459 : Str -> N ;
mkN459 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ;
                              Pl => base_1+"ive"
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ;
                                Pl => base_1+"ish"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"it"
                          } ;
                   Acc => table {
                            Sg => base_1+"atn" ;
                            Pl => base_1+"it"
                          } ;
                   Dat => table {
                            Sg => base_1+"ats" ;
                            Pl => base_1+"ive"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ats" ;
                              Pl => base_1+"ive"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN460 : Str -> N ;
mkN460 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"it"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN461 : Str -> N ;
mkN461 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ;
                              Pl => base_1+"Ã«ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ;
                                Pl => base_1+"Ã«sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"n" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Dat => table {
                            Sg => base_1+"s" ;
                            Pl => base_1+"Ã«ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"s" ;
                              Pl => base_1+"Ã«ve"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN462 : Str -> N ;
mkN462 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"rat"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN463 : Str -> N ;
mkN463 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN463"
  } ;

mkN464 : Str -> N ;
mkN464 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"Ã«ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"Ã«tÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"Ã«ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"Ã«ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN465 : Str -> N ;
mkN465 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"je" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"je" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ; --guessed
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => base_1+"en" ; --guessed
                            Pl => base_1+"t" --guessed
                          } ;
                   Dat => table {
                            Sg => base_1+"es" ; --guessed
                            Pl => base_1+"ve" --guessed
                          } ;
                   Ablat => table {
                              Sg => base_1+"es" ; --guessed
                              Pl => base_1+"ve" --guessed
                            }
                 }
        } ;
    g = Fem
  } ;

mkN466 : Str -> N ;
mkN466 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => base_1+"tÃ«"
                          } ;
                   Dat => table {
                            Sg => base_1+"sÃ«" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"sÃ«" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN467 : Str -> N ;
mkN467 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"e"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ;
                              Pl => base_1+"eve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ;
                                Pl => base_1+"esh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"et"
                          } ;
                   Acc => table {
                            Sg => base_1+"etn" ;
                            Pl => base_1+"et"
                          } ;
                   Dat => table {
                            Sg => base_1+"ets" ;
                            Pl => base_1+"eve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ets" ;
                              Pl => base_1+"eve"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN468 : Str -> N ;
mkN468 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"ejatn" ;
                                Pl => base_1+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"ejats" ;
                                Pl => base_1+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ejats" ;
                                  Pl => base_1+"eve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN468"
  } ;

mkN469 : Str -> N ;
mkN469 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"ee"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"ee"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eeje" ;
                                  Pl => base_1+"eeve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eeje" ;
                                    Pl => base_1+"eesh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"eja" ;
                                Pl => base_1+"eet"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«jatn" ;
                                Pl => base_1+"eet"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«jats" ;
                                Pl => base_1+"eeve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«jats" ;
                                  Pl => base_1+"eeve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN469"
  } ;

mkN470 : Str -> N ;
mkN470 base =
  case base of {
    base_1+base_2@(?+?+?+?+?+?)+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"e" ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"e" ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"ei" ; --guessed
                                  Pl => base_1+base_2+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"ei" ; --guessed
                                    Pl => base_1+base_2+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"ja" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => base_1+"lm"+base_2+"en" ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"jat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"jat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN470"
  } ;

mkN471 : Str -> N ;
mkN471 base =
  case base of {
    base_1+"eshÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"eshÃ«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"eshÃ«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eshÃ«je" ;
                                  Pl => base_1+"Ã«ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eshÃ«je" ;
                                    Pl => base_1+"Ã«sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"eshÃ«n" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Dat => table {
                                Sg => base_1+"eshÃ«s" ;
                                Pl => base_1+"Ã«ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"eshÃ«s" ;
                                  Pl => base_1+"Ã«ve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN471"
  } ;

mkN472 : Str -> N ;
mkN472 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«je" ;
                                  Pl => base_1+"Ã«ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«je" ;
                                    Pl => base_1+"Ã«sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"Ã«ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"Ã«ve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN472"
  } ;

mkN473 : Str -> N ;
mkN473 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"e" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"e" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"i" ;
                                Pl => base_1+base_2+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN473"
  } ;

mkN474 : Str -> N ;
mkN474 base =
  case base of {
    "lu"+base_1+"neshÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "lu"+base_1+"neshÃ«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => "lu"+base_1+"neshÃ«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"at" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => "lu"+base_1+"neshÃ«n" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => "lu"+base_1+"neshÃ«s" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => "lu"+base_1+"neshÃ«s" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN474"
  } ;

mkN475 : Str -> N ;
mkN475 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"ilirolog"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"ilirolog"
                            } ;
                     Dat => table {
                              Sg => base_1+"u" ;
                              Pl => base_1+"ilirologve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"u" ;
                                Pl => base_1+"ilirologsh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"ilirologt"
                          } ;
                   Acc => table {
                            Sg => base_1+"un" ;
                            Pl => base_1+"ilirologt"
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ;
                            Pl => base_1+"ilirologve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ;
                              Pl => base_1+"ilirologve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN476 : Str -> N ;
mkN476 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ei" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ei" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jat"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"jat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"jat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN476"
  } ;

mkN477 : Str -> N ;
mkN477 base =
  case base of {
    base_1+"s" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"s" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"s" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"si" ; --guessed
                                  Pl => base_1+"sve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"si" ; --guessed
                                    Pl => base_1+"ssh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"si" ;
                                Pl => base_1+"sit"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"sit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"sit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN477"
  } ;

mkN478 : Str -> N ;
mkN478 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"ish"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"it"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"it"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN479 : Str -> N ;
mkN479 base =
  case base of {
    "vnesht"+base_1+"ri" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "vnesht"+base_1+"ri" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => "vnesht"+base_1+"ri" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => "vnesht"+base_1+"rin" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => "vnesht"+base_1+"ris" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => "vnesht"+base_1+"ris" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN479"
  } ;

mkN480 : Str -> N ;
mkN480 base =
  case base of {
    "vresht"+base_1+"ri" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => "vresht"+base_1+"ri" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => "vresht"+base_1+"ri" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => "vresht"+base_1+"rin" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => "vresht"+base_1+"ris" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => "vresht"+base_1+"ris" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN480"
  } ;

mkN481 : Str -> N ;
mkN481 base =
  case base of {
    base_1+"a" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"an" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"as" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"as" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN481"
  } ;

mkN482 : Str -> N ;
mkN482 base =
  case base of {
    base_1+"ishtÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ishtÃ«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ishtÃ«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"ishtÃ«n" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"ishtÃ«s" ;
                                Pl => base_1+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ishtÃ«s" ;
                                  Pl => base_1+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN482"
  } ;

mkN483 : Str -> N ;
mkN483 base =
  case base of {
    base_1+base_2@(?+?+?)+"tore" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"tore" ;
                                  Pl => base_1+"o"+base_2+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"tore" ;
                                  Pl => base_1+"o"+base_2+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"toreje" ;
                                  Pl => base_1+"o"+base_2+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"toreje" ;
                                    Pl => base_1+"o"+base_2+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"o"+base_2+"ja" ;
                                Pl => base_1+"o"+base_2+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+base_2+"toren" ;
                                Pl => base_1+"o"+base_2+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"tores" ;
                                Pl => base_1+"o"+base_2+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"tores" ;
                                  Pl => base_1+"o"+base_2+"eve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN483"
  } ;

mkN484 : Str -> N ;
mkN484 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"e" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"e" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã«"+base_2+"a" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN484"
  } ;

mkN485 : Str -> N ;
mkN485 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ei" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ei" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN485"
  } ;

mkN486 : Str -> N ;
mkN486 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"Ã«" ;
                              Pl => base_1+"ive"
                            } ;
                     Ablat => table {
                                Sg => base_1+"Ã«" ;
                                Pl => base_1+"ish"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"Ã«" ;
                            Pl => base_1+"it"
                          } ;
                   Acc => table {
                            Sg => base_1+"Ã«n" ;
                            Pl => base_1+"it"
                          } ;
                   Dat => table {
                            Sg => base_1+"Ã«t" ;
                            Pl => base_1+"ive"
                          } ;
                   Ablat => table {
                              Sg => base_1+"Ã«t" ;
                              Pl => base_1+"ive"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN487 : Str -> N ;
mkN487 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ee" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ee" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jat"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN487"
  } ;

mkN488 : Str -> N ;
mkN488 base =
  case base of {
    base_1+"esore" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"esore" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"esore" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"esoreje" ;
                                  Pl => base_1+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"esoreje" ;
                                    Pl => base_1+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"esoren" ;
                                Pl => base_1+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"esores" ;
                                Pl => base_1+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"esores" ;
                                  Pl => base_1+"eve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN488"
  } ;

mkN489 : Str -> N ;
mkN489 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"a"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN490 : Str -> N ;
mkN490 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ;
                              Pl => base_1+"ive"
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ;
                                Pl => base_1+"ish"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"it"
                          } ;
                   Acc => table {
                            Sg => base_1+"n" ;
                            Pl => base_1+"it"
                          } ;
                   Dat => table {
                            Sg => base_1+"s" ;
                            Pl => base_1+"ive"
                          } ;
                   Ablat => table {
                              Sg => base_1+"s" ;
                              Pl => base_1+"ive"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN491 : Str -> N ;
mkN491 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«u" ;
                                  Pl => base_1+"jeve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«u" ;
                                    Pl => base_1+"jesh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã«u" ;
                                Pl => base_1+"jet"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«un" ;
                                Pl => base_1+"jet"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«ut" ;
                                Pl => base_1+"jeve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«ut" ;
                                  Pl => base_1+"jeve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN491"
  } ;

mkN492 : Str -> N ;
mkN492 base =
  case base of {
    base_1+"o"+base_2@(?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"o"+base_2 ;
                                  Pl => base_1+"u"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"o"+base_2 ;
                                  Pl => base_1+"u"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"o"+base_2+"i" ; --guessed
                                  Pl => base_1+"o"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"o"+base_2+"i" ; --guessed
                                    Pl => base_1+"o"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"u"+base_2+"a" ;
                                Pl => base_1+"u"+base_2+"tÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"u"+base_2+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"u"+base_2+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN492"
  } ;

mkN493 : Str -> N ;
mkN493 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"eje" ;
                              Pl => base_1+"ave"
                            } ;
                     Ablat => table {
                                Sg => base_1+"eje" ;
                                Pl => base_1+"ash"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => base_1+"atn" ;
                            Pl => base_1+"at"
                          } ;
                   Dat => table {
                            Sg => base_1+"ats" ;
                            Pl => base_1+"ave"
                          } ;
                   Ablat => table {
                              Sg => base_1+"ats" ;
                              Pl => base_1+"ave"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN494 : Str -> N ;
mkN494 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"ive"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"ish"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"it"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"it"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"ive"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"ive"
                            }
                 }
        } ;
    g = Masc
  } ;

mkN495 : Str -> N ;
mkN495 base =
  case base of {
    base_1+"ua" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ua" ;
                                  Pl => base_1+"oje"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ua" ;
                                  Pl => base_1+"oje"
                                } ;
                         Dat => table {
                                  Sg => base_1+"oi" ;
                                  Pl => base_1+"ojeve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"oi" ;
                                    Pl => base_1+"ojesh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"oi" ;
                                Pl => base_1+"ojet"
                              } ;
                       Acc => table {
                                Sg => base_1+"oin" ;
                                Pl => base_1+"ojet"
                              } ;
                       Dat => table {
                                Sg => base_1+"oit" ;
                                Pl => base_1+"ojeve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"oit" ;
                                  Pl => base_1+"ojeve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN495"
  } ;

mkN496 : Str -> N ;
mkN496 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN497 : Str -> N ;
mkN497 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => base_1+"at"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"at" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"at" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN498 : Str -> N ;
mkN498 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"Ã«s"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ;
                                    Pl => base_1+"Ã«s"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"ave" ;
                                Pl => base_1+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"ave" ;
                                Pl => base_1+"avet"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ave" ;
                                  Pl => base_1+"avet"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN498"
  } ;

mkN499 : Str -> N ;
mkN499 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"je"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"je"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ei" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ei" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => base_1+"jat"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"jat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"jat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN499"
  } ;

mkN500 : Str -> N ;
mkN500 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e" ;
                                    Pl => base_1+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => base_1+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«s" ;
                                Pl => base_1+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«s" ;
                                  Pl => base_1+"eve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN500"
  } ;

mkN501 : Str -> N ;
mkN501 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ee" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ee" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"etÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN501"
  } ;

mkN502 : Str -> N ;
mkN502 base =
  case base of {
    base_1+"e"+base_2@(?+?+?+?+?)+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2+"Ã«" ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2+"Ã«" ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"Ã«e" ; --guessed
                                  Pl => base_1+"e"+base_2+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"Ã«e" ; --guessed
                                    Pl => base_1+"e"+base_2+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"a" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN502"
  } ;

mkN503 : Str -> N ;
mkN503 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"a"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN503"
  } ;

mkN504 : Str -> N ;
mkN504 base =
  case base of {
    base_1+"ek" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ek" ;
                                  Pl => base_1+"Ã©qe"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ek" ;
                                  Pl => base_1+"Ã©qe"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eki" ; --guessed
                                  Pl => base_1+"ekve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eki" ; --guessed
                                    Pl => base_1+"eksh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©ku" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã©kut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã©kut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN504"
  } ;

mkN505 : Str -> N ;
mkN505 base =
  case base of {
    base_1+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2 ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2 ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"i" ; --guessed
                                  Pl => base_1+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"i" ; --guessed
                                    Pl => base_1+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ì"+base_2+"u" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ì"+base_2+"ut" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ì"+base_2+"ut" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN505"
  } ;

mkN506 : Str -> N ;
mkN506 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ei" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ei" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ia" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"iat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"iat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN506"
  } ;

mkN507 : Str -> N ;
mkN507 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"njÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"njÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ri" ;
                            Pl => nonExist
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"rit" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"rit" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN508 : Str -> N ;
mkN508 base =
  case base of {
    base_1+"Ã«"+base_2@(?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"e"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"e"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã«"+base_2+"a" ;
                                Pl => base_1+"Ã«"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«"+base_2+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«"+base_2+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN508"
  } ;

mkN509 : Str -> N ;
mkN509 base =
  case base of {
    base_1+"a"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"e"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"u" ;
                                  Pl => base_1+"e"+base_2+"ve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"u" ;
                                    Pl => base_1+"e"+base_2+"sh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a"+base_2+"u" ;
                                Pl => base_1+"e"+base_2+"tÃ«"
                              } ;
                       Acc => table {
                                Sg => base_1+"a"+base_2+"un" ;
                                Pl => base_1+"e"+base_2+"tÃ«"
                              } ;
                       Dat => table {
                                Sg => base_1+"a"+base_2+"ut" ;
                                Pl => base_1+"e"+base_2+"ve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"a"+base_2+"ut" ;
                                  Pl => base_1+"e"+base_2+"ve"
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN509"
  } ;

mkN510 : Str -> N ;
mkN510 base =
  case base of {
    base_1+"Ã«"+base_2@(?+?)+"Ã«"+base_3@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2+"Ã«"+base_3 ;
                                  Pl => base_1+"e"+base_2+base_3+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2+"Ã«"+base_3 ;
                                  Pl => base_1+"e"+base_2+base_3+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"Ã«"+base_3+"e" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"Ã«"+base_3+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"Ã«"+base_3+"e" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"Ã«"+base_3+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"e"+base_2+base_3+"a" ;
                                Pl => base_1+"e"+base_2+base_3+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN510"
  } ;

mkN511 : Str -> N ;
mkN511 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"a"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN512 : Str -> N ;
mkN512 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"a"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"a"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN513 : Str -> N ;
mkN513 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«ï¼arnautllarÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«ï¼arnautllarÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => nonExist
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN514 : Str -> N ;
mkN514 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"et" --guessed
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"et" --guessed
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"a" ;
                            Pl => nonExist
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"at" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"at" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN515 : Str -> N ;
mkN515 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ee" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ee" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN515"
  } ;

mkN516 : Str -> N ;
mkN516 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ; --guessed
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN516"
  } ;

mkN517 : Str -> N ;
mkN517 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ;
                              Pl => base_1+"Ã«ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => base_1+"in" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ;
                            Pl => base_1+"Ã«ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ;
                              Pl => base_1+"Ã«ve"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN518 : Str -> N ;
mkN518 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"et"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"et"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"itt" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"itt" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN519 : Str -> N ;
mkN519 base =
  case base of {
    base_1+"e"+base_2@(?+?+?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => base_1+"Ã©"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2 ;
                                  Pl => base_1+"Ã©"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"i" ; --guessed
                                  Pl => base_1+"e"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"i" ; --guessed
                                    Pl => base_1+"e"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©"+base_2+"ja" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã©"+base_2+"jat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã©"+base_2+"jat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN519"
  } ;

mkN520 : Str -> N ;
mkN520 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => nonExist
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => nonExist
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"it" ;
                            Pl => nonExist
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"itt" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"itt" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN521 : Str -> N ;
mkN521 base =
  case base of {
    base_1+base_2@(?+?)+"f"+base_3@(?+?+?+?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+base_2+"f"+base_3 ;
                                  Pl => base_1+"f"+base_2+base_3+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+base_2+"f"+base_3 ;
                                  Pl => base_1+"f"+base_2+base_3+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"f"+base_3+"i" ; --guessed
                                  Pl => base_1+base_2+"f"+base_3+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"f"+base_3+"i" ; --guessed
                                    Pl => base_1+base_2+"f"+base_3+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"f"+base_3+"i" ;
                                Pl => base_1+base_2+"f"+base_3+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+base_2+"f"+base_3+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+base_2+"f"+base_3+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN521"
  } ;

mkN522 : Str -> N ;
mkN522 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«rï¼stÃ«rgjysha"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«rï¼stÃ«rgjysha"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => nonExist
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"it" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"it" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN523 : Str -> N ;
mkN523 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN523"
  } ;

mkN524 : Str -> N ;
mkN524 base =
  case base of {
    base_1+"Ã®" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã®" ;
                                  Pl => base_1+"Ã®jÃ«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã®" ;
                                  Pl => base_1+"Ã®jÃ«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã®i" ; --guessed
                                  Pl => base_1+"Ã®ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã®i" ; --guessed
                                    Pl => base_1+"Ã®sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ini" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"init" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"init" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN524"
  } ;

mkN525 : Str -> N ;
mkN525 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«r"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"Ã«r"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => base_1+"Ã«rat"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN525"
  } ;

mkN526 : Str -> N ;
mkN526 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«rï¼katragjysha"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"Ã«rï¼katragjysha"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"i" ;
                            Pl => base_1+"Ã«ritï¼katragjyshat"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN527 : Str -> N ;
mkN527 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"u"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"u"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"je" ;
                            Pl => base_1+"jet"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"jet" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"jet" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN528 : Str -> N ;
mkN528 base =
  case base of {
    base_1+"a"+base_2@(?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2+"enj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2+"enj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"a"+base_2+"i" ; --guessed
                                  Pl => base_1+"a"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"a"+base_2+"i" ; --guessed
                                    Pl => base_1+"a"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist+"t" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist+"t" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN528"
  } ;

mkN529 : Str -> N ;
mkN529 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => nonExist
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => nonExist
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"Ã«" ;
                            Pl => nonExist
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"Ã«t" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"Ã«t" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN530 : Str -> N ;
mkN530 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«e" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«e" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"je" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN530"
  } ;

mkN531 : Str -> N ;
mkN531 base =
  case base of {
    base_1+"ue" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ue" ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"ue" ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"uei" ; --guessed
                                  Pl => base_1+"ueve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"uei" ; --guessed
                                    Pl => base_1+"uesh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"oi" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"oit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"oit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN531"
  } ;

mkN532 : Str -> N ;
mkN532 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ei" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ei" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ja" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"jat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"jat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN532"
  } ;

mkN533 : Str -> N ;
mkN533 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => nonExist
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => nonExist
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ni" ;
                            Pl => nonExist
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"nit" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"nit" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN534 : Str -> N ;
mkN534 base =
  case base of {
    base_1+"Ã¢"+base_2@(?+?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã¢"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã¢"+base_2 ;
                                  Pl => base_1+"Ã«"+base_2
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã¢"+base_2+"e" ; --guessed
                                  Pl => base_1+"Ã¢"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã¢"+base_2+"e" ; --guessed
                                    Pl => base_1+"Ã¢"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN534"
  } ;

mkN535 : Str -> N ;
mkN535 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1
                            } ;
                     Dat => table {
                              Sg => base_1+"je" ;
                              Pl => base_1+"ve"
                            } ;
                     Ablat => table {
                                Sg => base_1+"je" ;
                                Pl => base_1+"sh"
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"t"
                          } ;
                   Acc => table {
                            Sg => base_1+"en" ;
                            Pl => base_1+"t"
                          } ;
                   Dat => table {
                            Sg => base_1+"es" ;
                            Pl => base_1+"ve"
                          } ;
                   Ablat => table {
                              Sg => base_1+"es" ;
                              Pl => base_1+"ve"
                            }
                 }
        } ;
    g = Fem
  } ;

mkN536 : Str -> N ;
mkN536 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"jit"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN537 : Str -> N ;
mkN537 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => base_1+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN537"
  } ;

mkN538 : Str -> N ;
mkN538 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist+"t" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist+"t" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN538"
  } ;

mkN539 : Str -> N ;
mkN539 base =
  case base of {
    base_1+"ua" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ua" ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"ua" ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"uai" ; --guessed
                                  Pl => base_1+"uave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"uai" ; --guessed
                                    Pl => base_1+"uash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"oi" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"oit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"oit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN539"
  } ;

mkN540 : Str -> N ;
mkN540 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"j"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"u" ;
                            Pl => base_1+"j"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"ut" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"ut" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN541 : Str -> N ;
mkN541 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => base_1+"Ã«t"
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"jat" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"jat" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN542 : Str -> N ;
mkN542 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+base_2+"eje" ;
                                  Pl => base_1+base_2+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+base_2+"eje" ;
                                    Pl => base_1+base_2+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+base_2+"a" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«"+base_2+"n" ;
                                Pl => base_1+base_2+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«"+base_2+"s" ;
                                Pl => base_1+base_2+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«"+base_2+"s" ;
                                  Pl => base_1+base_2+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN542"
  } ;

mkN543 : Str -> N ;
mkN543 base =
  case base of {
    base_1+"u"+base_2@(?+?+?+?+?+?+?) => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"u"+base_2 ;
                                  Pl => base_1+"o"+base_2+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"u"+base_2 ;
                                  Pl => base_1+"o"+base_2+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"o"+base_2+"eje" ;
                                  Pl => base_1+"o"+base_2+"ave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"o"+base_2+"eje" ;
                                    Pl => base_1+"o"+base_2+"ash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"o"+base_2+"a" ;
                                Pl => base_1+"o"+base_2+"at"
                              } ;
                       Acc => table {
                                Sg => base_1+"u"+base_2+"n" ;
                                Pl => base_1+"o"+base_2+"at"
                              } ;
                       Dat => table {
                                Sg => base_1+"u"+base_2+"s" ;
                                Pl => base_1+"o"+base_2+"ave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"u"+base_2+"s" ;
                                  Pl => base_1+"o"+base_2+"ave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN543"
  } ;

mkN544 : Str -> N ;
mkN544 base =
  case base of {
    base_1+"i" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"i" ;
                                  Pl => base_1+"iu"
                                } ;
                         Acc => table {
                                  Sg => base_1+"i" ;
                                  Pl => base_1+"iu"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ii" ; --guessed
                                  Pl => base_1+"ive" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ii" ; --guessed
                                    Pl => base_1+"ish" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"eza" ;
                                Pl => base_1+"itÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"ezat" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ezat" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN544"
  } ;

mkN545 : Str -> N ;
mkN545 base =
  case base of {
    base_1+"Ã«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«" ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«i" ; --guessed
                                  Pl => base_1+"Ã«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«i" ; --guessed
                                    Pl => base_1+"Ã«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"a" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => base_1+"Ã«n" ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"at" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"at" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN545"
  } ;

mkN546 : Str -> N ;
mkN546 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"ja"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"ja"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"jave"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"jash"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"e" ;
                                Pl => base_1+"jat"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => base_1+"jat"
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ;
                                Pl => base_1+"jave"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ;
                                  Pl => base_1+"jave"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN546"
  } ;

mkN547 : Str -> N ;
mkN547 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"i"
                            } ;
                     Dat => table {
                              Sg => base_1+"i" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"i" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => nonExist
                          } ;
                   Acc => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => base_1+"jat" ; --guessed
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => base_1+"jat" ; --guessed
                              Pl => nonExist
                            }
                 }
        } ;
    g = Masc
  } ;

mkN548 : Str -> N ;
mkN548 base =
  case base of {
    base_1+"a" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"enj"
                                } ;
                         Acc => table {
                                  Sg => base_1+"a" ;
                                  Pl => base_1+"enj"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ai" ; --guessed
                                  Pl => base_1+"ave" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ai" ; --guessed
                                    Pl => base_1+"ash" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ai" ;
                                Pl => base_1+"enjtÃ«"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"ait" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"ait" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN548"
  } ;

mkN549 : Str -> N ;
mkN549 base_1 =
  lin N
  { s = table {
          Indef => table {
                     Nom => table {
                              Sg => base_1 ;
                              Pl => base_1+"tÃ«"
                            } ;
                     Acc => table {
                              Sg => base_1 ;
                              Pl => base_1+"tÃ«"
                            } ;
                     Dat => table {
                              Sg => base_1+"e" ; --guessed
                              Pl => base_1+"ve" --guessed
                            } ;
                     Ablat => table {
                                Sg => base_1+"e" ; --guessed
                                Pl => base_1+"sh" --guessed
                              }
                   } ;
          Def => table {
                   Nom => table {
                            Sg => base_1+"ja" ;
                            Pl => nonExist
                          } ;
                   Acc => table {
                            Sg => base_1+"nÃ«" ;
                            Pl => nonExist
                          } ;
                   Dat => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          } ;
                   Ablat => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                 }
        } ;
    g = Fem
  } ;

mkN550 : Str -> N ;
mkN550 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => nonExist
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => nonExist
                                } ;
                         Dat => table {
                                  Sg => base_1+"ee" ; --guessed
                                  Pl => base_1+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ee" ; --guessed
                                    Pl => base_1+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©ja" ;
                                Pl => nonExist
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN550"
  } ;

mkN551 : Str -> N ;
mkN551 base =
  case base of {
    base_1+"y"+base_2@?+"Ã«"+base_3@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"y"+base_2+"Ã«"+base_3 ;
                                  Pl => base_1+"Ã½"+base_2+base_3+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"y"+base_2+"Ã«"+base_3 ;
                                  Pl => base_1+"Ã½"+base_2+base_3+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"y"+base_2+"Ã«"+base_3+"e" ; --guessed
                                  Pl => base_1+"y"+base_2+"Ã«"+base_3+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"y"+base_2+"Ã«"+base_3+"e" ; --guessed
                                    Pl => base_1+"y"+base_2+"Ã«"+base_3+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã½"+base_2+base_3+"a" ;
                                Pl => base_1+"Ã½"+base_2+base_3+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN551"
  } ;

mkN552 : Str -> N ;
mkN552 base =
  case base of {
    base_1+"ollÃ«" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"ollÃ«" ;
                                  Pl => base_1+"oje"
                                } ;
                         Acc => table {
                                  Sg => base_1+"ollÃ«" ;
                                  Pl => base_1+"oje"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ollÃ«i" ; --guessed
                                  Pl => base_1+"ollÃ«ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ollÃ«i" ; --guessed
                                    Pl => base_1+"ollÃ«sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ualli" ;
                                Pl => base_1+"ojet"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"uallit" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"uallit" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN552"
  } ;

mkN553 : Str -> N ;
mkN553 base =
  case base of {
    base_1+"e"+base_2@?+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2+"e" ;
                                  Pl => base_1+"Ã©"+base_2+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2+"e" ;
                                  Pl => base_1+"Ã©"+base_2+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"ee" ; --guessed
                                  Pl => base_1+"e"+base_2+"eve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"ee" ; --guessed
                                    Pl => base_1+"e"+base_2+"esh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©"+base_2+"ja" ;
                                Pl => base_1+"Ã©"+base_2+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN553"
  } ;

mkN554 : Str -> N ;
mkN554 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã©"+base_2+"et"
                                } ;
                         Acc => table {
                                  Sg => base_1+"Ã«"+base_2 ;
                                  Pl => base_1+"Ã©"+base_2+"et"
                                } ;
                         Dat => table {
                                  Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                  Pl => base_1+"Ã«"+base_2+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"Ã«"+base_2+"i" ; --guessed
                                    Pl => base_1+"Ã«"+base_2+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã«"+base_2+"i" ;
                                Pl => base_1+"Ã©"+base_2+"et"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"Ã«"+base_2+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"Ã«"+base_2+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN554"
  } ;

mkN555 : Str -> N ;
mkN555 base =
  case base of {
    base_1+"e"+base_2@?+"Ã«"+base_3@? => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e"+base_2+"Ã«"+base_3 ;
                                  Pl => base_1+"Ã©"+base_2+base_3+"a"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e"+base_2+"Ã«"+base_3 ;
                                  Pl => base_1+"Ã©"+base_2+base_3+"a"
                                } ;
                         Dat => table {
                                  Sg => base_1+"e"+base_2+"Ã«"+base_3+"e" ; --guessed
                                  Pl => base_1+"e"+base_2+"Ã«"+base_3+"ve" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"e"+base_2+"Ã«"+base_3+"e" ; --guessed
                                    Pl => base_1+"e"+base_2+"Ã«"+base_3+"sh" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"Ã©"+base_2+base_3+"a" ;
                                Pl => base_1+"Ã©"+base_2+base_3+"at"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN555"
  } ;

mkN556 : Str -> N ;
mkN556 base =
  case base of {
    base_1+"i" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"i" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Acc => table {
                                  Sg => base_1+"i" ;
                                  Pl => base_1+"Ã«"
                                } ;
                         Dat => table {
                                  Sg => base_1+"ii" ; --guessed
                                  Pl => base_1+"ive" --guessed
                                } ;
                         Ablat => table {
                                    Sg => base_1+"ii" ; --guessed
                                    Pl => base_1+"ish" --guessed
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"i" ;
                                Pl => base_1+"Ã«t"
                              } ;
                       Acc => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              } ;
                       Dat => table {
                                Sg => base_1+"it" ; --guessed
                                Pl => nonExist
                              } ;
                       Ablat => table {
                                  Sg => base_1+"it" ; --guessed
                                  Pl => nonExist
                                }
                     }
            } ;
        g = Masc
      };
    _ => error "Can't apply paradigm mkN556"
  } ;

mkN557 : Str -> N ;
mkN557 base =
  case base of {
    base_1+"e" => lin N
      { s = table {
              Indef => table {
                         Nom => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Acc => table {
                                  Sg => base_1+"e" ;
                                  Pl => base_1+"e"
                                } ;
                         Dat => table {
                                  Sg => base_1+"eje" ;
                                  Pl => base_1+"eve"
                                } ;
                         Ablat => table {
                                    Sg => base_1+"eje" ;
                                    Pl => base_1+"esh"
                                  }
                       } ;
              Def => table {
                       Nom => table {
                                Sg => base_1+"ia" ;
                                Pl => base_1+"et"
                              } ;
                       Acc => table {
                                Sg => base_1+"en" ;
                                Pl => base_1+"et"
                              } ;
                       Dat => table {
                                Sg => base_1+"es" ;
                                Pl => base_1+"eve"
                              } ;
                       Ablat => table {
                                  Sg => base_1+"es" ;
                                  Pl => base_1+"eve"
                                }
                     }
            } ;
        g = Fem
      };
    _ => error "Can't apply paradigm mkN557"
  } ;

mkA001 : Str -> A ;
mkA001 base_1 =
  lin A
  { s = table {
          Nom => table {
                   Masc => table {
                             Sg => base_1 ;
                             Pl => base_1+"Ã«" --guessed
                           } ;
                   Fem => table {
                            Sg => base_1+"e" ;
                            Pl => base_1+"e" --guessed
                          }
                 } ;
          Acc => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Dat => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Ablat => table {
                     Masc => table {
                               Sg => nonExist ;
                               Pl => nonExist
                             } ;
                     Fem => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                   }
        }
  } ;

mkA002 : Str -> A ;
mkA002 base_1 =
  lin A
  { s = table {
          Nom => table {
                   Masc => table {
                             Sg => base_1 ;
                             Pl => base_1+"Ã«"
                           } ;
                   Fem => table {
                            Sg => base_1+"e" ;
                            Pl => base_1+"e"
                          }
                 } ;
          Acc => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Dat => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Ablat => table {
                     Masc => table {
                               Sg => nonExist ;
                               Pl => nonExist
                             } ;
                     Fem => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                   }
        }
  } ;

mkA003 : Str -> A ;
mkA003 base_1 =
  lin A
  { s = table {
          Nom => table {
                   Masc => table {
                             Sg => base_1 ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => base_1+"Ã«" ;
                            Pl => nonExist
                          }
                 } ;
          Acc => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Dat => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Ablat => table {
                     Masc => table {
                               Sg => nonExist ;
                               Pl => nonExist
                             } ;
                     Fem => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                   }
        }
  } ;

mkA004 : Str -> A ;
mkA004 base =
  case base of {
    base_1+"ak" => lin A
      { s = table {
              Nom => table {
                       Masc => table {
                                 Sg => base_1+"ak" ;
                                 Pl => base_1+"eq"
                               } ;
                       Fem => table {
                                Sg => base_1+"akÃ«" ;
                                Pl => nonExist
                              }
                     } ;
              Acc => table {
                       Masc => table {
                                 Sg => nonExist ;
                                 Pl => nonExist
                               } ;
                       Fem => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              }
                     } ;
              Dat => table {
                       Masc => table {
                                 Sg => nonExist ;
                                 Pl => nonExist
                               } ;
                       Fem => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              }
                     } ;
              Ablat => table {
                         Masc => table {
                                   Sg => nonExist ;
                                   Pl => nonExist
                                 } ;
                         Fem => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                       }
            }
      };
    _ => error "Can't apply paradigm mkA004"
  } ;

mkA005 : Str -> A ;
mkA005 base_1 =
  lin A
  { s = table {
          Nom => table {
                   Masc => table {
                             Sg => base_1 ;
                             Pl => base_1+"e"
                           } ;
                   Fem => table {
                            Sg => base_1+"e" ;
                            Pl => base_1+"e"
                          }
                 } ;
          Acc => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Dat => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Ablat => table {
                     Masc => table {
                               Sg => nonExist ;
                               Pl => nonExist
                             } ;
                     Fem => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                   }
        }
  } ;

mkA006 : Str -> A ;
mkA006 base =
  case base of {
    base_1+"e"+base_2@? => lin A
      { s = table {
              Nom => table {
                       Masc => table {
                                 Sg => base_1+"e"+base_2 ;
                                 Pl => base_1+"Ã«"+base_2+"inj"
                               } ;
                       Fem => table {
                                Sg => base_1+"e"+base_2+"e" ;
                                Pl => base_1+"e"+base_2+"e"
                              }
                     } ;
              Acc => table {
                       Masc => table {
                                 Sg => nonExist ;
                                 Pl => nonExist
                               } ;
                       Fem => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              }
                     } ;
              Dat => table {
                       Masc => table {
                                 Sg => nonExist ;
                                 Pl => nonExist
                               } ;
                       Fem => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              }
                     } ;
              Ablat => table {
                         Masc => table {
                                   Sg => nonExist ;
                                   Pl => nonExist
                                 } ;
                         Fem => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                       }
            }
      };
    _ => error "Can't apply paradigm mkA006"
  } ;

mkA007 : Str -> A ;
mkA007 base_1 =
  lin A
  { s = table {
          Nom => table {
                   Masc => table {
                             Sg => base_1 ;
                             Pl => base_1 --guessed
                           } ;
                   Fem => table {
                            Sg => base_1+"e" ; --guessed
                            Pl => base_1+"e" --guessed
                          }
                 } ;
          Acc => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Dat => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Ablat => table {
                     Masc => table {
                               Sg => nonExist ;
                               Pl => nonExist
                             } ;
                     Fem => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                   }
        }
  } ;

mkA008 : Str -> A ;
mkA008 base =
  case base of {
    base_1+"a"+base_2@(?+?) => lin A
      { s = table {
              Nom => table {
                       Masc => table {
                                 Sg => base_1+"a"+base_2 ;
                                 Pl => base_1+"Ã«"+base_2+"enj"
                               } ;
                       Fem => table {
                                Sg => base_1+"a"+base_2+"e" ;
                                Pl => base_1+"Ã«"+base_2+"a"
                              }
                     } ;
              Acc => table {
                       Masc => table {
                                 Sg => nonExist ;
                                 Pl => nonExist
                               } ;
                       Fem => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              }
                     } ;
              Dat => table {
                       Masc => table {
                                 Sg => nonExist ;
                                 Pl => nonExist
                               } ;
                       Fem => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              }
                     } ;
              Ablat => table {
                         Masc => table {
                                   Sg => nonExist ;
                                   Pl => nonExist
                                 } ;
                         Fem => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                       }
            }
      };
    _ => error "Can't apply paradigm mkA008"
  } ;

mkA009 : Str -> A ;
mkA009 base =
  case base of {
    "j"+base_1 => lin A
      { s = table {
              Nom => table {
                       Masc => table {
                                 Sg => "j"+base_1 ;
                                 Pl => "t"+base_1
                               } ;
                       Fem => table {
                                Sg => "j"+base_1 ;
                                Pl => "t"+base_1+"a"
                              }
                     } ;
              Acc => table {
                       Masc => table {
                                 Sg => "t"+base_1 ;
                                 Pl => "t"+base_1
                               } ;
                       Fem => table {
                                Sg => "t"+base_1 ;
                                Pl => "t"+base_1+"a"
                              }
                     } ;
              Dat => table {
                       Masc => table {
                                 Sg => "t"+base_1 ;
                                 Pl => "t"+base_1
                               } ;
                       Fem => table {
                                Sg => "s"+base_1 ;
                                Pl => "t"+base_1+"a"
                              }
                     } ;
              Ablat => table {
                         Masc => table {
                                   Sg => "t"+base_1 ;
                                   Pl => "t"+base_1
                                 } ;
                         Fem => table {
                                  Sg => "s"+base_1 ;
                                  Pl => "t"+base_1+"a"
                                }
                       }
            }
      };
    _ => error "Can't apply paradigm mkA009"
  } ;

mkA010 : Str -> A ;
mkA010 base =
  case base of {
    "y"+base_1+"Ã«" => lin A
      { s = table {
              Nom => table {
                       Masc => table {
                                 Sg => "y"+base_1+"Ã«" ;
                                 Pl => "ta"+base_1+"Ã«"
                               } ;
                       Fem => table {
                                Sg => "jo"+base_1+"Ã«" ;
                                Pl => "to"+base_1+"a"
                              }
                     } ;
              Acc => table {
                       Masc => table {
                                 Sg => "to"+base_1+"Ã«" ;
                                 Pl => "ta"+base_1+"Ã«"
                               } ;
                       Fem => table {
                                Sg => "to"+base_1+"Ã«" ;
                                Pl => "to"+base_1+"a"
                              }
                     } ;
              Dat => table {
                       Masc => table {
                                 Sg => "to"+base_1+"Ã«" ;
                                 Pl => "ta"+base_1+"Ã«"
                               } ;
                       Fem => table {
                                Sg => "so"+base_1+"Ã«" ;
                                Pl => "to"+base_1+"a"
                              }
                     } ;
              Ablat => table {
                         Masc => table {
                                   Sg => "to"+base_1+"Ã«" ;
                                   Pl => "ta"+base_1+"Ã«"
                                 } ;
                         Fem => table {
                                  Sg => "so"+base_1+"Ã«" ;
                                  Pl => "to"+base_1+"a"
                                }
                       }
            }
      };
    _ => error "Can't apply paradigm mkA010"
  } ;

mkA011 : Str -> A ;
mkA011 base =
  case base of {
    base_1+"Ã«" => lin A
      { s = table {
              Nom => table {
                       Masc => table {
                                 Sg => base_1+"Ã«" ;
                                 Pl => nonExist
                               } ;
                       Fem => table {
                                Sg => base_1+"a" ;
                                Pl => nonExist
                              }
                     } ;
              Acc => table {
                       Masc => table {
                                 Sg => nonExist ;
                                 Pl => nonExist
                               } ;
                       Fem => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              }
                     } ;
              Dat => table {
                       Masc => table {
                                 Sg => nonExist ;
                                 Pl => nonExist
                               } ;
                       Fem => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              }
                     } ;
              Ablat => table {
                         Masc => table {
                                   Sg => nonExist ;
                                   Pl => nonExist
                                 } ;
                         Fem => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                       }
            }
      };
    _ => error "Can't apply paradigm mkA011"
  } ;

mkA012 : Str -> A ;
mkA012 base_1 =
  lin A
  { s = table {
          Nom => table {
                   Masc => table {
                             Sg => base_1 ;
                             Pl => base_1
                           } ;
                   Fem => table {
                            Sg => base_1+"e" ;
                            Pl => base_1+"e"
                          }
                 } ;
          Acc => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Dat => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Ablat => table {
                     Masc => table {
                               Sg => nonExist ;
                               Pl => nonExist
                             } ;
                     Fem => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                   }
        }
  } ;

mkA013 : Str -> A ;
mkA013 base_1 =
  lin A
  { s = table {
          Nom => table {
                   Masc => table {
                             Sg => base_1 ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => base_1+"Îµ" ;
                            Pl => nonExist
                          }
                 } ;
          Acc => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Dat => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Ablat => table {
                     Masc => table {
                               Sg => nonExist ;
                               Pl => nonExist
                             } ;
                     Fem => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                   }
        }
  } ;

mkA014 : Str -> A ;
mkA014 base_1 =
  lin A
  { s = table {
          Nom => table {
                   Masc => table {
                             Sg => base_1 ;
                             Pl => base_1
                           } ;
                   Fem => table {
                            Sg => base_1+"e" ;
                            Pl => base_1
                          }
                 } ;
          Acc => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Dat => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Ablat => table {
                     Masc => table {
                               Sg => nonExist ;
                               Pl => nonExist
                             } ;
                     Fem => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                   }
        }
  } ;

mkA015 : Str -> A ;
mkA015 base =
  case base of {
    base_1+"u"+base_2@?+"r" => lin A
      { s = table {
              Nom => table {
                       Masc => table {
                                 Sg => base_1+"u"+base_2+"r" ;
                                 Pl => nonExist
                               } ;
                       Fem => table {
                                Sg => base_1+"or"+base_2 ;
                                Pl => nonExist
                              }
                     } ;
              Acc => table {
                       Masc => table {
                                 Sg => nonExist ;
                                 Pl => nonExist
                               } ;
                       Fem => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              }
                     } ;
              Dat => table {
                       Masc => table {
                                 Sg => nonExist ;
                                 Pl => nonExist
                               } ;
                       Fem => table {
                                Sg => nonExist ;
                                Pl => nonExist
                              }
                     } ;
              Ablat => table {
                         Masc => table {
                                   Sg => nonExist ;
                                   Pl => nonExist
                                 } ;
                         Fem => table {
                                  Sg => nonExist ;
                                  Pl => nonExist
                                }
                       }
            }
      };
    _ => error "Can't apply paradigm mkA015"
  } ;

mkA016 : Str -> A ;
mkA016 base_1 =
  lin A
  { s = table {
          Nom => table {
                   Masc => table {
                             Sg => base_1 ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => base_1 ;
                            Pl => nonExist
                          }
                 } ;
          Acc => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Dat => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Ablat => table {
                     Masc => table {
                               Sg => nonExist ;
                               Pl => nonExist
                             } ;
                     Fem => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                   }
        }
  } ;

mkA017 : Str -> A ;
mkA017 base_1 =
  lin A
  { s = table {
          Nom => table {
                   Masc => table {
                             Sg => base_1 ;
                             Pl => base_1
                           } ;
                   Fem => table {
                            Sg => base_1+"e" ;
                            Pl => nonExist
                          }
                 } ;
          Acc => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Dat => table {
                   Masc => table {
                             Sg => nonExist ;
                             Pl => nonExist
                           } ;
                   Fem => table {
                            Sg => nonExist ;
                            Pl => nonExist
                          }
                 } ;
          Ablat => table {
                     Masc => table {
                               Sg => nonExist ;
                               Pl => nonExist
                             } ;
                     Fem => table {
                              Sg => nonExist ;
                              Pl => nonExist
                            }
                   }
        }
  } ;

mkV001 : Str -> V ;
mkV001 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"a" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"ur" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV002 : Str -> V ;
mkV002 base =
  case base of {
    base_1+"ta" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"ta" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"sur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV002"
  } ;

mkV003 : Str -> V ;
mkV003 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV003"
  } ;

mkV004 : Str -> V ;
mkV004 base =
  case base of {
    base_1+"s" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"s" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"tur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV004"
  } ;

mkV005 : Str -> V ;
mkV005 base =
  case base of {
    base_1+base_2@?+"l" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+base_2+"l" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ol"+base_2 ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+base_2+"lÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV005"
  } ;

mkV006 : Str -> V ;
mkV006 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"a" ; --guessed
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"Ã«" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV007 : Str -> V ;
mkV007 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"ta" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"tur" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV008 : Str -> V ;
mkV008 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"u" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"rÃ«" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV009 : Str -> V ;
mkV009 base =
  case base of {
    base_1+"n" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"n" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"u" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"nÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV009"
  } ;

mkV010 : Str -> V ;
mkV010 base =
  case base of {
    base_1+"i"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"i"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"y"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"y"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV010"
  } ;

mkV011 : Str -> V ;
mkV011 base =
  case base of {
    base_1+"e" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"e" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ashÃ«" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"Ã«nÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV011"
  } ;

mkV012 : Str -> V ;
mkV012 base =
  case base of {
    "t"+base_1 => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => "t"+base_1 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => "d"+base_1+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = "d"+base_1+"Ã«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV012"
  } ;

mkV013 : Str -> V ;
mkV013 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"a" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"Ã«" ; --guessed
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV014 : Str -> V ;
mkV014 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"a" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"Ã«" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV015 : Str -> V ;
mkV015 base =
  case base of {
    base_1+"s" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"s" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"tÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV015"
  } ;

mkV016 : Str -> V ;
mkV016 base =
  case base of {
    base_1+"o"+base_2@?+"a" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"o"+base_2+"a" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"a"+base_2+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV016"
  } ;

mkV017 : Str -> V ;
mkV017 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => "(pÃ«r)"+base_1+"a" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = "(pÃ«r)"+base_1+"ur" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV018 : Str -> V ;
mkV018 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1 ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"ur" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV019 : Str -> V ;
mkV019 base =
  case base of {
    base_1+"e"+base_2@?+"r" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"e"+base_2+"r" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"a"+base_2+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV019"
  } ;

mkV020 : Str -> V ;
mkV020 base =
  case base of {
    base_1+"e"+base_2@?+"e" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"e"+base_2+"e" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"aj"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"aj"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV020"
  } ;

mkV021 : Str -> V ;
mkV021 base =
  case base of {
    base_1+"ie"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"ie"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"ie"+base_2+"Ã«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV021"
  } ;

mkV022 : Str -> V ;
mkV022 base =
  case base of {
    base_1+"es" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"es" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ita" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"itur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV022"
  } ;

mkV023 : Str -> V ;
mkV023 base =
  case base of {
    base_1+"as" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"as" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ita" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"itur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV023"
  } ;

mkV024 : Str -> V ;
mkV024 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"tur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV024"
  } ;

mkV025 : Str -> V ;
mkV025 base =
  case base of {
    base_1+"y"+base_2@?+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"y"+base_2+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+base_2+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"y"+base_2+"r" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV025"
  } ;

mkV026 : Str -> V ;
mkV026 base =
  case base of {
    base_1+"e"+base_2@(?+?) => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"e"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"e"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV026"
  } ;

mkV027 : Str -> V ;
mkV027 base =
  case base of {
    base_1+"on" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"on" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ova" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"uar" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV027"
  } ;

mkV028 : Str -> V ;
mkV028 base =
  case base of {
    base_1+"oj" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"oj" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ova" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"uar" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV028"
  } ;

mkV029 : Str -> V ;
mkV029 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"a" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"tur" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV030 : Str -> V ;
mkV030 base =
  case base of {
    base_1+"i" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"i" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"eva" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"inÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV030"
  } ;

mkV031 : Str -> V ;
mkV031 base =
  case base of {
    base_1+"i"+base_2@(?+?)+"em" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"i"+base_2+"em" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"e"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV031"
  } ;

mkV032 : Str -> V ;
mkV032 base =
  case base of {
    base_1+"u"+base_2@?+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"u"+base_2+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ov"+base_2 ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"u"+base_2+"r" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV032"
  } ;

mkV033 : Str -> V ;
mkV033 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"ta" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"tÃ«" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV034 : Str -> V ;
mkV034 base =
  case base of {
    base_1+"s" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"s" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV034"
  } ;

mkV035 : Str -> V ;
mkV035 base =
  case base of {
    base_1+"ie" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"ie" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ura" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"urÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV035"
  } ;

mkV036 : Str -> V ;
mkV036 base =
  case base of {
    base_1+"je"+base_2@("p"|"rdh"|(?+?)) => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"je"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"je"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV036"
  } ;

mkV037 : Str -> V ;
mkV037 base =
  case base of {
    base_1+"sem" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"sem" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"tur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV037"
  } ;

mkV038 : Str -> V ;
mkV038 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"nÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV038"
  } ;

mkV039 : Str -> V ;
mkV039 base =
  case base of {
    base_1+"i"+base_2@(?+?)+"em" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"i"+base_2+"em" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"e"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"e"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV039"
  } ;

mkV040 : Str -> V ;
mkV040 base =
  case base of {
    base_1+"hem" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"hem" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV040"
  } ;

mkV041 : Str -> V ;
mkV041 base =
  case base of {
    base_1+"em" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"em" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV041"
  } ;

mkV042 : Str -> V ;
mkV042 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ra" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV042"
  } ;

mkV043 : Str -> V ;
mkV043 base =
  case base of {
    base_1+"l"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"l"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"j"+base_2+"ta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"j"+base_2+"tur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV043"
  } ;

mkV044 : Str -> V ;
mkV044 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"r" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV044"
  } ;

mkV045 : Str -> V ;
mkV045 base =
  case base of {
    base_1+"jek" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"jek" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"uqa" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"uqur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV045"
  } ;

mkV046 : Str -> V ;
mkV046 base =
  case base of {
    base_1+"i"+base_2@?+"em" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"i"+base_2+"em" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"o"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV046"
  } ;

mkV047 : Str -> V ;
mkV047 base =
  case base of {
    base_1+base_2@?+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+base_2+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+base_2+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"y"+base_2+"r" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV047"
  } ;

mkV048 : Str -> V ;
mkV048 base =
  case base of {
    base_1+"Ã«"+base_2@(?+?)+"as" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"Ã«"+base_2+"as" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"i"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"i"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV048"
  } ;

mkV049 : Str -> V ;
mkV049 base =
  case base of {
    base_1+"je"+base_2@("l"|(?+?)) => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"je"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"je"+base_2+"Ã«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV049"
  } ;

mkV050 : Str -> V ;
mkV050 base =
  case base of {
    base_1+"o"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"o"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"a"+base_2+"ta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"a"+base_2+"tur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV050"
  } ;

mkV051 : Str -> V ;
mkV051 base =
  case base of {
    base_1+"je"+base_2@?+"r" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"je"+base_2+"r" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"je"+base_2+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV051"
  } ;

mkV052 : Str -> V ;
mkV052 base =
  case base of {
    base_1+"r"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"r"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"r"+base_2 ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"n"+base_2 ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV052"
  } ;

mkV053 : Str -> V ;
mkV053 base =
  case base of {
    base_1+"i"+base_2@(?+?) => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"i"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"i"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV053"
  } ;

mkV054 : Str -> V ;
mkV054 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"jta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV054"
  } ;

mkV055 : Str -> V ;
mkV055 base =
  case base of {
    base_1+"em" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"em" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"Ã«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV055"
  } ;

mkV056 : Str -> V ;
mkV056 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"na" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1 ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV056"
  } ;

mkV057 : Str -> V ;
mkV057 base =
  case base of {
    base_1+"n" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"n" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"u" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV057"
  } ;

mkV058 : Str -> V ;
mkV058 base =
  case base of {
    base_1+"sh"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"sh"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"sh"+base_2 ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"n"+base_2 ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV058"
  } ;

mkV059 : Str -> V ;
mkV059 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"a" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"urÃ«" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV060 : Str -> V ;
mkV060 base =
  case base of {
    base_1+"je"+base_2@(?+?) => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"je"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"ja" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"je"+base_2+"Ã«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV060"
  } ;

mkV061 : Str -> V ;
mkV061 base =
  case base of {
    base_1+"em" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"em" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1 ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV061"
  } ;

mkV062 : Str -> V ;
mkV062 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"Ã«" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"ur" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV063 : Str -> V ;
mkV063 base =
  case base of {
    base_1+"i"+base_2@?+"em" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"i"+base_2+"em" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"ra" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"i"+base_2+"rur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV063"
  } ;

mkV064 : Str -> V ;
mkV064 base =
  case base of {
    base_1+"a"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"a"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"e"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"e"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV064"
  } ;

mkV065 : Str -> V ;
mkV065 base =
  case base of {
    base_1+"sh"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"sh"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"r"+base_2 ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = nonExist ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV065"
  } ;

mkV066 : Str -> V ;
mkV066 base =
  case base of {
    "hÃ«"+base_1+"a" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => "hÃ«"+base_1+"a" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => "hÃ«"+base_1+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"Ã«nÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV066"
  } ;

mkV067 : Str -> V ;
mkV067 base =
  case base of {
    base_1+"Ã«"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"Ã«"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"Ã«"+base_2 ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV067"
  } ;

mkV068 : Str -> V ;
mkV068 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV068"
  } ;

mkV069 : Str -> V ;
mkV069 base =
  case base of {
    base_1+"n" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"n" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ti" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"tÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV069"
  } ;

mkV070 : Str -> V ;
mkV070 base =
  case base of {
    base_1+"on" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"on" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"oi" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"uar" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV070"
  } ;

mkV071 : Str -> V ;
mkV071 base =
  case base of {
    base_1+base_2@?+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+base_2+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+base_2+"u" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"y"+base_2+"r" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV071"
  } ;

mkV072 : Str -> V ;
mkV072 base =
  case base of {
    base_1+base_2@?+"s" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+base_2+"s" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"it"+base_2 ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+base_2+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV072"
  } ;

mkV073 : Str -> V ;
mkV073 base =
  case base of {
    base_1+"i"+base_2@?+"em" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"i"+base_2+"em" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"i"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV073"
  } ;

mkV074 : Str -> V ;
mkV074 base =
  case base of {
    base_1+"in" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"in" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"uar" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV074"
  } ;

mkV075 : Str -> V ;
mkV075 base =
  case base of {
    base_1+"Ã«" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"Ã«" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV075"
  } ;

mkV076 : Str -> V ;
mkV076 base =
  case base of {
    base_1+"y"+base_2@(?+?) => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"y"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"y"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV076"
  } ;

mkV077 : Str -> V ;
mkV077 base =
  case base of {
    base_1+"y"+base_2@?+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"y"+base_2+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => "r"+base_1+base_2+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = "r"+base_1+"y"+base_2+"r" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV077"
  } ;

mkV078 : Str -> V ;
mkV078 base =
  case base of {
    base_1+"et" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"et" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1 ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV078"
  } ;

mkV079 : Str -> V ;
mkV079 base =
  case base of {
    base_1+"y"+base_2@?+"b" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"y"+base_2+"b" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"i"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"i"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV079"
  } ;

mkV080 : Str -> V ;
mkV080 base =
  case base of {
    base_1+"s" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"s" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"sur" ; --guessed
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV080"
  } ;

mkV081 : Str -> V ;
mkV081 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"va" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV081"
  } ;

mkV082 : Str -> V ;
mkV082 base =
  case base of {
    base_1+base_2@?+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+base_2+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+base_2+"jti" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"y"+base_2+"r" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV082"
  } ;

mkV083 : Str -> V ;
mkV083 base =
  case base of {
    base_1+"e" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"e" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV083"
  } ;

mkV084 : Str -> V ;
mkV084 base =
  case base of {
    "e"+base_1+"a" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => "e"+base_1+"a" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => "e"+base_1+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = "a"+base_1+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV084"
  } ;

mkV085 : Str -> V ;
mkV085 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"na" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV085"
  } ;

mkV086 : Str -> V ;
mkV086 base =
  case base of {
    base_1+"ej" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"ej" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"eva" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"uar" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV086"
  } ;

mkV087 : Str -> V ;
mkV087 base =
  case base of {
    base_1+"h"+base_2@?+"Ã«"+base_3@(?+?)+"as" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"h"+base_2+"Ã«"+base_3+"as" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"h"+base_2+"e"+base_3+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+base_2+"e"+base_3+"Ã«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV087"
  } ;

mkV088 : Str -> V ;
mkV088 base =
  case base of {
    "vrokth" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => "vrokth" ;
                                         P2 => "-" ;
                                         P3 => "-"
                                       } ;
                                 Pl => table {
                                         P1 => "-" ;
                                         P2 => "-" ;
                                         P3 => "-"
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => "-" ;
                                         P2 => "-" ;
                                         P3 => "-"
                                       } ;
                                 Pl => table {
                                         P1 => "-" ;
                                         P2 => "-" ;
                                         P3 => "-"
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => "m" ;
                                           P2 => "-" ;
                                           P3 => "-"
                                         } ;
                                   Pl => table {
                                           P1 => "-" ;
                                           P2 => "-" ;
                                           P3 => "-"
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => "-" ;
                                              P2 => "-" ;
                                              P3 => "-"
                                            } ;
                                      Pl => table {
                                              P1 => "-" ;
                                              P2 => "-" ;
                                              P3 => "-"
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => "-" ;
                       Pl => "-"
                     } ;
        participle = "vrokthe" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => "-" ;
                                  P2 => "-" ;
                                  P3 => "-"
                                } ;
                          Pl => table {
                                  P1 => "-" ;
                                  P2 => "-" ;
                                  P3 => "-"
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => "-" ;
                                  P2 => "-" ;
                                  P3 => "-"
                                } ;
                          Pl => table {
                                  P1 => "-" ;
                                  P2 => "-" ;
                                  P3 => "-"
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => "-" ;
                                    P2 => "-" ;
                                    P3 => "-"
                                  } ;
                            Pl => table {
                                    P1 => "-" ;
                                    P2 => "-" ;
                                    P3 => "-"
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => "-" ;
                                      P2 => "-" ;
                                      P3 => "-"
                                    } ;
                              Pl => table {
                                      P1 => "-" ;
                                      P2 => "-" ;
                                      P3 => "-"
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV088"
  } ;

mkV089 : Str -> V ;
mkV089 base =
  case base of {
    base_1+"Ã«"+base_2@(?+?)+"as" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"Ã«"+base_2+"as" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"i"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"i"+base_2+"Ã«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV089"
  } ;

mkV090 : Str -> V ;
mkV090 base =
  case base of {
    base_1+base_2@?+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+base_2+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"u"+base_2+"jta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"u"+base_2+"r" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV090"
  } ;

mkV091 : Str -> V ;
mkV091 base =
  case base of {
    base_1+"ie"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"ie"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+base_2+"eva" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+base_2+"erÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV091"
  } ;

mkV092 : Str -> V ;
mkV092 base =
  case base of {
    base_1+"ij" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"ij" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ova" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"uar" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV092"
  } ;

mkV093 : Str -> V ;
mkV093 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ha" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"hur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV093"
  } ;

mkV094 : Str -> V ;
mkV094 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"jÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV094"
  } ;

mkV095 : Str -> V ;
mkV095 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"tur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV095"
  } ;

mkV096 : Str -> V ;
mkV096 base =
  case base of {
    base_1+"ohem" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"ohem" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ova" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"uar" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV096"
  } ;

mkV097 : Str -> V ;
mkV097 base =
  case base of {
    base_1+base_2@?+"hem" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+base_2+"hem" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+base_2+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"y"+base_2+"r" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV097"
  } ;

mkV098 : Str -> V ;
mkV098 base =
  case base of {
    base_1+"at"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"at"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ash"+base_2 ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+base_2+"nÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV098"
  } ;

mkV099 : Str -> V ;
mkV099 base =
  case base of {
    base_1+"r"+base_2@(?+?+?+?) => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"r"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"r"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV099"
  } ;

mkV100 : Str -> V ;
mkV100 base =
  case base of {
    base_1+"s" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"s" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"sur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV100"
  } ;

mkV101 : Str -> V ;
mkV101 base =
  case base of {
    base_1+"ua"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"ua"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"ta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"o"+base_2+"tur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV101"
  } ;

mkV102 : Str -> V ;
mkV102 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"na" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"nÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV102"
  } ;

mkV103 : Str -> V ;
mkV103 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"hÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV103"
  } ;

mkV104 : Str -> V ;
mkV104 base =
  case base of {
    base_1+"on" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"on" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"uar" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV104"
  } ;

mkV105 : Str -> V ;
mkV105 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"jta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"r" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV105"
  } ;

mkV106 : Str -> V ;
mkV106 base =
  case base of {
    base_1+"Ã«" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"Ã«" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"a" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV106"
  } ;

mkV107 : Str -> V ;
mkV107 base =
  case base of {
    "n"+base_1 => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => "n"+base_1 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = "n"+base_1+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV107"
  } ;

mkV108 : Str -> V ;
mkV108 base =
  case base of {
    base_1+"oj" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"oj" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"oha" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"uar" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV108"
  } ;

mkV109 : Str -> V ;
mkV109 base =
  case base of {
    base_1+"oj" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"oj" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ita" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"ir" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV109"
  } ;

mkV110 : Str -> V ;
mkV110 base =
  case base of {
    base_1+"ih"+base_2@?+"m" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"ih"+base_2+"m" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+base_2+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"y"+base_2+"r" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV110"
  } ;

mkV111 : Str -> V ;
mkV111 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"va" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"er" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV112 : Str -> V ;
mkV112 base =
  case base of {
    base_1+"a"+base_2@(?+?) => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"a"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"a"+base_2+"Ã«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV112"
  } ;

mkV113 : Str -> V ;
mkV113 base =
  case base of {
    base_1+"ij" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"ij" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"iva" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"yer" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV113"
  } ;

mkV114 : Str -> V ;
mkV114 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"a" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"i" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV115 : Str -> V ;
mkV115 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"Ã«" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"i" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV116 : Str -> V ;
mkV116 base =
  case base of {
    base_1+"hem" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"hem" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"jta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"jtur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV116"
  } ;

mkV117 : Str -> V ;
mkV117 base =
  case base of {
    base_1+base_2@(?+?+?) => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"q"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV117"
  } ;

mkV118 : Str -> V ;
mkV118 base =
  case base of {
    base_1+"Ã«" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"Ã«" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ura" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"Ã«nÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV118"
  } ;

mkV119 : Str -> V ;
mkV119 base =
  case base of {
    base_1+"ej" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"ej" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"eva" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"yrÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV119"
  } ;

mkV120 : Str -> V ;
mkV120 base =
  case base of {
    base_1+"h"+base_2@(?+?+?) => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"h"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"h"+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV120"
  } ;

mkV121 : Str -> V ;
mkV121 base =
  case base of {
    base_1+"oj" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"oj" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"oj" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"uar" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV121"
  } ;

mkV122 : Str -> V ;
mkV122 base =
  case base of {
    base_1+"Ã¢j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"Ã¢j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"Ã¢na" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"Ã´" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV122"
  } ;

mkV123 : Str -> V ;
mkV123 base =
  case base of {
    base_1+"i"+base_2@?+"et" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"i"+base_2+"et" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"o"+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"a"+base_2+"Ã«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV123"
  } ;

mkV124 : Str -> V ;
mkV124 base =
  case base of {
    base_1+"et" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"et" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV124"
  } ;

mkV125 : Str -> V ;
mkV125 base =
  case base of {
    base_1+base_2@?+"rrtÃ«" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+base_2+"rrtÃ«" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"or"+base_2 ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+base_2+"rrÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV125"
  } ;

mkV126 : Str -> V ;
mkV126 base =
  case base of {
    base_1+"ash"+base_2@? => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"ash"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ash"+base_2 ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+base_2+"nÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV126"
  } ;

mkV127 : Str -> V ;
mkV127 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"a" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"un" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV128 : Str -> V ;
mkV128 base =
  case base of {
    "venj" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => "venj" ;
                                         P2 => "-" ;
                                         P3 => "-"
                                       } ;
                                 Pl => table {
                                         P1 => "-" ;
                                         P2 => "-" ;
                                         P3 => "-"
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => "-" ;
                                         P2 => "-" ;
                                         P3 => "-"
                                       } ;
                                 Pl => table {
                                         P1 => "-" ;
                                         P2 => "-" ;
                                         P3 => "-"
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => "thura" ;
                                           P2 => "-" ;
                                           P3 => "-"
                                         } ;
                                   Pl => table {
                                           P1 => "-" ;
                                           P2 => "-" ;
                                           P3 => "-"
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => "-" ;
                                              P2 => "-" ;
                                              P3 => "-"
                                            } ;
                                      Pl => table {
                                              P1 => "-" ;
                                              P2 => "-" ;
                                              P3 => "-"
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => "-" ;
                       Pl => "-"
                     } ;
        participle = "thurur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => "-" ;
                                  P2 => "-" ;
                                  P3 => "-"
                                } ;
                          Pl => table {
                                  P1 => "-" ;
                                  P2 => "-" ;
                                  P3 => "-"
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => "-" ;
                                  P2 => "-" ;
                                  P3 => "-"
                                } ;
                          Pl => table {
                                  P1 => "-" ;
                                  P2 => "-" ;
                                  P3 => "-"
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => "-" ;
                                    P2 => "-" ;
                                    P3 => "-"
                                  } ;
                            Pl => table {
                                    P1 => "-" ;
                                    P2 => "-" ;
                                    P3 => "-"
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => "-" ;
                                      P2 => "-" ;
                                      P3 => "-"
                                    } ;
                              Pl => table {
                                      P1 => "-" ;
                                      P2 => "-" ;
                                      P3 => "-"
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV128"
  } ;

mkV129 : Str -> V ;
mkV129 base =
  case base of {
    base_1+"n" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"n" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV129"
  } ;

mkV130 : Str -> V ;
mkV130 base =
  case base of {
    base_1+"nj" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"nj" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ta" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"rÃ«" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV130"
  } ;

mkV131 : Str -> V ;
mkV131 base =
  case base of {
    base_1+"oj" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"oj" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"ova" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"ue" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV131"
  } ;

mkV132 : Str -> V ;
mkV132 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"ta" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"turï¼mprojtunï¼mpruar" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV133 : Str -> V ;
mkV133 base =
  case base of {
    base_1+"j" => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"j" ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+"va" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+"hur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV133"
  } ;

mkV134 : Str -> V ;
mkV134 base_1 =
  lin V
  { Indicative = table {
                   Pres => table {
                             Sg => table {
                                     P1 => base_1 ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Past => table {
                             Sg => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   } ;
                             Pl => table {
                                     P1 => nonExist ;
                                     P2 => nonExist ;
                                     P3 => nonExist
                                   }
                           } ;
                   Aorist => table {
                               Sg => table {
                                       P1 => base_1+"i" ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     } ;
                               Pl => table {
                                       P1 => nonExist ;
                                       P2 => nonExist ;
                                       P3 => nonExist
                                     }
                             } ;
                   Imperfect => table {
                                  Sg => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        } ;
                                  Pl => table {
                                          P1 => nonExist ;
                                          P2 => nonExist ;
                                          P3 => nonExist
                                        }
                                }
                 } ;
    Imperative = table {
                   Sg => nonExist ;
                   Pl => nonExist
                 } ;
    participle = base_1+"ur" ;
    pres_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    perf_optative = table {
                      Sg => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            } ;
                      Pl => table {
                              P1 => nonExist ;
                              P2 => nonExist ;
                              P3 => nonExist
                            }
                    } ;
    pres_admirative = table {
                        Sg => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              } ;
                        Pl => table {
                                P1 => nonExist ;
                                P2 => nonExist ;
                                P3 => nonExist
                              }
                      } ;
    imperf_admirative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        }
  } ;

mkV135 : Str -> V ;
mkV135 base =
  case base of {
    base_1+"r"+base_2@(?+?+?) => lin V
      { Indicative = table {
                       Pres => table {
                                 Sg => table {
                                         P1 => base_1+"r"+base_2 ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Past => table {
                                 Sg => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       } ;
                                 Pl => table {
                                         P1 => nonExist ;
                                         P2 => nonExist ;
                                         P3 => nonExist
                                       }
                               } ;
                       Aorist => table {
                                   Sg => table {
                                           P1 => base_1+base_2+"a" ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         } ;
                                   Pl => table {
                                           P1 => nonExist ;
                                           P2 => nonExist ;
                                           P3 => nonExist
                                         }
                                 } ;
                       Imperfect => table {
                                      Sg => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            } ;
                                      Pl => table {
                                              P1 => nonExist ;
                                              P2 => nonExist ;
                                              P3 => nonExist
                                            }
                                    }
                     } ;
        Imperative = table {
                       Sg => nonExist ;
                       Pl => nonExist
                     } ;
        participle = base_1+base_2+"ur" ;
        pres_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        perf_optative = table {
                          Sg => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                } ;
                          Pl => table {
                                  P1 => nonExist ;
                                  P2 => nonExist ;
                                  P3 => nonExist
                                }
                        } ;
        pres_admirative = table {
                            Sg => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  } ;
                            Pl => table {
                                    P1 => nonExist ;
                                    P2 => nonExist ;
                                    P3 => nonExist
                                  }
                          } ;
        imperf_admirative = table {
                              Sg => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    } ;
                              Pl => table {
                                      P1 => nonExist ;
                                      P2 => nonExist ;
                                      P3 => nonExist
                                    }
                            }
      };
    _ => error "Can't apply paradigm mkV135"
  } ;

}
