abstract Browse = Cat, Numeral, Structural, Lexicon ** {

cat ListAdv ;
cat ListAP ;
cat ListNP ;
cat ListRS ;
cat ListS ;

fun mkAP_1 : A -> AP ;
fun mkAP_2 : A -> NP -> AP ;
fun mkAP_3 : A2 -> NP -> AP ;
fun mkAP_4 : A2 -> AP ;
fun mkAP_5 : AP -> S -> AP ;
fun mkAP_6 : AP -> QS -> AP ;
fun mkAP_7 : AP -> VP -> AP ;
fun mkAP_8 : AdA -> A -> AP ;
fun mkAP_9 : AdA -> AP -> AP ;
fun mkAP_10 : Conj -> AP -> AP -> AP ;
fun mkAP_11 : Conj -> ListAP -> AP ;
fun mkAP_12 : Ord -> AP ;
fun mkAP_13 : CAdv -> AP -> NP -> AP ;
fun mkAdv_16 : A -> Adv ;
fun mkAdv_17 : Prep -> NP -> Adv ;
fun mkAdv_18 : CAdv -> A -> NP -> Adv ;
fun mkAdv_19 : CAdv -> A -> S -> Adv ;
fun mkAdv_20 : AdA -> Adv -> Adv ;
fun mkAdv_21 : Subj -> S -> Adv ;
fun mkAdv_22 : Conj -> Adv -> Adv -> Adv ;
fun mkAdv_23 : Conj -> ListAdv -> Adv ;
fun mkCl_24 : NP -> VP -> Cl ;
fun mkCl_25 : NP -> V -> Cl ;
fun mkCl_26 : NP -> V2 -> NP -> Cl ;
fun mkCl_27 : NP -> V3 -> NP -> NP -> Cl ;
fun mkCl_28 : NP -> VV -> VP -> Cl ;
fun mkCl_29 : NP -> VS -> S -> Cl ;
fun mkCl_30 : NP -> VQ -> QS -> Cl ;
fun mkCl_31 : NP -> VA -> AP -> Cl ;
fun mkCl_32 : NP -> V2A -> NP -> AP -> Cl ;
fun mkCl_33 : NP -> V2S -> NP -> S -> Cl ;
fun mkCl_34 : NP -> V2Q -> NP -> QS -> Cl ;
fun mkCl_35 : NP -> V2V -> NP -> VP -> Cl ;
fun mkCl_36 : VP -> Cl ;
fun mkCl_37 : NP -> RS -> Cl ;
fun mkCl_38 : Adv -> S -> Cl ;
fun mkCl_39 : N -> Cl ;
fun mkCl_40 : CN -> Cl ;
fun mkCl_41 : NP -> Cl ;
fun mkCl_42 : NP -> AP -> Cl ;
fun mkCl_43 : NP -> A -> Cl ;
fun mkCl_44 : NP -> A -> NP -> Cl ;
fun mkCl_45 : NP -> A2 -> NP -> Cl ;
fun mkCl_46 : NP -> NP -> Cl ;
fun mkCl_47 : NP -> CN -> Cl ;
fun mkCl_48 : NP -> N -> Cl ;
fun mkCl_49 : NP -> Adv -> Cl ;
fun mkCl_50 : V -> Cl ;
fun genericCl_51 : VP -> Cl ;
fun mkNP_58 : CN -> NP ;
fun mkNP_59 : N -> NP ;
fun mkNP_60 : Det -> CN -> NP ;
fun mkNP_61 : Det -> N -> NP ;
fun mkNP_62 : Quant -> NP ;
fun mkNP_63 : Quant -> Num -> NP ;
fun mkNP_64 : Det -> NP ;
fun mkNP_65 : Card -> CN -> NP ;
fun mkNP_66 : Card -> N -> NP ;
fun mkNP_67 : Quant -> CN -> NP ;
fun mkNP_68 : Quant -> N -> NP ;
fun mkNP_69 : Quant -> Num -> CN -> NP ;
fun mkNP_70 : Quant -> Num -> N -> NP ;
fun mkNP_71 : Pron -> CN -> NP ;
fun mkNP_72 : Pron -> N -> NP ;
fun mkNP_73 : Numeral -> CN -> NP ;
fun mkNP_74 : Numeral -> N -> NP ;
fun mkNP_75 : Digits -> CN -> NP ;
fun mkNP_76 : Digits -> N -> NP ;
fun mkNP_77 : Digit -> CN -> NP ;
fun mkNP_78 : Digit -> N -> NP ;
fun mkNP_79 : PN -> NP ;
fun mkNP_80 : Pron -> NP ;
fun mkNP_81 : Predet -> NP -> NP ;
fun mkNP_82 : NP -> V2 -> NP ;
fun mkNP_83 : NP -> Adv -> NP ;
fun mkNP_84 : NP -> RS -> NP ;
fun mkNP_85 : Conj -> NP -> NP -> NP ;
fun mkNP_86 : Conj -> ListNP -> NP ;
fun mkDet_90 : Quant -> Ord -> Det ;
fun mkDet_91 : Quant -> Det ;
fun mkDet_92 : Quant -> Num -> Ord -> Det ;
fun mkDet_93 : Quant -> Num -> Det ;
fun mkDet_94 : Card -> Det ;
fun mkDet_95 : Digits -> Det ;
fun mkDet_96 : Numeral -> Det ;
fun mkDet_97 : Pron -> Det ;
fun mkDet_98 : Pron -> Num -> Det ;
fun sgNum_101 : Num ;
fun plNum_102 : Num ;
fun mkCard_103 : Numeral -> Card ;
fun mkCard_104 : Digits -> Card ;
fun mkCard_105 : AdN -> Card -> Card ;
fun mkNum_106 : Numeral -> Num ;
fun mkNum_107 : Digits -> Num ;
fun mkNum_108 : Digit -> Num ;
fun mkNum_109 : Card -> Num ;
fun mkNum_110 : AdN -> Card -> Num ;
fun mkOrd_111 : Numeral -> Ord ;
fun mkOrd_112 : Digits -> Ord ;
fun mkOrd_113 : Digit -> Ord ;
fun mkOrd_114 : A -> Ord ;
fun mkAdN_141 : CAdv -> AdN ;
fun mkDigits_142 : Dig -> Digits ;
fun mkDigits_143 : Dig -> Digits -> Digits ;
fun mkCN_154 : N -> CN ;
fun mkCN_155 : N2 -> NP -> CN ;
fun mkCN_156 : N3 -> NP -> NP -> CN ;
fun mkCN_157 : N2 -> CN ;
fun mkCN_158 : N3 -> CN ;
fun mkCN_159 : AP -> CN -> CN ;
fun mkCN_160 : AP -> N -> CN ;
fun mkCN_161 : CN -> AP -> CN ;
fun mkCN_162 : N -> AP -> CN ;
fun mkCN_163 : A -> CN -> CN ;
fun mkCN_164 : A -> N -> CN ;
fun mkCN_165 : CN -> RS -> CN ;
fun mkCN_166 : N -> RS -> CN ;
fun mkCN_167 : CN -> Adv -> CN ;
fun mkCN_168 : N -> Adv -> CN ;
fun mkCN_169 : CN -> S -> CN ;
fun mkCN_170 : CN -> QS -> CN ;
fun mkCN_171 : CN -> VP -> CN ;
fun mkCN_172 : CN -> NP -> CN ;
fun mkCN_173 : N -> NP -> CN ;
fun mkPhr_174 : PConj -> Utt -> Voc -> Phr ;
fun mkPhr_175 : Utt -> Voc -> Phr ;
fun mkPhr_176 : PConj -> Utt -> Phr ;
fun mkPhr_177 : Utt -> Phr ;
fun mkPhr_178 : S -> Phr ;
fun mkPhr_179 : Cl -> Phr ;
fun mkPhr_180 : QS -> Phr ;
fun mkPhr_181 : Imp -> Phr ;
fun mkPConj_182 : Conj -> PConj ;
fun noPConj_183 : PConj ;
fun mkVoc_184 : NP -> Voc ;
fun noVoc_185 : Voc ;
fun positivePol_186 : Pol ;
fun negativePol_187 : Pol ;
fun simultaneousAnt_188 : Ant ;
fun anteriorAnt_189 : Ant ;
fun presentTense_190 : Tense ;
fun pastTense_191 : Tense ;
fun futureTense_192 : Tense ;
fun conditionalTense_193 : Tense ;
--fun singularImpForm_194 : ImpForm ;
--fun pluralImpForm_195 : ImpForm ;
--fun politeImpForm_196 : ImpForm ;
fun mkUtt_197 : S -> Utt ;
fun mkUtt_198 : Cl -> Utt ;
fun mkUtt_199 : QS -> Utt ;
fun mkUtt_200 : QCl -> Utt ;
--fun mkUtt_201 : ImpForm -> Pol -> Imp -> Utt ;
--fun mkUtt_202 : ImpForm -> Imp -> Utt ;
fun mkUtt_203 : Pol -> Imp -> Utt ;
fun mkUtt_204 : Imp -> Utt ;
fun mkUtt_205 : IP -> Utt ;
fun mkUtt_206 : IAdv -> Utt ;
fun mkUtt_207 : NP -> Utt ;
fun mkUtt_208 : Adv -> Utt ;
fun mkUtt_209 : VP -> Utt ;
fun lets_Utt_210 : VP -> Utt ;
fun mkQCl_211 : Cl -> QCl ;
fun mkQCl_212 : IP -> VP -> QCl ;
fun mkQCl_213 : IP -> ClSlash -> QCl ;
fun mkQCl_214 : IP -> NP -> V2 -> QCl ;
fun mkQCl_215 : IAdv -> Cl -> QCl ;
fun mkQCl_216 : Prep -> IP -> Cl -> QCl ;
fun mkQCl_217 : IAdv -> NP -> QCl ;
fun mkQCl_218 : IP -> NP -> QCl ;
fun mkQCl_219 : IP -> QCl ;
fun mkIP_220 : IDet -> CN -> IP ;
fun mkIP_221 : IDet -> N -> IP ;
fun mkIP_222 : IQuant -> CN -> IP ;
fun mkIP_223 : IQuant -> Num -> CN -> IP ;
fun mkIP_224 : IQuant -> N -> IP ;
fun mkIP_225 : IP -> Adv -> IP ;
fun mkIDet_226 : IQuant -> Num -> IDet ;
fun mkIDet_227 : IQuant -> IDet ;
fun whichSg_IDet_228 : IDet ;
fun whichPl_IDet_229 : IDet ;
fun what_IP_230 : IP ;
fun who_IP_231 : IP ;
fun which_IDet_232 : IDet ;
fun mkIAdv_233 : Prep -> IP -> IAdv ;
fun mkRCl_234 : Cl -> RCl ;
fun mkRCl_235 : RP -> VP -> RCl ;
fun mkRCl_236 : RP -> ClSlash -> RCl ;
fun mkRCl_237 : RP -> NP -> V2 -> RCl ;
fun which_RP_238 : RP ;
fun mkRP_239 : Prep -> NP -> RP -> RP ;
fun mkClSlash_240 : NP -> V2 -> ClSlash ;
fun mkClSlash_241 : NP -> VV -> V2 -> ClSlash ;
fun mkClSlash_242 : ClSlash -> Adv -> ClSlash ;
fun mkClSlash_243 : Cl -> Prep -> ClSlash ;
fun mkImp_244 : VP -> Imp ;
fun mkImp_245 : V -> Imp ;
fun mkImp_246 : V2 -> NP -> Imp ;
fun mkS_400 : Cl -> S ;
fun mkS_247 : Tense -> Cl -> S ;
fun mkS_248 : Ant -> Cl -> S ;
fun mkS_249 : Pol -> Cl -> S ;
fun mkS_250 : Tense -> Ant -> Cl -> S ;
fun mkS_251 : Tense -> Pol -> Cl -> S ;
fun mkS_252 : Ant -> Pol -> Cl -> S ;
fun mkS_253 : Tense -> Ant -> Pol -> Cl -> S ;
fun mkS_254 : Conj -> S -> S -> S ;
fun mkS_255 : Conj -> ListS -> S ;
fun mkS_256 : Adv -> S -> S ;
fun mkQS_257 : QCl -> QS ;
fun mkQS_258 : Tense -> QCl -> QS ;
fun mkQS_259 : Ant -> QCl -> QS ;
fun mkQS_260 : Pol -> QCl -> QS ;
fun mkQS_261 : Tense -> Ant -> QCl -> QS ;
fun mkQS_262 : Tense -> Pol -> QCl -> QS ;
fun mkQS_263 : Ant -> Pol -> QCl -> QS ;
fun mkQS_264 : Tense -> Ant -> Pol -> QCl -> QS ;
fun mkQS_265 : Cl -> QS ;
fun mkRS_266 : RCl -> RS ;
fun mkRS_267 : Tense -> RCl -> RS ;
fun mkRS_268 : Ant -> RCl -> RS ;
fun mkRS_269 : Pol -> RCl -> RS ;
fun mkRS_270 : Tense -> Ant -> RCl -> RS ;
fun mkRS_271 : Tense -> Pol -> RCl -> RS ;
fun mkRS_272 : Ant -> Pol -> RCl -> RS ;
fun mkRS_273 : Tense -> Ant -> Pol -> RCl -> RS ;
fun mkRS_274 : Conj -> RS -> RS -> RS ;
fun mkRS_275 : Conj -> ListRS -> RS ;
fun emptyText_276 : Text ;
fun mkText_280 : Phr -> Text ;
fun mkText_281 : Utt -> Text ;
fun mkText_282 : S -> Text ;
fun mkText_283 : Cl -> Text ;
fun mkText_284 : QS -> Text ;
fun mkText_285 : Imp -> Text ;
fun mkText_286 : Pol -> Imp -> Text ;
fun mkText_287 : Phr -> Text -> Text ;
fun mkVP_288 : V -> VP ;
fun mkVP_289 : V2 -> NP -> VP ;
fun mkVP_290 : V3 -> NP -> NP -> VP ;
fun mkVP_291 : VV -> VP -> VP ;
fun mkVP_292 : VS -> S -> VP ;
fun mkVP_293 : VQ -> QS -> VP ;
fun mkVP_294 : VA -> AP -> VP ;
fun mkVP_295 : V2A -> NP -> AP -> VP ;
fun mkVP_296 : V2S -> NP -> S -> VP ;
fun mkVP_297 : V2Q -> NP -> QS -> VP ;
fun mkVP_298 : V2V -> NP -> VP -> VP ;
fun mkVP_299 : A -> VP ;
fun mkVP_300 : A -> NP -> VP ;
fun mkVP_301 : A2 -> NP -> VP ;
fun mkVP_302 : AP -> VP ;
fun mkVP_303 : NP -> VP ;
fun mkVP_304 : CN -> VP ;
fun mkVP_305 : N -> VP ;
fun mkVP_306 : Adv -> VP ;
fun mkVP_307 : VP -> Adv -> VP ;
fun mkVP_308 : AdV -> VP -> VP ;
fun mkVP_309 : VPSlash -> NP -> VP ;
fun mkVP_310 : VPSlash -> VP ;
fun reflexiveVP_311 : V2 -> VP ;
fun mkVPSlash_312 : V2 -> VPSlash ;
fun mkVPSlash_313 : V3 -> NP -> VPSlash ;
fun mkVPSlash_314 : V2A -> AP -> VPSlash ;
fun mkVPSlash_315 : V2Q -> QS -> VPSlash ;
fun mkVPSlash_316 : V2S -> S -> VPSlash ;
fun mkVPSlash_317 : V2V -> VP -> VPSlash ;
fun passiveVP_318 : V2 -> VP ;
fun passiveVP_319 : V2 -> NP -> VP ;
fun progressiveVP_320 : VP -> VP ;
fun mkListS_321 : S -> S -> ListS ;
fun mkListS_322 : S -> ListS -> ListS ;
fun mkListAP_323 : AP -> AP -> ListAP ;
fun mkListAP_324 : AP -> ListAP -> ListAP ;
fun mkListAdv_325 : Adv -> Adv -> ListAdv ;
fun mkListAdv_326 : Adv -> ListAdv -> ListAdv ;
fun mkListNP_327 : NP -> NP -> ListNP ;
fun mkListNP_328 : NP -> ListNP -> ListNP ;
fun mkListRS_329 : RS -> RS -> ListRS ;
fun mkListRS_330 : RS -> ListRS -> ListRS ;
fun that_NP_331 : NP ;
fun this_NP_332 : NP ;
fun those_NP_333 : NP ;
fun these_NP_334 : NP ;
fun that_Det_335 : Det ;
fun this_Det_336 : Det ;
fun those_Det_337 : Det ;
fun these_Det_338 : Det ;
fun the_Det : Det ;
fun thePl_Det : Det ;
fun a_Det : Det ;
fun aPl_Det : Det ;

}
