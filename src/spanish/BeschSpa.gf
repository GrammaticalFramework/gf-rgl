--# -path=.:../romance:../common:../abstract:../prelude

resource BeschSpa = open Prelude, CommonRomance in {

flags optimize=noexpand ; -- faster than values
    coding=utf8 ;

oper Verbum = {s : VFB => Str} ;

-- machine-generated GF file from FM source by Inger Andersson and Therese Söderberg

oper ser_1 : Str -> Verbum = \ser -> 
  let x_ = Predef.tk 3 ser in
 {s = table {
    VI Infn=> x_ + "ser" ;
    VI Ger => x_ + "siendo" ;
    VI Part => x_ + "sido" ;
    VPB (Pres Ind Sg P1) => x_ + "soy" ;
    VPB (Pres Ind Sg P2) => x_ + "eres" ;
    VPB (Pres Ind Sg P3) => x_ + "es" ;
    VPB (Pres Ind Pl P1) => x_ + "somos" ;
    VPB (Pres Ind Pl P2) => x_ + "sois" ;
    VPB (Pres Ind Pl P3) => x_ + "son" ;
    VPB (Pres Sub Sg P1) => x_ + "sea" ;
    VPB (Pres Sub Sg P2) => x_ + "seas" ;
    VPB (Pres Sub Sg P3) => x_ + "sea" ;
    VPB (Pres Sub Pl P1) => x_ + "seamos" ;
    VPB (Pres Sub Pl P2) => x_ + "seáis" ;
    VPB (Pres Sub Pl P3) => x_ + "sean" ;
    VPB (Impf Ind Sg P1) => x_ + "era" ; --# notpresent
    VPB (Impf Ind Sg P2) => x_ + "eras" ; --# notpresent
    VPB (Impf Ind Sg P3) => x_ + "era" ; --# notpresent
    VPB (Impf Ind Pl P1) => x_ + "éramos" ; --# notpresent
    VPB (Impf Ind Pl P2) => x_ + "erais" ; --# notpresent
    VPB (Impf Ind Pl P3) => x_ + "eran" ; --# notpresent
    VPB (Impf Sub Sg P1) => x_ + "fuera" ; --# notpresent
    VPB (Impf Sub Sg P2) => x_ + "fueras" ; --# notpresent
    VPB (Impf Sub Sg P3) => x_ + "fuera" ; --# notpresent
    VPB (Impf Sub Pl P1) => x_ + "fuéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => x_ + "fuerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => x_ + "fueran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => x_ + "fuese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => x_ + "fueses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => x_ + "fuese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => x_ + "fuésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => x_ + "fueseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => x_ + "fuesen" ; --# notpresent
    VPB (Pret Sg P1) => x_ + "fui" ; --# notpresent
    VPB (Pret Sg P2) => x_ + "fuiste" ; --# notpresent
    VPB (Pret Sg P3) => x_ + "fue" ; --# notpresent
    VPB (Pret Pl P1) => x_ + "fuimos" ; --# notpresent
    VPB (Pret Pl P2) => x_ + "fuisteis" ; --# notpresent
    VPB (Pret Pl P3) => x_ + "fueron" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "seré" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "serás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "será" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "seremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "seréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "serán" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "fuere" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "fueres" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "fuere" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "fuéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "fuereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "fueren" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "sería" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "serías" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "sería" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "seríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "seríais" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "serían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => x_ + "sé" ;
    VPB (Imper Sg P3) => x_ + "sea" ;
    VPB (Imper Pl P1) => x_ + "seamos" ;
    VPB (Imper Pl P2) => x_ + "sed" ;
    VPB (Imper Pl P3) => x_ + "sean" ;
    VPB (Pass Sg Masc) => x_ + "sido" ;
    VPB (Pass Sg Fem) => x_ + "sida" ;
    VPB (Pass Pl Masc) => x_ + "sidos" ;
    VPB (Pass Pl Fem) => x_ + "sidas"
    }
  } ;

oper estar_2 : Str -> Verbum = \estar -> 
  let est_ = Predef.tk 2 estar in
 {s = table {
    VI Infn=> est_ + "ar" ;
    VI Ger => est_ + "ando" ;
    VI Part => est_ + "ado" ;
    VPB (Pres Ind Sg P1) => est_ + "oy" ;
    VPB (Pres Ind Sg P2) => est_ + "ás" ;
    VPB (Pres Ind Sg P3) => est_ + "á" ;
    VPB (Pres Ind Pl P1) => est_ + "amos" ;
    VPB (Pres Ind Pl P2) => est_ + "áis" ;
    VPB (Pres Ind Pl P3) => est_ + "án" ;
    VPB (Pres Sub Sg P1) => est_ + "é" ;
    VPB (Pres Sub Sg P2) => est_ + "és" ;
    VPB (Pres Sub Sg P3) => est_ + "é" ;
    VPB (Pres Sub Pl P1) => est_ + "emos" ;
    VPB (Pres Sub Pl P2) => est_ + "éis" ;
    VPB (Pres Sub Pl P3) => est_ + "én" ;
    VPB (Impf Ind Sg P1) => est_ + "aba" ; --# notpresent
    VPB (Impf Ind Sg P2) => est_ + "abas" ; --# notpresent
    VPB (Impf Ind Sg P3) => est_ + "aba" ; --# notpresent
    VPB (Impf Ind Pl P1) => est_ + "ábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => est_ + "abais" ; --# notpresent
    VPB (Impf Ind Pl P3) => est_ + "aban" ; --# notpresent
    VPB (Impf Sub Sg P1) => est_ + "uviera" ; --# notpresent
    VPB (Impf Sub Sg P2) => est_ + "uvieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => est_ + "uviera" ; --# notpresent
    VPB (Impf Sub Pl P1) => est_ + "uviéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => est_ + "uvierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => est_ + "uvieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => est_ + "uviese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => est_ + "uvieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => est_ + "uviese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => est_ + "uviésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => est_ + "uvieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => est_ + "uviesen" ; --# notpresent
    VPB (Pret Sg P1) => est_ + "uve" ; --# notpresent
    VPB (Pret Sg P2) => est_ + "uviste" ; --# notpresent
    VPB (Pret Sg P3) => est_ + "uvo" ; --# notpresent
    VPB (Pret Pl P1) => est_ + "uvimos" ; --# notpresent
    VPB (Pret Pl P2) => est_ + "uvisteis" ; --# notpresent
    VPB (Pret Pl P3) => est_ + "uvieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => est_ + "aré" ; --# notpresent
    VPB (Fut Ind Sg P2) => est_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => est_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => est_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => est_ + "aréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => est_ + "arán" ; --# notpresent
    VPB (Fut Sub Sg P1) => est_ + "uviere" ; --# notpresent
    VPB (Fut Sub Sg P2) => est_ + "uvieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => est_ + "uviere" ; --# notpresent
    VPB (Fut Sub Pl P1) => est_ + "uviéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => est_ + "uviereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => est_ + "uvieren" ; --# notpresent
    VPB (Cond Sg P1) => est_ + "aría" ; --# notpresent
    VPB (Cond Sg P2) => est_ + "arías" ; --# notpresent
    VPB (Cond Sg P3) => est_ + "aría" ; --# notpresent
    VPB (Cond Pl P1) => est_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => est_ + "aríais" ; --# notpresent
    VPB (Cond Pl P3) => est_ + "arían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => est_ + "á" ;
    VPB (Imper Sg P3) => est_ + "é" ;
    VPB (Imper Pl P1) => est_ + "emos" ;
    VPB (Imper Pl P2) => est_ + "ad" ;
    VPB (Imper Pl P3) => est_ + "én" ;
    VPB (Pass Sg Masc) => est_ + "ado" ;
    VPB (Pass Sg Fem) => est_ + "ada" ;
    VPB (Pass Pl Masc) => est_ + "ados" ;
    VPB (Pass Pl Fem) => est_ + "adas"
    }
  } ;

oper haber_3 : Str -> Verbum = \haber -> 
  let h_ = Predef.tk 4 haber in
 {s = table {
    VI Infn=> h_ + "aber" ;
    VI Ger => h_ + "abiendo" ;
    VI Part => h_ + "abido" ;
    VPB (Pres Ind Sg P1) => h_ + "e" ;
    VPB (Pres Ind Sg P2) => h_ + "as" ;
    VPB (Pres Ind Sg P3) => h_ + "a" ;
    VPB (Pres Ind Pl P1) => h_ + "emos" ;
    VPB (Pres Ind Pl P2) => h_ + "abéis" ;
    VPB (Pres Ind Pl P3) => h_ + "an" ;
    VPB (Pres Sub Sg P1) => h_ + "aya" ;
    VPB (Pres Sub Sg P2) => h_ + "ayas" ;
    VPB (Pres Sub Sg P3) => h_ + "aya" ;
    VPB (Pres Sub Pl P1) => h_ + "ayamos" ;
    VPB (Pres Sub Pl P2) => h_ + "ayáis" ;
    VPB (Pres Sub Pl P3) => h_ + "ayan" ;
    VPB (Impf Ind Sg P1) => h_ + "abía" ; --# notpresent
    VPB (Impf Ind Sg P2) => h_ + "abías" ; --# notpresent
    VPB (Impf Ind Sg P3) => h_ + "abía" ; --# notpresent
    VPB (Impf Ind Pl P1) => h_ + "abíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => h_ + "abíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => h_ + "abían" ; --# notpresent
    VPB (Impf Sub Sg P1) => h_ + "ubiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => h_ + "ubieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => h_ + "ubiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => h_ + "ubiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => h_ + "ubierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => h_ + "ubieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => h_ + "ubiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => h_ + "ubieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => h_ + "ubiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => h_ + "ubiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => h_ + "ubieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => h_ + "ubiesen" ; --# notpresent
    VPB (Pret Sg P1) => h_ + "ube" ; --# notpresent
    VPB (Pret Sg P2) => h_ + "ubiste" ; --# notpresent
    VPB (Pret Sg P3) => h_ + "ubo" ; --# notpresent
    VPB (Pret Pl P1) => h_ + "ubimos" ; --# notpresent
    VPB (Pret Pl P2) => h_ + "ubisteis" ; --# notpresent
    VPB (Pret Pl P3) => h_ + "ubieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => h_ + "abré" ; --# notpresent
    VPB (Fut Ind Sg P2) => h_ + "abrás" ; --# notpresent
    VPB (Fut Ind Sg P3) => h_ + "abrá" ; --# notpresent
    VPB (Fut Ind Pl P1) => h_ + "abremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => h_ + "abréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => h_ + "abrán" ; --# notpresent
    VPB (Fut Sub Sg P1) => h_ + "ubiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => h_ + "ubieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => h_ + "ubiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => h_ + "ubiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => h_ + "ubiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => h_ + "ubieren" ; --# notpresent
    VPB (Cond Sg P1) => h_ + "abría" ; --# notpresent
    VPB (Cond Sg P2) => h_ + "abrías" ; --# notpresent
    VPB (Cond Sg P3) => h_ + "abría" ; --# notpresent
    VPB (Cond Pl P1) => h_ + "abríamos" ; --# notpresent
    VPB (Cond Pl P2) => h_ + "abríais" ; --# notpresent
    VPB (Cond Pl P3) => h_ + "abrían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => variants {} ;
    VPB (Imper Sg P3) => variants {} ;
    VPB (Imper Pl P1) => variants {} ;
    VPB (Imper Pl P2) => variants {} ;
    VPB (Imper Pl P3) => variants {} ;
    VPB (Pass Sg Masc) => h_ + "abido" ;
    VPB (Pass Sg Fem) => h_ + "abida" ;
    VPB (Pass Pl Masc) => h_ + "abidos" ;
    VPB (Pass Pl Fem) => h_ + "abidas"
    }
  } ;

oper hay_3 : Str -> Verbum = \haber -> 
  let h_ = Predef.tk 4 haber in
 {s = table {
    VI Infn=> h_ + "aber" ;
    VI Ger => h_ + "abiendo" ;
    VI Part => h_ + "abido" ;
    VPB (Pres Ind Sg P1) => h_ + "e" ;
    VPB (Pres Ind Sg P2) => h_ + "as" ;
    VPB (Pres Ind Sg P3) => h_ + "ay" ;
    VPB (Pres Ind Pl P1) => h_ + "emos" ;
    VPB (Pres Ind Pl P2) => h_ + "abéis" ;
    VPB (Pres Ind Pl P3) => h_ + "an" ;
    VPB (Pres Sub Sg P1) => h_ + "aya" ;
    VPB (Pres Sub Sg P2) => h_ + "ayas" ;
    VPB (Pres Sub Sg P3) => h_ + "aya" ;
    VPB (Pres Sub Pl P1) => h_ + "ayamos" ;
    VPB (Pres Sub Pl P2) => h_ + "ayáis" ;
    VPB (Pres Sub Pl P3) => h_ + "ayan" ;
    VPB (Impf Ind Sg P1) => h_ + "abía" ; --# notpresent
    VPB (Impf Ind Sg P2) => h_ + "abías" ; --# notpresent
    VPB (Impf Ind Sg P3) => h_ + "abía" ; --# notpresent
    VPB (Impf Ind Pl P1) => h_ + "abíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => h_ + "abíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => h_ + "abían" ; --# notpresent
    VPB (Impf Sub Sg P1) => h_ + "ubiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => h_ + "ubieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => h_ + "ubiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => h_ + "ubiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => h_ + "ubierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => h_ + "ubieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => h_ + "ubiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => h_ + "ubieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => h_ + "ubiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => h_ + "ubiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => h_ + "ubieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => h_ + "ubiesen" ; --# notpresent
    VPB (Pret Sg P1) => h_ + "ube" ; --# notpresent
    VPB (Pret Sg P2) => h_ + "ubiste" ; --# notpresent
    VPB (Pret Sg P3) => h_ + "ubo" ; --# notpresent
    VPB (Pret Pl P1) => h_ + "ubimos" ; --# notpresent
    VPB (Pret Pl P2) => h_ + "ubisteis" ; --# notpresent
    VPB (Pret Pl P3) => h_ + "ubieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => h_ + "abré" ; --# notpresent
    VPB (Fut Ind Sg P2) => h_ + "abrás" ; --# notpresent
    VPB (Fut Ind Sg P3) => h_ + "abrá" ; --# notpresent
    VPB (Fut Ind Pl P1) => h_ + "abremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => h_ + "abréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => h_ + "abrán" ; --# notpresent
    VPB (Fut Sub Sg P1) => h_ + "ubiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => h_ + "ubieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => h_ + "ubiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => h_ + "ubiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => h_ + "ubiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => h_ + "ubieren" ; --# notpresent
    VPB (Cond Sg P1) => h_ + "abría" ; --# notpresent
    VPB (Cond Sg P2) => h_ + "abrías" ; --# notpresent
    VPB (Cond Sg P3) => h_ + "abría" ; --# notpresent
    VPB (Cond Pl P1) => h_ + "abríamos" ; --# notpresent
    VPB (Cond Pl P2) => h_ + "abríais" ; --# notpresent
    VPB (Cond Pl P3) => h_ + "abrían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => variants {} ;
    VPB (Imper Sg P3) => variants {} ;
    VPB (Imper Pl P1) => variants {} ;
    VPB (Imper Pl P2) => variants {} ;
    VPB (Imper Pl P3) => variants {} ;
    VPB (Pass Sg Masc) => h_ + "abido" ;
    VPB (Pass Sg Fem) => h_ + "abida" ;
    VPB (Pass Pl Masc) => h_ + "abidos" ;
    VPB (Pass Pl Fem) => h_ + "abidas"
    }
  } ;

oper tener_4 : Str -> Verbum = \tener ->
  let t_ = Predef.tk 4 tener in
 {s = table {
    VI Infn => t_ + "ener" ;
    VI Ger => t_ + "eniendo" ;
    VI Part => t_ + "enido" ;
    VPB (Pres Ind Sg P1) => t_ + "engo" ;
    VPB (Pres Ind Sg P2) => t_ + "ienes" ;
    VPB (Pres Ind Sg P3) => t_ + "iene" ;
    VPB (Pres Ind Pl P1) => t_ + "enemos" ;
    VPB (Pres Ind Pl P2) => t_ + "enéis" ;
    VPB (Pres Ind Pl P3) => t_ + "ienen" ;
    VPB (Pres Sub Sg P1) => t_ + "enga" ;
    VPB (Pres Sub Sg P2) => t_ + "engas" ;
    VPB (Pres Sub Sg P3) => t_ + "enga" ;
    VPB (Pres Sub Pl P1) => t_ + "engamos" ;
    VPB (Pres Sub Pl P2) => t_ + "engáis" ;
    VPB (Pres Sub Pl P3) => t_ + "engan" ;
    VPB (Impf Ind Sg P1) => t_ + "enía" ; --# notpresent
    VPB (Impf Ind Sg P2) => t_ + "enías" ; --# notpresent
    VPB (Impf Ind Sg P3) => t_ + "enía" ; --# notpresent
    VPB (Impf Ind Pl P1) => t_ + "eníamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => t_ + "eníais" ; --# notpresent
    VPB (Impf Ind Pl P3) => t_ + "enían" ; --# notpresent
    VPB (Impf Sub Sg P1) => t_ + "uviera" ; --# notpresent
    VPB (Impf Sub Sg P2) => t_ + "uvieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => t_ + "uviera" ; --# notpresent
    VPB (Impf Sub Pl P1) => t_ + "uviéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => t_ + "uvierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => t_ + "uvieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => t_ + "uviese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => t_ + "uvieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => t_ + "uviese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => t_ + "uviésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => t_ + "uvieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => t_ + "uviesen" ; --# notpresent
    VPB (Pret Sg P1) => t_ + "uve" ; --# notpresent
    VPB (Pret Sg P2) => t_ + "uviste" ; --# notpresent
    VPB (Pret Sg P3) => t_ + "uvo" ; --# notpresent
    VPB (Pret Pl P1) => t_ + "uvimos" ; --# notpresent
    VPB (Pret Pl P2) => t_ + "uvisteis" ; --# notpresent
    VPB (Pret Pl P3) => t_ + "uvieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => t_ + "endré" ; --# notpresent
    VPB (Fut Ind Sg P2) => t_ + "endrás" ; --# notpresent
    VPB (Fut Ind Sg P3) => t_ + "endrá" ; --# notpresent
    VPB (Fut Ind Pl P1) => t_ + "endremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => t_ + "endréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => t_ + "endrán" ; --# notpresent
    VPB (Fut Sub Sg P1) => t_ + "uviere" ; --# notpresent
    VPB (Fut Sub Sg P2) => t_ + "uvieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => t_ + "uviere" ; --# notpresent
    VPB (Fut Sub Pl P1) => t_ + "uviéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => t_ + "uviereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => t_ + "uvieren" ; --# notpresent
    VPB (Cond Sg P1) => t_ + "endría" ; --# notpresent
    VPB (Cond Sg P2) => t_ + "endrías" ; --# notpresent
    VPB (Cond Sg P3) => t_ + "endría" ; --# notpresent
    VPB (Cond Pl P1) => t_ + "endríamos" ; --# notpresent
    VPB (Cond Pl P2) => t_ + "endríais" ; --# notpresent
    VPB (Cond Pl P3) => t_ + "endrían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => t_ + "en" ;
    VPB (Imper Sg P3) => t_ + "enga" ;
    VPB (Imper Pl P1) => t_ + "engamos" ;
    VPB (Imper Pl P2) => t_ + "ened" ;
    VPB (Imper Pl P3) => t_ + "engan" ;
    VPB (Pass Sg Masc) => t_ + "enido" ;
    VPB (Pass Sg Fem) => t_ + "enida" ;
    VPB (Pass Pl Masc) => t_ + "enidos" ;
    VPB (Pass Pl Fem) => t_ + "enidas"
    }
  } ;

oper cortar_5 : Str -> Verbum = \cortar ->
  let cort_ = Predef.tk 2 cortar in
 {s = table {
    VI Infn => cort_ + "ar" ;
    VI Ger => cort_ + "ando" ;
    VI Part => cort_ + "ado" ;
    VPB (Pres Ind Sg P1) => cort_ + "o" ;
    VPB (Pres Ind Sg P2) => cort_ + "as" ;
    VPB (Pres Ind Sg P3) => cort_ + "a" ;
    VPB (Pres Ind Pl P1) => cort_ + "amos" ;
    VPB (Pres Ind Pl P2) => cort_ + "áis" ;
    VPB (Pres Ind Pl P3) => cort_ + "an" ;
    VPB (Pres Sub Sg P1) => cort_ + "e" ;
    VPB (Pres Sub Sg P2) => cort_ + "es" ;
    VPB (Pres Sub Sg P3) => cort_ + "e" ;
    VPB (Pres Sub Pl P1) => cort_ + "emos" ;
    VPB (Pres Sub Pl P2) => cort_ + "éis" ;
    VPB (Pres Sub Pl P3) => cort_ + "en" ;
    VPB (Impf Ind Sg P1) => cort_ + "aba" ; --# notpresent
    VPB (Impf Ind Sg P2) => cort_ + "abas" ; --# notpresent
    VPB (Impf Ind Sg P3) => cort_ + "aba" ; --# notpresent
    VPB (Impf Ind Pl P1) => cort_ + "ábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => cort_ + "abais" ; --# notpresent
    VPB (Impf Ind Pl P3) => cort_ + "aban" ; --# notpresent
    VPB (Impf Sub Sg P1) => cort_ + "ara" ; --# notpresent
    VPB (Impf Sub Sg P2) => cort_ + "aras" ; --# notpresent
    VPB (Impf Sub Sg P3) => cort_ + "ara" ; --# notpresent
    VPB (Impf Sub Pl P1) => cort_ + "áramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => cort_ + "arais" ; --# notpresent
    VPB (Impf Sub Pl P3) => cort_ + "aran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => cort_ + "ase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => cort_ + "ases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => cort_ + "ase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => cort_ + "ásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => cort_ + "aseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => cort_ + "asen" ; --# notpresent
    VPB (Pret Sg P1) => cort_ + "é" ; --# notpresent
    VPB (Pret Sg P2) => cort_ + "aste" ; --# notpresent
    VPB (Pret Sg P3) => cort_ + "ó" ; --# notpresent
    VPB (Pret Pl P1) => cort_ + "amos" ; --# notpresent
    VPB (Pret Pl P2) => cort_ + "asteis" ; --# notpresent
    VPB (Pret Pl P3) => cort_ + "aron" ; --# notpresent
    VPB (Fut Ind Sg P1) => cort_ + "aré" ; --# notpresent
    VPB (Fut Ind Sg P2) => cort_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => cort_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => cort_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => cort_ + "aréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => cort_ + "arán" ; --# notpresent
    VPB (Fut Sub Sg P1) => cort_ + "are" ; --# notpresent
    VPB (Fut Sub Sg P2) => cort_ + "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => cort_ + "are" ; --# notpresent
    VPB (Fut Sub Pl P1) => cort_ + "áremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => cort_ + "areis" ; --# notpresent
    VPB (Fut Sub Pl P3) => cort_ + "aren" ; --# notpresent
    VPB (Cond Sg P1) => cort_ + "aría" ; --# notpresent
    VPB (Cond Sg P2) => cort_ + "arías" ; --# notpresent
    VPB (Cond Sg P3) => cort_ + "aría" ; --# notpresent
    VPB (Cond Pl P1) => cort_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => cort_ + "aríais" ; --# notpresent
    VPB (Cond Pl P3) => cort_ + "arían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => cort_ + "a" ;
    VPB (Imper Sg P3) => cort_ + "e" ;
    VPB (Imper Pl P1) => cort_ + "emos" ;
    VPB (Imper Pl P2) => cort_ + "ad" ;
    VPB (Imper Pl P3) => cort_ + "en" ;
    VPB (Pass Sg Masc) => cort_ + "ado" ;
    VPB (Pass Sg Fem) => cort_ + "ada" ;
    VPB (Pass Pl Masc) => cort_ + "ados" ;
    VPB (Pass Pl Fem) => cort_ + "adas"
    }
  } ;


oper deber_6 : Str -> Verbum = \deber ->
  let deb_ = Predef.tk 2 deber in
 {s = table {
    VI Infn => deb_ + "er" ;
    VI Ger => deb_ + "iendo" ;
    VI Part => deb_ + "ido" ;
    VPB (Pres Ind Sg P1) => deb_ + "o" ;
    VPB (Pres Ind Sg P2) => deb_ + "es" ;
    VPB (Pres Ind Sg P3) => deb_ + "e" ;
    VPB (Pres Ind Pl P1) => deb_ + "emos" ;
    VPB (Pres Ind Pl P2) => deb_ + "éis" ;
    VPB (Pres Ind Pl P3) => deb_ + "en" ;
    VPB (Pres Sub Sg P1) => deb_ + "a" ;
    VPB (Pres Sub Sg P2) => deb_ + "as" ;
    VPB (Pres Sub Sg P3) => deb_ + "a" ;
    VPB (Pres Sub Pl P1) => deb_ + "amos" ;
    VPB (Pres Sub Pl P2) => deb_ + "áis" ;
    VPB (Pres Sub Pl P3) => deb_ + "an" ;
    VPB (Impf Ind Sg P1) => deb_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => deb_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => deb_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => deb_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => deb_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => deb_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => deb_ + "iera" ; --# notpresent
    VPB (Impf Sub Sg P2) => deb_ + "ieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => deb_ + "iera" ; --# notpresent
    VPB (Impf Sub Pl P1) => deb_ + "iéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => deb_ + "ierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => deb_ + "ieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => deb_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => deb_ + "ieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => deb_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => deb_ + "iésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => deb_ + "ieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => deb_ + "iesen" ; --# notpresent
    VPB (Pret Sg P1) => deb_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => deb_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => deb_ + "ió" ; --# notpresent
    VPB (Pret Pl P1) => deb_ + "imos" ; --# notpresent
    VPB (Pret Pl P2) => deb_ + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => deb_ + "ieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => deb_ + "eré" ; --# notpresent
    VPB (Fut Ind Sg P2) => deb_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => deb_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => deb_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => deb_ + "eréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => deb_ + "erán" ; --# notpresent
    VPB (Fut Sub Sg P1) => deb_ + "iere" ; --# notpresent
    VPB (Fut Sub Sg P2) => deb_ + "ieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => deb_ + "iere" ; --# notpresent
    VPB (Fut Sub Pl P1) => deb_ + "iéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => deb_ + "iereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => deb_ + "ieren" ; --# notpresent
    VPB (Cond Sg P1) => deb_ + "ería" ; --# notpresent
    VPB (Cond Sg P2) => deb_ + "erías" ; --# notpresent
    VPB (Cond Sg P3) => deb_ + "ería" ; --# notpresent
    VPB (Cond Pl P1) => deb_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => deb_ + "eríais" ; --# notpresent
    VPB (Cond Pl P3) => deb_ + "erían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => deb_ + "e" ;
    VPB (Imper Sg P3) => deb_ + "a" ;
    VPB (Imper Pl P1) => deb_ + "amos" ;
    VPB (Imper Pl P2) => deb_ + "ed" ;
    VPB (Imper Pl P3) => deb_ + "an" ;
    VPB (Pass Sg Masc) => deb_ + "ido" ;
    VPB (Pass Sg Fem) => deb_ + "ida" ;
    VPB (Pass Pl Masc) => deb_ + "idos" ;
    VPB (Pass Pl Fem) => deb_ + "idas"
    }
  } ;
oper vivir_7 : Str -> Verbum = \vivir ->
  let viv_ = Predef.tk 2 vivir in
 {s = table {
    VI Infn => viv_ + "ir" ;
    VI Ger => viv_ + "iendo" ;
    VI Part => viv_ + "ido" ;
    VPB (Pres Ind Sg P1) => viv_ + "o" ;
    VPB (Pres Ind Sg P2) => viv_ + "es" ;
    VPB (Pres Ind Sg P3) => viv_ + "e" ;
    VPB (Pres Ind Pl P1) => viv_ + "imos" ;
    VPB (Pres Ind Pl P2) => viv_ + "ís" ;
    VPB (Pres Ind Pl P3) => viv_ + "en" ;
    VPB (Pres Sub Sg P1) => viv_ + "a" ;
    VPB (Pres Sub Sg P2) => viv_ + "as" ;
    VPB (Pres Sub Sg P3) => viv_ + "a" ;
    VPB (Pres Sub Pl P1) => viv_ + "amos" ;
    VPB (Pres Sub Pl P2) => viv_ + "áis" ;
    VPB (Pres Sub Pl P3) => viv_ + "an" ;
    VPB (Impf Ind Sg P1) => viv_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => viv_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => viv_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => viv_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => viv_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => viv_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => viv_ + "iera" ; --# notpresent
    VPB (Impf Sub Sg P2) => viv_ + "ieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => viv_ + "iera" ; --# notpresent
    VPB (Impf Sub Pl P1) => viv_ + "iéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => viv_ + "ierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => viv_ + "ieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => viv_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => viv_ + "ieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => viv_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => viv_ + "iésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => viv_ + "ieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => viv_ + "iesen" ; --# notpresent
    VPB (Pret Sg P1) => viv_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => viv_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => viv_ + "ió" ; --# notpresent
    VPB (Pret Pl P1) => viv_ + "imos" ; --# notpresent
    VPB (Pret Pl P2) => viv_ + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => viv_ + "ieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => viv_ + "iré" ; --# notpresent
    VPB (Fut Ind Sg P2) => viv_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => viv_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => viv_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => viv_ + "iréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => viv_ + "irán" ; --# notpresent
    VPB (Fut Sub Sg P1) => viv_ + "iere" ; --# notpresent
    VPB (Fut Sub Sg P2) => viv_ + "ieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => viv_ + "iere" ; --# notpresent
    VPB (Fut Sub Pl P1) => viv_ + "iéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => viv_ + "iereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => viv_ + "ieren" ; --# notpresent
    VPB (Cond Sg P1) => viv_ + "iría" ; --# notpresent
    VPB (Cond Sg P2) => viv_ + "irías" ; --# notpresent
    VPB (Cond Sg P3) => viv_ + "iría" ; --# notpresent
    VPB (Cond Pl P1) => viv_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => viv_ + "iríais" ; --# notpresent
    VPB (Cond Pl P3) => viv_ + "irían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => viv_ + "e" ;
    VPB (Imper Sg P3) => viv_ + "a" ;
    VPB (Imper Pl P1) => viv_ + "amos" ;
    VPB (Imper Pl P2) => viv_ + "id" ;
    VPB (Imper Pl P3) => viv_ + "an" ;
    VPB (Pass Sg Masc) => viv_ + "ido" ;
    VPB (Pass Sg Fem) => viv_ + "ida" ;
    VPB (Pass Pl Masc) => viv_ + "idos" ;
    VPB (Pass Pl Fem) => viv_ + "idas"
    }
  } ;
oper abolir_8 : Str -> Verbum = \abolir ->
  let abol_ = Predef.tk 2 abolir in
 {s = table {
    VI Infn => abol_ + "ir" ;
    VI Ger => abol_ + "iendo" ;
    VI Part => abol_ + "ido" ;
    VPB (Pres Ind Sg P1) => variants {} ;
    VPB (Pres Ind Sg P2) => variants {} ;
    VPB (Pres Ind Sg P3) => variants {} ;
    VPB (Pres Ind Pl P1) => abol_ + "imos" ;
    VPB (Pres Ind Pl P2) => abol_ + "ís" ;
    VPB (Pres Ind Pl P3) => variants {} ;
    VPB (Pres Sub Sg P1) => variants {} ;
    VPB (Pres Sub Sg P2) => variants {} ;
    VPB (Pres Sub Sg P3) => variants {} ;
    VPB (Pres Sub Pl P1) => variants {} ;
    VPB (Pres Sub Pl P2) => variants {} ;
    VPB (Pres Sub Pl P3) => variants {} ;
    VPB (Impf Ind Sg P1) => abol_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => abol_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => abol_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => abol_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => abol_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => abol_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => abol_ + "iera" ; --# notpresent
    VPB (Impf Sub Sg P2) => abol_ + "ieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => abol_ + "iera" ; --# notpresent
    VPB (Impf Sub Pl P1) => abol_ + "iéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => abol_ + "ierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => abol_ + "ieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => abol_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => abol_ + "ieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => abol_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => abol_ + "iésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => abol_ + "ieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => abol_ + "iesen" ; --# notpresent
    VPB (Pret Sg P1) => abol_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => abol_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => abol_ + "ió" ; --# notpresent
    VPB (Pret Pl P1) => abol_ + "imos" ; --# notpresent
    VPB (Pret Pl P2) => abol_ + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => abol_ + "ieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => abol_ + "iré" ; --# notpresent
    VPB (Fut Ind Sg P2) => abol_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => abol_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => abol_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => abol_ + "iréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => abol_ + "irán" ; --# notpresent
    VPB (Fut Sub Sg P1) => abol_ + "iere" ; --# notpresent
    VPB (Fut Sub Sg P2) => abol_ + "ieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => abol_ + "iere" ; --# notpresent
    VPB (Fut Sub Pl P1) => abol_ + "iéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => abol_ + "iereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => abol_ + "ieren" ; --# notpresent
    VPB (Cond Sg P1) => abol_ + "iría" ; --# notpresent
    VPB (Cond Sg P2) => abol_ + "irías" ; --# notpresent
    VPB (Cond Sg P3) => abol_ + "iría" ; --# notpresent
    VPB (Cond Pl P1) => abol_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => abol_ + "iríais" ; --# notpresent
    VPB (Cond Pl P3) => abol_ + "irían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => variants {} ;
    VPB (Imper Sg P3) => variants {} ;
    VPB (Imper Pl P1) => variants {} ;
    VPB (Imper Pl P2) => abol_ + "id" ;
    VPB (Imper Pl P3) => variants {} ;
    VPB (Pass Sg Masc) => abol_ + "ido" ;
    VPB (Pass Sg Fem) => abol_ + "ida" ;
    VPB (Pass Pl Masc) => abol_ + "idos" ;
    VPB (Pass Pl Fem) => abol_ + "idas"
    }
  } ;
oper actuar_9 : Str -> Verbum = \actuar ->
  let act_ = Predef.tk 3 actuar in
 {s = table {
    VI Infn => act_ + "uar" ;
    VI Ger => act_ + "uando" ;
    VI Part => act_ + "uado" ;
    VPB (Pres Ind Sg P1) => act_ + "úo" ;
    VPB (Pres Ind Sg P2) => act_ + "úas" ;
    VPB (Pres Ind Sg P3) => act_ + "úa" ;
    VPB (Pres Ind Pl P1) => act_ + "uamos" ;
    VPB (Pres Ind Pl P2) => act_ + "uáis" ;
    VPB (Pres Ind Pl P3) => act_ + "úan" ;
    VPB (Pres Sub Sg P1) => act_ + "úe" ;
    VPB (Pres Sub Sg P2) => act_ + "úes" ;
    VPB (Pres Sub Sg P3) => act_ + "úe" ;
    VPB (Pres Sub Pl P1) => act_ + "uemos" ;
    VPB (Pres Sub Pl P2) => act_ + "uéis" ;
    VPB (Pres Sub Pl P3) => act_ + "úen" ;
    VPB (Impf Ind Sg P1) => act_ + "uaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => act_ + "uabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => act_ + "uaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => act_ + "uábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => act_ + "uabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => act_ + "uaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => act_ + "uara" ; --# notpresent
    VPB (Impf Sub Sg P2) => act_ + "uaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => act_ + "uara" ; --# notpresent
    VPB (Impf Sub Pl P1) => act_ + "uáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => act_ + "uarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => act_ + "uaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => act_ + "uase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => act_ + "uases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => act_ + "uase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => act_ + "uásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => act_ + "uaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => act_ + "uasen" ; --# notpresent
    VPB (Pret Sg P1) => act_ + "ué" ; --# notpresent
    VPB (Pret Sg P2) => act_ + "uaste" ; --# notpresent
    VPB (Pret Sg P3) => act_ + "uó" ; --# notpresent
    VPB (Pret Pl P1) => act_ + "uamos" ; --# notpresent
    VPB (Pret Pl P2) => act_ + "uasteis" ; --# notpresent
    VPB (Pret Pl P3) => act_ + "uaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => act_ + "uaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => act_ + "uarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => act_ + "uará" ; --# notpresent
    VPB (Fut Ind Pl P1) => act_ + "uaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => act_ + "uaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => act_ + "uarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => act_ + "uare" ; --# notpresent
    VPB (Fut Sub Sg P2) => act_ + "uares" ; --# notpresent
    VPB (Fut Sub Sg P3) => act_ + "uare" ; --# notpresent
    VPB (Fut Sub Pl P1) => act_ + "uáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => act_ + "uareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => act_ + "uaren" ; --# notpresent
    VPB (Cond Sg P1) => act_ + "uaría" ; --# notpresent
    VPB (Cond Sg P2) => act_ + "uarías" ; --# notpresent
    VPB (Cond Sg P3) => act_ + "uaría" ; --# notpresent
    VPB (Cond Pl P1) => act_ + "uaríamos" ; --# notpresent
    VPB (Cond Pl P2) => act_ + "uaríais" ; --# notpresent
    VPB (Cond Pl P3) => act_ + "uarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => act_ + "úa" ;
    VPB (Imper Sg P3) => act_ + "úe" ;
    VPB (Imper Pl P1) => act_ + "uemos" ;
    VPB (Imper Pl P2) => act_ + "uad" ;
    VPB (Imper Pl P3) => act_ + "úen" ;
    VPB (Pass Sg Masc) => act_ + "uado" ;
    VPB (Pass Sg Fem) => act_ + "uada" ;
    VPB (Pass Pl Masc) => act_ + "uados" ;
    VPB (Pass Pl Fem) => act_ + "uadas"
    }
  } ;
oper adquirir_10 : Str -> Verbum = \adquirir ->
  let adqui_ = Predef.tk 3 adquirir in
 {s = table {
    VI Infn => adqui_ + "rir" ;
    VI Ger => adqui_ + "riendo" ;
    VI Part => adqui_ + "rido" ;
    VPB (Pres Ind Sg P1) => adqui_ + "ero" ;
    VPB (Pres Ind Sg P2) => adqui_ + "eres" ;
    VPB (Pres Ind Sg P3) => adqui_ + "ere" ;
    VPB (Pres Ind Pl P1) => adqui_ + "rimos" ;
    VPB (Pres Ind Pl P2) => adqui_ + "rís" ;
    VPB (Pres Ind Pl P3) => adqui_ + "eren" ;
    VPB (Pres Sub Sg P1) => adqui_ + "era" ;
    VPB (Pres Sub Sg P2) => adqui_ + "eras" ;
    VPB (Pres Sub Sg P3) => adqui_ + "era" ;
    VPB (Pres Sub Pl P1) => adqui_ + "ramos" ;
    VPB (Pres Sub Pl P2) => adqui_ + "ráis" ;
    VPB (Pres Sub Pl P3) => adqui_ + "eran" ;
    VPB (Impf Ind Sg P1) => adqui_ + "ría" ; --# notpresent
    VPB (Impf Ind Sg P2) => adqui_ + "rías" ; --# notpresent
    VPB (Impf Ind Sg P3) => adqui_ + "ría" ; --# notpresent
    VPB (Impf Ind Pl P1) => adqui_ + "ríamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => adqui_ + "ríais" ; --# notpresent
    VPB (Impf Ind Pl P3) => adqui_ + "rían" ; --# notpresent
    VPB (Impf Sub Sg P1) => adqui_ + "riera" ; --# notpresent
    VPB (Impf Sub Sg P2) => adqui_ + "rieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => adqui_ + "riera" ; --# notpresent
    VPB (Impf Sub Pl P1) => adqui_ + "riéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => adqui_ + "rierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => adqui_ + "rieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => adqui_ + "riese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => adqui_ + "rieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => adqui_ + "riese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => adqui_ + "riésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => adqui_ + "rieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => adqui_ + "riesen" ; --# notpresent
    VPB (Pret Sg P1) => adqui_ + "rí" ; --# notpresent
    VPB (Pret Sg P2) => adqui_ + "riste" ; --# notpresent
    VPB (Pret Sg P3) => adqui_ + "rió" ; --# notpresent
    VPB (Pret Pl P1) => adqui_ + "rimos" ; --# notpresent
    VPB (Pret Pl P2) => adqui_ + "risteis" ; --# notpresent
    VPB (Pret Pl P3) => adqui_ + "rieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => adqui_ + "riré" ; --# notpresent
    VPB (Fut Ind Sg P2) => adqui_ + "rirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => adqui_ + "rirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => adqui_ + "riremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => adqui_ + "riréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => adqui_ + "rirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => adqui_ + "riere" ; --# notpresent
    VPB (Fut Sub Sg P2) => adqui_ + "rieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => adqui_ + "riere" ; --# notpresent
    VPB (Fut Sub Pl P1) => adqui_ + "riéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => adqui_ + "riereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => adqui_ + "rieren" ; --# notpresent
    VPB (Cond Sg P1) => adqui_ + "riría" ; --# notpresent
    VPB (Cond Sg P2) => adqui_ + "rirías" ; --# notpresent
    VPB (Cond Sg P3) => adqui_ + "riría" ; --# notpresent
    VPB (Cond Pl P1) => adqui_ + "riríamos" ; --# notpresent
    VPB (Cond Pl P2) => adqui_ + "riríais" ; --# notpresent
    VPB (Cond Pl P3) => adqui_ + "rirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => adqui_ + "ere" ;
    VPB (Imper Sg P3) => adqui_ + "era" ;
    VPB (Imper Pl P1) => adqui_ + "ramos" ;
    VPB (Imper Pl P2) => adqui_ + "rid" ;
    VPB (Imper Pl P3) => adqui_ + "eran" ;
    VPB (Pass Sg Masc) => adqui_ + "rido" ;
    VPB (Pass Sg Fem) => adqui_ + "rida" ;
    VPB (Pass Pl Masc) => adqui_ + "ridos" ;
    VPB (Pass Pl Fem) => adqui_ + "ridas"
    }
  } ;
oper ahincar_11 : Str -> Verbum = \ahincar ->
  let ah_ = Predef.tk 5 ahincar in
 {s = table {
    VI Infn => ah_ + "incar" ;
    VI Ger => ah_ + "incando" ;
    VI Part => ah_ + "incado" ;
    VPB (Pres Ind Sg P1) => ah_ + "ínco" ;
    VPB (Pres Ind Sg P2) => ah_ + "íncas" ;
    VPB (Pres Ind Sg P3) => ah_ + "ínca" ;
    VPB (Pres Ind Pl P1) => ah_ + "incamos" ;
    VPB (Pres Ind Pl P2) => ah_ + "incáis" ;
    VPB (Pres Ind Pl P3) => ah_ + "íncan" ;
    VPB (Pres Sub Sg P1) => ah_ + "ínque" ;
    VPB (Pres Sub Sg P2) => ah_ + "ínques" ;
    VPB (Pres Sub Sg P3) => ah_ + "ínque" ;
    VPB (Pres Sub Pl P1) => ah_ + "inquemos" ;
    VPB (Pres Sub Pl P2) => ah_ + "inquéis" ;
    VPB (Pres Sub Pl P3) => ah_ + "ínquen" ;
    VPB (Impf Ind Sg P1) => ah_ + "incaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => ah_ + "incabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => ah_ + "incaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => ah_ + "incábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => ah_ + "incabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => ah_ + "incaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => ah_ + "incara" ; --# notpresent
    VPB (Impf Sub Sg P2) => ah_ + "incaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => ah_ + "incara" ; --# notpresent
    VPB (Impf Sub Pl P1) => ah_ + "incáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => ah_ + "incarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => ah_ + "incaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => ah_ + "incase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => ah_ + "incases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => ah_ + "incase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => ah_ + "incásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => ah_ + "incaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => ah_ + "incasen" ; --# notpresent
    VPB (Pret Sg P1) => ah_ + "inqué" ; --# notpresent
    VPB (Pret Sg P2) => ah_ + "incaste" ; --# notpresent
    VPB (Pret Sg P3) => ah_ + "incó" ; --# notpresent
    VPB (Pret Pl P1) => ah_ + "incamos" ; --# notpresent
    VPB (Pret Pl P2) => ah_ + "incasteis" ; --# notpresent
    VPB (Pret Pl P3) => ah_ + "incaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => ah_ + "incaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => ah_ + "incarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => ah_ + "incará" ; --# notpresent
    VPB (Fut Ind Pl P1) => ah_ + "incaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => ah_ + "incaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => ah_ + "incarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => ah_ + "incare" ; --# notpresent
    VPB (Fut Sub Sg P2) => ah_ + "incares" ; --# notpresent
    VPB (Fut Sub Sg P3) => ah_ + "incare" ; --# notpresent
    VPB (Fut Sub Pl P1) => ah_ + "incáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => ah_ + "incareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => ah_ + "incaren" ; --# notpresent
    VPB (Cond Sg P1) => ah_ + "incaría" ; --# notpresent
    VPB (Cond Sg P2) => ah_ + "incarías" ; --# notpresent
    VPB (Cond Sg P3) => ah_ + "incaría" ; --# notpresent
    VPB (Cond Pl P1) => ah_ + "incaríamos" ; --# notpresent
    VPB (Cond Pl P2) => ah_ + "incaríais" ; --# notpresent
    VPB (Cond Pl P3) => ah_ + "incarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => ah_ + "ínca" ;
    VPB (Imper Sg P3) => ah_ + "ínque" ;
    VPB (Imper Pl P1) => ah_ + "inquemos" ;
    VPB (Imper Pl P2) => ah_ + "incad" ;
    VPB (Imper Pl P3) => ah_ + "ínquen" ;
    VPB (Pass Sg Masc) => ah_ + "incado" ;
    VPB (Pass Sg Fem) => ah_ + "incada" ;
    VPB (Pass Pl Masc) => ah_ + "incados" ;
    VPB (Pass Pl Fem) => ah_ + "incadas"
    }
  } ;
oper airar_12 : Str -> Verbum = \airar ->
  let a_ = Predef.tk 4 airar in
 {s = table {
    VI Infn => a_ + "irar" ;
    VI Ger => a_ + "irando" ;
    VI Part => a_ + "irado" ;
    VPB (Pres Ind Sg P1) => a_ + "íro" ;
    VPB (Pres Ind Sg P2) => a_ + "íras" ;
    VPB (Pres Ind Sg P3) => a_ + "íra" ;
    VPB (Pres Ind Pl P1) => a_ + "iramos" ;
    VPB (Pres Ind Pl P2) => a_ + "iráis" ;
    VPB (Pres Ind Pl P3) => a_ + "íran" ;
    VPB (Pres Sub Sg P1) => a_ + "íre" ;
    VPB (Pres Sub Sg P2) => a_ + "íres" ;
    VPB (Pres Sub Sg P3) => a_ + "íre" ;
    VPB (Pres Sub Pl P1) => a_ + "iremos" ;
    VPB (Pres Sub Pl P2) => a_ + "iréis" ;
    VPB (Pres Sub Pl P3) => a_ + "íren" ;
    VPB (Impf Ind Sg P1) => a_ + "iraba" ; --# notpresent
    VPB (Impf Ind Sg P2) => a_ + "irabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => a_ + "iraba" ; --# notpresent
    VPB (Impf Ind Pl P1) => a_ + "irábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => a_ + "irabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => a_ + "iraban" ; --# notpresent
    VPB (Impf Sub Sg P1) => a_ + "irara" ; --# notpresent
    VPB (Impf Sub Sg P2) => a_ + "iraras" ; --# notpresent
    VPB (Impf Sub Sg P3) => a_ + "irara" ; --# notpresent
    VPB (Impf Sub Pl P1) => a_ + "iráramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => a_ + "irarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => a_ + "iraran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => a_ + "irase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => a_ + "irases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => a_ + "irase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => a_ + "irásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => a_ + "iraseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => a_ + "irasen" ; --# notpresent
    VPB (Pret Sg P1) => a_ + "iré" ; --# notpresent
    VPB (Pret Sg P2) => a_ + "iraste" ; --# notpresent
    VPB (Pret Sg P3) => a_ + "iró" ; --# notpresent
    VPB (Pret Pl P1) => a_ + "iramos" ; --# notpresent
    VPB (Pret Pl P2) => a_ + "irasteis" ; --# notpresent
    VPB (Pret Pl P3) => a_ + "iraron" ; --# notpresent
    VPB (Fut Ind Sg P1) => a_ + "iraré" ; --# notpresent
    VPB (Fut Ind Sg P2) => a_ + "irarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => a_ + "irará" ; --# notpresent
    VPB (Fut Ind Pl P1) => a_ + "iraremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => a_ + "iraréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => a_ + "irarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => a_ + "irare" ; --# notpresent
    VPB (Fut Sub Sg P2) => a_ + "irares" ; --# notpresent
    VPB (Fut Sub Sg P3) => a_ + "irare" ; --# notpresent
    VPB (Fut Sub Pl P1) => a_ + "iráremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => a_ + "irareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => a_ + "iraren" ; --# notpresent
    VPB (Cond Sg P1) => a_ + "iraría" ; --# notpresent
    VPB (Cond Sg P2) => a_ + "irarías" ; --# notpresent
    VPB (Cond Sg P3) => a_ + "iraría" ; --# notpresent
    VPB (Cond Pl P1) => a_ + "iraríamos" ; --# notpresent
    VPB (Cond Pl P2) => a_ + "iraríais" ; --# notpresent
    VPB (Cond Pl P3) => a_ + "irarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => a_ + "íra" ;
    VPB (Imper Sg P3) => a_ + "íre" ;
    VPB (Imper Pl P1) => a_ + "iremos" ;
    VPB (Imper Pl P2) => a_ + "irad" ;
    VPB (Imper Pl P3) => a_ + "íren" ;
    VPB (Pass Sg Masc) => a_ + "irado" ;
    VPB (Pass Sg Fem) => a_ + "irada" ;
    VPB (Pass Pl Masc) => a_ + "irados" ;
    VPB (Pass Pl Fem) => a_ + "iradas"
    }
  } ;
oper andar_13 : Str -> Verbum = \andar ->
  let and_ = Predef.tk 2 andar in
 {s = table {
    VI Infn => and_ + "ar" ;
    VI Ger => and_ + "ando" ;
    VI Part => and_ + "ado" ;
    VPB (Pres Ind Sg P1) => and_ + "o" ;
    VPB (Pres Ind Sg P2) => and_ + "as" ;
    VPB (Pres Ind Sg P3) => and_ + "a" ;
    VPB (Pres Ind Pl P1) => and_ + "amos" ;
    VPB (Pres Ind Pl P2) => and_ + "áis" ;
    VPB (Pres Ind Pl P3) => and_ + "an" ;
    VPB (Pres Sub Sg P1) => and_ + "e" ;
    VPB (Pres Sub Sg P2) => and_ + "es" ;
    VPB (Pres Sub Sg P3) => and_ + "e" ;
    VPB (Pres Sub Pl P1) => and_ + "emos" ;
    VPB (Pres Sub Pl P2) => and_ + "éis" ;
    VPB (Pres Sub Pl P3) => and_ + "en" ;
    VPB (Impf Ind Sg P1) => and_ + "aba" ; --# notpresent
    VPB (Impf Ind Sg P2) => and_ + "abas" ; --# notpresent
    VPB (Impf Ind Sg P3) => and_ + "aba" ; --# notpresent
    VPB (Impf Ind Pl P1) => and_ + "ábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => and_ + "abais" ; --# notpresent
    VPB (Impf Ind Pl P3) => and_ + "aban" ; --# notpresent
    VPB (Impf Sub Sg P1) => and_ + "uviera" ; --# notpresent
    VPB (Impf Sub Sg P2) => and_ + "uvieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => and_ + "uviera" ; --# notpresent
    VPB (Impf Sub Pl P1) => and_ + "uviéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => and_ + "uvierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => and_ + "uvieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => and_ + "uviese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => and_ + "uvieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => and_ + "uviese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => and_ + "uviésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => and_ + "uvieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => and_ + "uviesen" ; --# notpresent
    VPB (Pret Sg P1) => and_ + "uve" ; --# notpresent
    VPB (Pret Sg P2) => and_ + "uviste" ; --# notpresent
    VPB (Pret Sg P3) => and_ + "uvo" ; --# notpresent
    VPB (Pret Pl P1) => and_ + "uvimos" ; --# notpresent
    VPB (Pret Pl P2) => and_ + "uvisteis" ; --# notpresent
    VPB (Pret Pl P3) => and_ + "uvieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => and_ + "aré" ; --# notpresent
    VPB (Fut Ind Sg P2) => and_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => and_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => and_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => and_ + "aréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => and_ + "arán" ; --# notpresent
    VPB (Fut Sub Sg P1) => and_ + "uviere" ; --# notpresent
    VPB (Fut Sub Sg P2) => and_ + "uvieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => and_ + "uviere" ; --# notpresent
    VPB (Fut Sub Pl P1) => and_ + "uviéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => and_ + "uviereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => and_ + "uvieren" ; --# notpresent
    VPB (Cond Sg P1) => and_ + "aría" ; --# notpresent
    VPB (Cond Sg P2) => and_ + "arías" ; --# notpresent
    VPB (Cond Sg P3) => and_ + "aría" ; --# notpresent
    VPB (Cond Pl P1) => and_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => and_ + "aríais" ; --# notpresent
    VPB (Cond Pl P3) => and_ + "arían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => and_ + "a" ;
    VPB (Imper Sg P3) => and_ + "e" ;
    VPB (Imper Pl P1) => and_ + "emos" ;
    VPB (Imper Pl P2) => and_ + "ad" ;
    VPB (Imper Pl P3) => and_ + "en" ;
    VPB (Pass Sg Masc) => and_ + "ado" ;
    VPB (Pass Sg Fem) => and_ + "ada" ;
    VPB (Pass Pl Masc) => and_ + "ados" ;
    VPB (Pass Pl Fem) => and_ + "adas"
    }
  } ;
oper asir_14 : Str -> Verbum = \asir ->
  let as_ = Predef.tk 2 asir in
 {s = table {
    VI Infn => as_ + "ir" ;
    VI Ger => as_ + "iendo" ;
    VI Part => as_ + "ido" ;
    VPB (Pres Ind Sg P1) => as_ + "go" ;
    VPB (Pres Ind Sg P2) => as_ + "es" ;
    VPB (Pres Ind Sg P3) => as_ + "e" ;
    VPB (Pres Ind Pl P1) => as_ + "imos" ;
    VPB (Pres Ind Pl P2) => as_ + "ís" ;
    VPB (Pres Ind Pl P3) => as_ + "en" ;
    VPB (Pres Sub Sg P1) => as_ + "ga" ;
    VPB (Pres Sub Sg P2) => as_ + "gas" ;
    VPB (Pres Sub Sg P3) => as_ + "ga" ;
    VPB (Pres Sub Pl P1) => as_ + "gamos" ;
    VPB (Pres Sub Pl P2) => as_ + "gáis" ;
    VPB (Pres Sub Pl P3) => as_ + "gan" ;
    VPB (Impf Ind Sg P1) => as_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => as_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => as_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => as_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => as_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => as_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => as_ + "iera" ; --# notpresent
    VPB (Impf Sub Sg P2) => as_ + "ieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => as_ + "iera" ; --# notpresent
    VPB (Impf Sub Pl P1) => as_ + "iéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => as_ + "ierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => as_ + "ieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => as_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => as_ + "ieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => as_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => as_ + "iésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => as_ + "ieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => as_ + "iesen" ; --# notpresent
    VPB (Pret Sg P1) => as_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => as_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => as_ + "ió" ; --# notpresent
    VPB (Pret Pl P1) => as_ + "imos" ; --# notpresent
    VPB (Pret Pl P2) => as_ + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => as_ + "ieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => as_ + "iré" ; --# notpresent
    VPB (Fut Ind Sg P2) => as_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => as_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => as_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => as_ + "iréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => as_ + "irán" ; --# notpresent
    VPB (Fut Sub Sg P1) => as_ + "iere" ; --# notpresent
    VPB (Fut Sub Sg P2) => as_ + "ieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => as_ + "iere" ; --# notpresent
    VPB (Fut Sub Pl P1) => as_ + "iéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => as_ + "iereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => as_ + "ieren" ; --# notpresent
    VPB (Cond Sg P1) => as_ + "iría" ; --# notpresent
    VPB (Cond Sg P2) => as_ + "irías" ; --# notpresent
    VPB (Cond Sg P3) => as_ + "iría" ; --# notpresent
    VPB (Cond Pl P1) => as_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => as_ + "iríais" ; --# notpresent
    VPB (Cond Pl P3) => as_ + "irían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => as_ + "e" ;
    VPB (Imper Sg P3) => as_ + "ga" ;
    VPB (Imper Pl P1) => as_ + "gamos" ;
    VPB (Imper Pl P2) => as_ + "id" ;
    VPB (Imper Pl P3) => as_ + "gan" ;
    VPB (Pass Sg Masc) => as_ + "ido" ;
    VPB (Pass Sg Fem) => as_ + "ida" ;
    VPB (Pass Pl Masc) => as_ + "idos" ;
    VPB (Pass Pl Fem) => as_ + "idas"
    }
  } ;
oper aullar_15 : Str -> Verbum = \aullar ->
  let a_ = Predef.tk 5 aullar in
 {s = table {
    VI Infn => a_ + "ullar" ;
    VI Ger => a_ + "ullando" ;
    VI Part => a_ + "ullado" ;
    VPB (Pres Ind Sg P1) => a_ + "úllo" ;
    VPB (Pres Ind Sg P2) => a_ + "úllas" ;
    VPB (Pres Ind Sg P3) => a_ + "úlla" ;
    VPB (Pres Ind Pl P1) => a_ + "ullamos" ;
    VPB (Pres Ind Pl P2) => a_ + "ulláis" ;
    VPB (Pres Ind Pl P3) => a_ + "úllan" ;
    VPB (Pres Sub Sg P1) => a_ + "úlle" ;
    VPB (Pres Sub Sg P2) => a_ + "úlles" ;
    VPB (Pres Sub Sg P3) => a_ + "úlle" ;
    VPB (Pres Sub Pl P1) => a_ + "ullemos" ;
    VPB (Pres Sub Pl P2) => a_ + "ulléis" ;
    VPB (Pres Sub Pl P3) => a_ + "úllen" ;
    VPB (Impf Ind Sg P1) => a_ + "ullaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => a_ + "ullabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => a_ + "ullaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => a_ + "ullábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => a_ + "ullabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => a_ + "ullaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => a_ + "ullara" ; --# notpresent
    VPB (Impf Sub Sg P2) => a_ + "ullaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => a_ + "ullara" ; --# notpresent
    VPB (Impf Sub Pl P1) => a_ + "ulláramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => a_ + "ullarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => a_ + "ullaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => a_ + "ullase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => a_ + "ullases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => a_ + "ullase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => a_ + "ullásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => a_ + "ullaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => a_ + "ullasen" ; --# notpresent
    VPB (Pret Sg P1) => a_ + "ullé" ; --# notpresent
    VPB (Pret Sg P2) => a_ + "ullaste" ; --# notpresent
    VPB (Pret Sg P3) => a_ + "ulló" ; --# notpresent
    VPB (Pret Pl P1) => a_ + "ullamos" ; --# notpresent
    VPB (Pret Pl P2) => a_ + "ullasteis" ; --# notpresent
    VPB (Pret Pl P3) => a_ + "ullaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => a_ + "ullaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => a_ + "ullarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => a_ + "ullará" ; --# notpresent
    VPB (Fut Ind Pl P1) => a_ + "ullaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => a_ + "ullaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => a_ + "ullarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => a_ + "ullare" ; --# notpresent
    VPB (Fut Sub Sg P2) => a_ + "ullares" ; --# notpresent
    VPB (Fut Sub Sg P3) => a_ + "ullare" ; --# notpresent
    VPB (Fut Sub Pl P1) => a_ + "ulláremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => a_ + "ullareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => a_ + "ullaren" ; --# notpresent
    VPB (Cond Sg P1) => a_ + "ullaría" ; --# notpresent
    VPB (Cond Sg P2) => a_ + "ullarías" ; --# notpresent
    VPB (Cond Sg P3) => a_ + "ullaría" ; --# notpresent
    VPB (Cond Pl P1) => a_ + "ullaríamos" ; --# notpresent
    VPB (Cond Pl P2) => a_ + "ullaríais" ; --# notpresent
    VPB (Cond Pl P3) => a_ + "ullarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => a_ + "úlla" ;
    VPB (Imper Sg P3) => a_ + "úlle" ;
    VPB (Imper Pl P1) => a_ + "ullemos" ;
    VPB (Imper Pl P2) => a_ + "ullad" ;
    VPB (Imper Pl P3) => a_ + "úllen" ;
    VPB (Pass Sg Masc) => a_ + "ullado" ;
    VPB (Pass Sg Fem) => a_ + "ullada" ;
    VPB (Pass Pl Masc) => a_ + "ullados" ;
    VPB (Pass Pl Fem) => a_ + "ulladas"
    }
  } ;
oper avergonzar_16 : Str -> Verbum = \avergonzar ->
  let averg_ = Predef.tk 5 avergonzar in
 {s = table {
    VI Infn => averg_ + "onzar" ;
    VI Ger => averg_ + "onzando" ;
    VI Part => averg_ + "onzado" ;
    VPB (Pres Ind Sg P1) => averg_ + "üenzo" ;
    VPB (Pres Ind Sg P2) => averg_ + "üenzas" ;
    VPB (Pres Ind Sg P3) => averg_ + "üenza" ;
    VPB (Pres Ind Pl P1) => averg_ + "onzamos" ;
    VPB (Pres Ind Pl P2) => averg_ + "onzáis" ;
    VPB (Pres Ind Pl P3) => averg_ + "üenzan" ;
    VPB (Pres Sub Sg P1) => averg_ + "üence" ;
    VPB (Pres Sub Sg P2) => averg_ + "üences" ;
    VPB (Pres Sub Sg P3) => averg_ + "üence" ;
    VPB (Pres Sub Pl P1) => averg_ + "oncemos" ;
    VPB (Pres Sub Pl P2) => averg_ + "oncéis" ;
    VPB (Pres Sub Pl P3) => averg_ + "üencen" ;
    VPB (Impf Ind Sg P1) => averg_ + "onzaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => averg_ + "onzabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => averg_ + "onzaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => averg_ + "onzábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => averg_ + "onzabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => averg_ + "onzaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => averg_ + "onzara" ; --# notpresent
    VPB (Impf Sub Sg P2) => averg_ + "onzaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => averg_ + "onzara" ; --# notpresent
    VPB (Impf Sub Pl P1) => averg_ + "onzáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => averg_ + "onzarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => averg_ + "onzaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => averg_ + "onzase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => averg_ + "onzases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => averg_ + "onzase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => averg_ + "onzásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => averg_ + "onzaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => averg_ + "onzasen" ; --# notpresent
    VPB (Pret Sg P1) => averg_ + "oncé" ; --# notpresent
    VPB (Pret Sg P2) => averg_ + "onzaste" ; --# notpresent
    VPB (Pret Sg P3) => averg_ + "onzó" ; --# notpresent
    VPB (Pret Pl P1) => averg_ + "onzamos" ; --# notpresent
    VPB (Pret Pl P2) => averg_ + "onzasteis" ; --# notpresent
    VPB (Pret Pl P3) => averg_ + "onzaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => averg_ + "onzaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => averg_ + "onzarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => averg_ + "onzará" ; --# notpresent
    VPB (Fut Ind Pl P1) => averg_ + "onzaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => averg_ + "onzaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => averg_ + "onzarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => averg_ + "onzare" ; --# notpresent
    VPB (Fut Sub Sg P2) => averg_ + "onzares" ; --# notpresent
    VPB (Fut Sub Sg P3) => averg_ + "onzare" ; --# notpresent
    VPB (Fut Sub Pl P1) => averg_ + "onzáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => averg_ + "onzareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => averg_ + "onzaren" ; --# notpresent
    VPB (Cond Sg P1) => averg_ + "onzaría" ; --# notpresent
    VPB (Cond Sg P2) => averg_ + "onzarías" ; --# notpresent
    VPB (Cond Sg P3) => averg_ + "onzaría" ; --# notpresent
    VPB (Cond Pl P1) => averg_ + "onzaríamos" ; --# notpresent
    VPB (Cond Pl P2) => averg_ + "onzaríais" ; --# notpresent
    VPB (Cond Pl P3) => averg_ + "onzarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => averg_ + "üenza" ;
    VPB (Imper Sg P3) => averg_ + "üence" ;
    VPB (Imper Pl P1) => averg_ + "oncemos" ;
    VPB (Imper Pl P2) => averg_ + "onzad" ;
    VPB (Imper Pl P3) => averg_ + "üencen" ;
    VPB (Pass Sg Masc) => averg_ + "onzado" ;
    VPB (Pass Sg Fem) => averg_ + "onzada" ;
    VPB (Pass Pl Masc) => averg_ + "onzados" ;
    VPB (Pass Pl Fem) => averg_ + "onzadas"
    }
  } ;
oper averiguar_17 : Str -> Verbum = \averiguar ->
  let averig_ = Predef.tk 3 averiguar in
 {s = table {
    VI Infn => averig_ + "uar" ;
    VI Ger => averig_ + "uando" ;
    VI Part => averig_ + "uado" ;
    VPB (Pres Ind Sg P1) => averig_ + "uo" ;
    VPB (Pres Ind Sg P2) => averig_ + "uas" ;
    VPB (Pres Ind Sg P3) => averig_ + "ua" ;
    VPB (Pres Ind Pl P1) => averig_ + "uamos" ;
    VPB (Pres Ind Pl P2) => averig_ + "uáis" ;
    VPB (Pres Ind Pl P3) => averig_ + "uan" ;
    VPB (Pres Sub Sg P1) => averig_ + "üe" ;
    VPB (Pres Sub Sg P2) => averig_ + "ües" ;
    VPB (Pres Sub Sg P3) => averig_ + "üe" ;
    VPB (Pres Sub Pl P1) => averig_ + "üemos" ;
    VPB (Pres Sub Pl P2) => averig_ + "üéis" ;
    VPB (Pres Sub Pl P3) => averig_ + "üen" ;
    VPB (Impf Ind Sg P1) => averig_ + "uaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => averig_ + "uabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => averig_ + "uaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => averig_ + "uábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => averig_ + "uabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => averig_ + "uaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => averig_ + "uara" ; --# notpresent
    VPB (Impf Sub Sg P2) => averig_ + "uaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => averig_ + "uara" ; --# notpresent
    VPB (Impf Sub Pl P1) => averig_ + "uáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => averig_ + "uarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => averig_ + "uaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => averig_ + "uase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => averig_ + "uases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => averig_ + "uase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => averig_ + "uásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => averig_ + "uaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => averig_ + "uasen" ; --# notpresent
    VPB (Pret Sg P1) => averig_ + "üé" ; --# notpresent
    VPB (Pret Sg P2) => averig_ + "uaste" ; --# notpresent
    VPB (Pret Sg P3) => averig_ + "uó" ; --# notpresent
    VPB (Pret Pl P1) => averig_ + "uamos" ; --# notpresent
    VPB (Pret Pl P2) => averig_ + "uasteis" ; --# notpresent
    VPB (Pret Pl P3) => averig_ + "uaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => averig_ + "uaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => averig_ + "uarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => averig_ + "uará" ; --# notpresent
    VPB (Fut Ind Pl P1) => averig_ + "uaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => averig_ + "uaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => averig_ + "uarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => averig_ + "uare" ; --# notpresent
    VPB (Fut Sub Sg P2) => averig_ + "uares" ; --# notpresent
    VPB (Fut Sub Sg P3) => averig_ + "uare" ; --# notpresent
    VPB (Fut Sub Pl P1) => averig_ + "uáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => averig_ + "uareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => averig_ + "uaren" ; --# notpresent
    VPB (Cond Sg P1) => averig_ + "uaría" ; --# notpresent
    VPB (Cond Sg P2) => averig_ + "uarías" ; --# notpresent
    VPB (Cond Sg P3) => averig_ + "uaría" ; --# notpresent
    VPB (Cond Pl P1) => averig_ + "uaríamos" ; --# notpresent
    VPB (Cond Pl P2) => averig_ + "uaríais" ; --# notpresent
    VPB (Cond Pl P3) => averig_ + "uarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => averig_ + "ua" ;
    VPB (Imper Sg P3) => averig_ + "üe" ;
    VPB (Imper Pl P1) => averig_ + "üemos" ;
    VPB (Imper Pl P2) => averig_ + "uad" ;
    VPB (Imper Pl P3) => averig_ + "üen" ;
    VPB (Pass Sg Masc) => averig_ + "uado" ;
    VPB (Pass Sg Fem) => averig_ + "uada" ;
    VPB (Pass Pl Masc) => averig_ + "uados" ;
    VPB (Pass Pl Fem) => averig_ + "uadas"
    }
  } ;
oper bruñir_18 : Str -> Verbum = \bruñir ->
  let bruñ_ = Predef.tk 2 bruñir in
 {s = table {
    VI Infn => bruñ_ + "ir" ;
    VI Ger => bruñ_ + "endo" ;
    VI Part => bruñ_ + "ido" ;
    VPB (Pres Ind Sg P1) => bruñ_ + "o" ;
    VPB (Pres Ind Sg P2) => bruñ_ + "es" ;
    VPB (Pres Ind Sg P3) => bruñ_ + "e" ;
    VPB (Pres Ind Pl P1) => bruñ_ + "imos" ;
    VPB (Pres Ind Pl P2) => bruñ_ + "ís" ;
    VPB (Pres Ind Pl P3) => bruñ_ + "en" ;
    VPB (Pres Sub Sg P1) => bruñ_ + "a" ;
    VPB (Pres Sub Sg P2) => bruñ_ + "as" ;
    VPB (Pres Sub Sg P3) => bruñ_ + "a" ;
    VPB (Pres Sub Pl P1) => bruñ_ + "amos" ;
    VPB (Pres Sub Pl P2) => bruñ_ + "áis" ;
    VPB (Pres Sub Pl P3) => bruñ_ + "an" ;
    VPB (Impf Ind Sg P1) => bruñ_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => bruñ_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => bruñ_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => bruñ_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => bruñ_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => bruñ_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => bruñ_ + "era" ; --# notpresent
    VPB (Impf Sub Sg P2) => bruñ_ + "eras" ; --# notpresent
    VPB (Impf Sub Sg P3) => bruñ_ + "era" ; --# notpresent
    VPB (Impf Sub Pl P1) => bruñ_ + "éramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => bruñ_ + "erais" ; --# notpresent
    VPB (Impf Sub Pl P3) => bruñ_ + "eran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => bruñ_ + "ese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => bruñ_ + "eses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => bruñ_ + "ese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => bruñ_ + "ésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => bruñ_ + "eseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => bruñ_ + "esen" ; --# notpresent
    VPB (Pret Sg P1) => bruñ_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => bruñ_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => bruñ_ + "ó" ; --# notpresent
    VPB (Pret Pl P1) => bruñ_ + "imos" ; --# notpresent
    VPB (Pret Pl P2) => bruñ_ + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => bruñ_ + "eron" ; --# notpresent
    VPB (Fut Ind Sg P1) => bruñ_ + "iré" ; --# notpresent
    VPB (Fut Ind Sg P2) => bruñ_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => bruñ_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => bruñ_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => bruñ_ + "iréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => bruñ_ + "irán" ; --# notpresent
    VPB (Fut Sub Sg P1) => bruñ_ + "ere" ; --# notpresent
    VPB (Fut Sub Sg P2) => bruñ_ + "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => bruñ_ + "ere" ; --# notpresent
    VPB (Fut Sub Pl P1) => bruñ_ + "éremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => bruñ_ + "ereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => bruñ_ + "eren" ; --# notpresent
    VPB (Cond Sg P1) => bruñ_ + "iría" ; --# notpresent
    VPB (Cond Sg P2) => bruñ_ + "irías" ; --# notpresent
    VPB (Cond Sg P3) => bruñ_ + "iría" ; --# notpresent
    VPB (Cond Pl P1) => bruñ_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => bruñ_ + "iríais" ; --# notpresent
    VPB (Cond Pl P3) => bruñ_ + "irían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => bruñ_ + "e" ;
    VPB (Imper Sg P3) => bruñ_ + "a" ;
    VPB (Imper Pl P1) => bruñ_ + "amos" ;
    VPB (Imper Pl P2) => bruñ_ + "id" ;
    VPB (Imper Pl P3) => bruñ_ + "an" ;
    VPB (Pass Sg Masc) => bruñ_ + "ido" ;
    VPB (Pass Sg Fem) => bruñ_ + "ida" ;
    VPB (Pass Pl Masc) => bruñ_ + "idos" ;
    VPB (Pass Pl Fem) => bruñ_ + "idas"
    }
  } ;
oper caber_19 : Str -> Verbum = \caber ->
  let x_ = Predef.tk 5 caber in
 {s = table {
    VI Infn => x_ + "caber" ;
    VI Ger => x_ + "cabiendo" ;
    VI Part => x_ + "cabido" ;
    VPB (Pres Ind Sg P1) => x_ + "quepo" ;
    VPB (Pres Ind Sg P2) => x_ + "cabes" ;
    VPB (Pres Ind Sg P3) => x_ + "cabe" ;
    VPB (Pres Ind Pl P1) => x_ + "cabemos" ;
    VPB (Pres Ind Pl P2) => x_ + "cabéis" ;
    VPB (Pres Ind Pl P3) => x_ + "caben" ;
    VPB (Pres Sub Sg P1) => x_ + "quepa" ;
    VPB (Pres Sub Sg P2) => x_ + "quepas" ;
    VPB (Pres Sub Sg P3) => x_ + "quepa" ;
    VPB (Pres Sub Pl P1) => x_ + "quepamos" ;
    VPB (Pres Sub Pl P2) => x_ + "quepáis" ;
    VPB (Pres Sub Pl P3) => x_ + "quepan" ;
    VPB (Impf Ind Sg P1) => x_ + "cabía" ; --# notpresent
    VPB (Impf Ind Sg P2) => x_ + "cabías" ; --# notpresent
    VPB (Impf Ind Sg P3) => x_ + "cabía" ; --# notpresent
    VPB (Impf Ind Pl P1) => x_ + "cabíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => x_ + "cabíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => x_ + "cabían" ; --# notpresent
    VPB (Impf Sub Sg P1) => x_ + "cupiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => x_ + "cupieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => x_ + "cupiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => x_ + "cupiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => x_ + "cupierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => x_ + "cupieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => x_ + "cupiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => x_ + "cupieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => x_ + "cupiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => x_ + "cupiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => x_ + "cupieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => x_ + "cupiesen" ; --# notpresent
    VPB (Pret Sg P1) => x_ + "cupe" ; --# notpresent
    VPB (Pret Sg P2) => x_ + "cupiste" ; --# notpresent
    VPB (Pret Sg P3) => x_ + "cupo" ; --# notpresent
    VPB (Pret Pl P1) => x_ + "cupimos" ; --# notpresent
    VPB (Pret Pl P2) => x_ + "cupisteis" ; --# notpresent
    VPB (Pret Pl P3) => x_ + "cupieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "cabré" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "cabrás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "cabrá" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "cabremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "cabréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "cabrán" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "cupiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "cupieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "cupiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "cupiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "cupiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "cupieren" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "cabría" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "cabrías" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "cabría" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "cabríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "cabríais" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "cabrían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => x_ + "cabe" ;
    VPB (Imper Sg P3) => x_ + "quepa" ;
    VPB (Imper Pl P1) => x_ + "quepamos" ;
    VPB (Imper Pl P2) => x_ + "cabed" ;
    VPB (Imper Pl P3) => x_ + "quepan" ;
    VPB (Pass Sg Masc) => x_ + "cabido" ;
    VPB (Pass Sg Fem) => x_ + "cabida" ;
    VPB (Pass Pl Masc) => x_ + "cabidos" ;
    VPB (Pass Pl Fem) => x_ + "cabidas"
    }
  } ;
oper caer_20 : Str -> Verbum = \caer ->
  let ca_ = Predef.tk 2 caer in
 {s = table {
    VI Infn => ca_ + "er" ;
    VI Ger => ca_ + "yendo" ;
    VI Part => ca_ + "ído" ;
    VPB (Pres Ind Sg P1) => ca_ + "igo" ;
    VPB (Pres Ind Sg P2) => ca_ + "es" ;
    VPB (Pres Ind Sg P3) => ca_ + "e" ;
    VPB (Pres Ind Pl P1) => ca_ + "emos" ;
    VPB (Pres Ind Pl P2) => ca_ + "éis" ;
    VPB (Pres Ind Pl P3) => ca_ + "en" ;
    VPB (Pres Sub Sg P1) => ca_ + "iga" ;
    VPB (Pres Sub Sg P2) => ca_ + "igas" ;
    VPB (Pres Sub Sg P3) => ca_ + "iga" ;
    VPB (Pres Sub Pl P1) => ca_ + "igamos" ;
    VPB (Pres Sub Pl P2) => ca_ + "igáis" ;
    VPB (Pres Sub Pl P3) => ca_ + "igan" ;
    VPB (Impf Ind Sg P1) => ca_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => ca_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => ca_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => ca_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => ca_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => ca_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => ca_ + "yera" ; --# notpresent
    VPB (Impf Sub Sg P2) => ca_ + "yeras" ; --# notpresent
    VPB (Impf Sub Sg P3) => ca_ + "yera" ; --# notpresent
    VPB (Impf Sub Pl P1) => ca_ + "yéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => ca_ + "yerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => ca_ + "yeran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => ca_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => ca_ + "yeses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => ca_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => ca_ + "yésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => ca_ + "yeseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => ca_ + "yesen" ; --# notpresent
    VPB (Pret Sg P1) => ca_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => ca_ + "íste" ; --# notpresent
    VPB (Pret Sg P3) => ca_ + "yó" ; --# notpresent
    VPB (Pret Pl P1) => ca_ + "ímos" ; --# notpresent
    VPB (Pret Pl P2) => ca_ + "ísteis" ; --# notpresent
    VPB (Pret Pl P3) => ca_ + "yeron" ; --# notpresent
    VPB (Fut Ind Sg P1) => ca_ + "eré" ; --# notpresent
    VPB (Fut Ind Sg P2) => ca_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => ca_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => ca_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => ca_ + "eréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => ca_ + "erán" ; --# notpresent
    VPB (Fut Sub Sg P1) => ca_ + "yere" ; --# notpresent
    VPB (Fut Sub Sg P2) => ca_ + "yeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => ca_ + "yere" ; --# notpresent
    VPB (Fut Sub Pl P1) => ca_ + "yéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => ca_ + "yereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => ca_ + "yeren" ; --# notpresent
    VPB (Cond Sg P1) => ca_ + "ería" ; --# notpresent
    VPB (Cond Sg P2) => ca_ + "erías" ; --# notpresent
    VPB (Cond Sg P3) => ca_ + "ería" ; --# notpresent
    VPB (Cond Pl P1) => ca_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => ca_ + "eríais" ; --# notpresent
    VPB (Cond Pl P3) => ca_ + "erían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => ca_ + "e" ;
    VPB (Imper Sg P3) => ca_ + "iga" ;
    VPB (Imper Pl P1) => ca_ + "igamos" ;
    VPB (Imper Pl P2) => ca_ + "ed" ;
    VPB (Imper Pl P3) => ca_ + "igan" ;
    VPB (Pass Sg Masc) => ca_ + "ído" ;
    VPB (Pass Sg Fem) => ca_ + "ída" ;
    VPB (Pass Pl Masc) => ca_ + "ídos" ;
    VPB (Pass Pl Fem) => ca_ + "ídas"
    }
  } ;
oper cazar_21 : Str -> Verbum = \cazar ->
  let ca_ = Predef.tk 3 cazar in
 {s = table {
    VI Infn => ca_ + "zar" ;
    VI Ger => ca_ + "zando" ;
    VI Part => ca_ + "zado" ;
    VPB (Pres Ind Sg P1) => ca_ + "zo" ;
    VPB (Pres Ind Sg P2) => ca_ + "zas" ;
    VPB (Pres Ind Sg P3) => ca_ + "za" ;
    VPB (Pres Ind Pl P1) => ca_ + "zamos" ;
    VPB (Pres Ind Pl P2) => ca_ + "záis" ;
    VPB (Pres Ind Pl P3) => ca_ + "zan" ;
    VPB (Pres Sub Sg P1) => ca_ + "ce" ;
    VPB (Pres Sub Sg P2) => ca_ + "ces" ;
    VPB (Pres Sub Sg P3) => ca_ + "ce" ;
    VPB (Pres Sub Pl P1) => ca_ + "cemos" ;
    VPB (Pres Sub Pl P2) => ca_ + "céis" ;
    VPB (Pres Sub Pl P3) => ca_ + "cen" ;
    VPB (Impf Ind Sg P1) => ca_ + "zaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => ca_ + "zabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => ca_ + "zaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => ca_ + "zábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => ca_ + "zabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => ca_ + "zaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => ca_ + "zara" ; --# notpresent
    VPB (Impf Sub Sg P2) => ca_ + "zaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => ca_ + "zara" ; --# notpresent
    VPB (Impf Sub Pl P1) => ca_ + "záramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => ca_ + "zarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => ca_ + "zaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => ca_ + "zase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => ca_ + "zases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => ca_ + "zase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => ca_ + "zásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => ca_ + "zaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => ca_ + "zasen" ; --# notpresent
    VPB (Pret Sg P1) => ca_ + "cé" ; --# notpresent
    VPB (Pret Sg P2) => ca_ + "zaste" ; --# notpresent
    VPB (Pret Sg P3) => ca_ + "zó" ; --# notpresent
    VPB (Pret Pl P1) => ca_ + "zamos" ; --# notpresent
    VPB (Pret Pl P2) => ca_ + "zasteis" ; --# notpresent
    VPB (Pret Pl P3) => ca_ + "zaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => ca_ + "zaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => ca_ + "zarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => ca_ + "zará" ; --# notpresent
    VPB (Fut Ind Pl P1) => ca_ + "zaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => ca_ + "zaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => ca_ + "zarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => ca_ + "zare" ; --# notpresent
    VPB (Fut Sub Sg P2) => ca_ + "zares" ; --# notpresent
    VPB (Fut Sub Sg P3) => ca_ + "zare" ; --# notpresent
    VPB (Fut Sub Pl P1) => ca_ + "záremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => ca_ + "zareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => ca_ + "zaren" ; --# notpresent
    VPB (Cond Sg P1) => ca_ + "zaría" ; --# notpresent
    VPB (Cond Sg P2) => ca_ + "zarías" ; --# notpresent
    VPB (Cond Sg P3) => ca_ + "zaría" ; --# notpresent
    VPB (Cond Pl P1) => ca_ + "zaríamos" ; --# notpresent
    VPB (Cond Pl P2) => ca_ + "zaríais" ; --# notpresent
    VPB (Cond Pl P3) => ca_ + "zarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => ca_ + "za" ;
    VPB (Imper Sg P3) => ca_ + "ce" ;
    VPB (Imper Pl P1) => ca_ + "cemos" ;
    VPB (Imper Pl P2) => ca_ + "zad" ;
    VPB (Imper Pl P3) => ca_ + "cen" ;
    VPB (Pass Sg Masc) => ca_ + "zado" ;
    VPB (Pass Sg Fem) => ca_ + "zada" ;
    VPB (Pass Pl Masc) => ca_ + "zados" ;
    VPB (Pass Pl Fem) => ca_ + "zadas"
    }
  } ;
oper cocer_22 : Str -> Verbum = \cocer ->
  let c_ = Predef.tk 4 cocer in
 {s = table {
    VI Infn => c_ + "ocer" ;
    VI Ger => c_ + "ociendo" ;
    VI Part => c_ + "ocido" ;
    VPB (Pres Ind Sg P1) => c_ + "uezo" ;
    VPB (Pres Ind Sg P2) => c_ + "ueces" ;
    VPB (Pres Ind Sg P3) => c_ + "uece" ;
    VPB (Pres Ind Pl P1) => c_ + "ocemos" ;
    VPB (Pres Ind Pl P2) => c_ + "océis" ;
    VPB (Pres Ind Pl P3) => c_ + "uecen" ;
    VPB (Pres Sub Sg P1) => c_ + "ueza" ;
    VPB (Pres Sub Sg P2) => c_ + "uezas" ;
    VPB (Pres Sub Sg P3) => c_ + "ueza" ;
    VPB (Pres Sub Pl P1) => c_ + "ozamos" ;
    VPB (Pres Sub Pl P2) => c_ + "ozáis" ;
    VPB (Pres Sub Pl P3) => c_ + "uezan" ;
    VPB (Impf Ind Sg P1) => c_ + "ocía" ; --# notpresent
    VPB (Impf Ind Sg P2) => c_ + "ocías" ; --# notpresent
    VPB (Impf Ind Sg P3) => c_ + "ocía" ; --# notpresent
    VPB (Impf Ind Pl P1) => c_ + "ocíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => c_ + "ocíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => c_ + "ocían" ; --# notpresent
    VPB (Impf Sub Sg P1) => c_ + "ociera" ; --# notpresent
    VPB (Impf Sub Sg P2) => c_ + "ocieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => c_ + "ociera" ; --# notpresent
    VPB (Impf Sub Pl P1) => c_ + "ociéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => c_ + "ocierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => c_ + "ocieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => c_ + "ociese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => c_ + "ocieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => c_ + "ociese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => c_ + "ociésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => c_ + "ocieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => c_ + "ociesen" ; --# notpresent
    VPB (Pret Sg P1) => c_ + "ocí" ; --# notpresent
    VPB (Pret Sg P2) => c_ + "ociste" ; --# notpresent
    VPB (Pret Sg P3) => c_ + "oció" ; --# notpresent
    VPB (Pret Pl P1) => c_ + "ocimos" ; --# notpresent
    VPB (Pret Pl P2) => c_ + "ocisteis" ; --# notpresent
    VPB (Pret Pl P3) => c_ + "ocieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => c_ + "oceré" ; --# notpresent
    VPB (Fut Ind Sg P2) => c_ + "ocerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => c_ + "ocerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => c_ + "oceremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => c_ + "oceréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => c_ + "ocerán" ; --# notpresent
    VPB (Fut Sub Sg P1) => c_ + "ociere" ; --# notpresent
    VPB (Fut Sub Sg P2) => c_ + "ocieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => c_ + "ociere" ; --# notpresent
    VPB (Fut Sub Pl P1) => c_ + "ociéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => c_ + "ociereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => c_ + "ocieren" ; --# notpresent
    VPB (Cond Sg P1) => c_ + "ocería" ; --# notpresent
    VPB (Cond Sg P2) => c_ + "ocerías" ; --# notpresent
    VPB (Cond Sg P3) => c_ + "ocería" ; --# notpresent
    VPB (Cond Pl P1) => c_ + "oceríamos" ; --# notpresent
    VPB (Cond Pl P2) => c_ + "oceríais" ; --# notpresent
    VPB (Cond Pl P3) => c_ + "ocerían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => c_ + "uece" ;
    VPB (Imper Sg P3) => c_ + "ueza" ;
    VPB (Imper Pl P1) => c_ + "ozamos" ;
    VPB (Imper Pl P2) => c_ + "oced" ;
    VPB (Imper Pl P3) => c_ + "uezan" ;
    VPB (Pass Sg Masc) => c_ + "ocido" ;
    VPB (Pass Sg Fem) => c_ + "ocida" ;
    VPB (Pass Pl Masc) => c_ + "ocidos" ;
    VPB (Pass Pl Fem) => c_ + "ocidas"
    }
  } ;
oper coger_23 : Str -> Verbum = \coger ->
  let co_ = Predef.tk 3 coger in
 {s = table {
    VI Infn => co_ + "ger" ;
    VI Ger => co_ + "giendo" ;
    VI Part => co_ + "gido" ;
    VPB (Pres Ind Sg P1) => co_ + "jo" ;
    VPB (Pres Ind Sg P2) => co_ + "ges" ;
    VPB (Pres Ind Sg P3) => co_ + "ge" ;
    VPB (Pres Ind Pl P1) => co_ + "gemos" ;
    VPB (Pres Ind Pl P2) => co_ + "géis" ;
    VPB (Pres Ind Pl P3) => co_ + "gen" ;
    VPB (Pres Sub Sg P1) => co_ + "ja" ;
    VPB (Pres Sub Sg P2) => co_ + "jas" ;
    VPB (Pres Sub Sg P3) => co_ + "ja" ;
    VPB (Pres Sub Pl P1) => co_ + "jamos" ;
    VPB (Pres Sub Pl P2) => co_ + "jáis" ;
    VPB (Pres Sub Pl P3) => co_ + "jan" ;
    VPB (Impf Ind Sg P1) => co_ + "gía" ; --# notpresent
    VPB (Impf Ind Sg P2) => co_ + "gías" ; --# notpresent
    VPB (Impf Ind Sg P3) => co_ + "gía" ; --# notpresent
    VPB (Impf Ind Pl P1) => co_ + "gíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => co_ + "gíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => co_ + "gían" ; --# notpresent
    VPB (Impf Sub Sg P1) => co_ + "giera" ; --# notpresent
    VPB (Impf Sub Sg P2) => co_ + "gieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => co_ + "giera" ; --# notpresent
    VPB (Impf Sub Pl P1) => co_ + "giéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => co_ + "gierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => co_ + "gieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => co_ + "giese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => co_ + "gieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => co_ + "giese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => co_ + "giésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => co_ + "gieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => co_ + "giesen" ; --# notpresent
    VPB (Pret Sg P1) => co_ + "gí" ; --# notpresent
    VPB (Pret Sg P2) => co_ + "giste" ; --# notpresent
    VPB (Pret Sg P3) => co_ + "gió" ; --# notpresent
    VPB (Pret Pl P1) => co_ + "gimos" ; --# notpresent
    VPB (Pret Pl P2) => co_ + "gisteis" ; --# notpresent
    VPB (Pret Pl P3) => co_ + "gieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => co_ + "geré" ; --# notpresent
    VPB (Fut Ind Sg P2) => co_ + "gerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => co_ + "gerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => co_ + "geremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => co_ + "geréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => co_ + "gerán" ; --# notpresent
    VPB (Fut Sub Sg P1) => co_ + "giere" ; --# notpresent
    VPB (Fut Sub Sg P2) => co_ + "gieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => co_ + "giere" ; --# notpresent
    VPB (Fut Sub Pl P1) => co_ + "giéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => co_ + "giereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => co_ + "gieren" ; --# notpresent
    VPB (Cond Sg P1) => co_ + "gería" ; --# notpresent
    VPB (Cond Sg P2) => co_ + "gerías" ; --# notpresent
    VPB (Cond Sg P3) => co_ + "gería" ; --# notpresent
    VPB (Cond Pl P1) => co_ + "geríamos" ; --# notpresent
    VPB (Cond Pl P2) => co_ + "geríais" ; --# notpresent
    VPB (Cond Pl P3) => co_ + "gerían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => co_ + "ge" ;
    VPB (Imper Sg P3) => co_ + "ja" ;
    VPB (Imper Pl P1) => co_ + "jamos" ;
    VPB (Imper Pl P2) => co_ + "ged" ;
    VPB (Imper Pl P3) => co_ + "jan" ;
    VPB (Pass Sg Masc) => co_ + "gido" ;
    VPB (Pass Sg Fem) => co_ + "gida" ;
    VPB (Pass Pl Masc) => co_ + "gidos" ;
    VPB (Pass Pl Fem) => co_ + "gidas"
    }
  } ;
oper colgar_24 : Str -> Verbum = \colgar ->
  let c_ = Predef.tk 5 colgar in
 {s = table {
    VI Infn => c_ + "olgar" ;
    VI Ger => c_ + "olgando" ;
    VI Part => c_ + "olgado" ;
    VPB (Pres Ind Sg P1) => c_ + "uelgo" ;
    VPB (Pres Ind Sg P2) => c_ + "uelgas" ;
    VPB (Pres Ind Sg P3) => c_ + "uelga" ;
    VPB (Pres Ind Pl P1) => c_ + "olgamos" ;
    VPB (Pres Ind Pl P2) => c_ + "olgáis" ;
    VPB (Pres Ind Pl P3) => c_ + "uelgan" ;
    VPB (Pres Sub Sg P1) => c_ + "uelgue" ;
    VPB (Pres Sub Sg P2) => c_ + "uelgues" ;
    VPB (Pres Sub Sg P3) => c_ + "uelgue" ;
    VPB (Pres Sub Pl P1) => c_ + "olguemos" ;
    VPB (Pres Sub Pl P2) => c_ + "olguéis" ;
    VPB (Pres Sub Pl P3) => c_ + "uelguen" ;
    VPB (Impf Ind Sg P1) => c_ + "olgaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => c_ + "olgabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => c_ + "olgaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => c_ + "olgábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => c_ + "olgabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => c_ + "olgaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => c_ + "olgara" ; --# notpresent
    VPB (Impf Sub Sg P2) => c_ + "olgaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => c_ + "olgara" ; --# notpresent
    VPB (Impf Sub Pl P1) => c_ + "olgáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => c_ + "olgarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => c_ + "olgaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => c_ + "olgase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => c_ + "olgases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => c_ + "olgase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => c_ + "olgásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => c_ + "olgaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => c_ + "olgasen" ; --# notpresent
    VPB (Pret Sg P1) => c_ + "olgué" ; --# notpresent
    VPB (Pret Sg P2) => c_ + "olgaste" ; --# notpresent
    VPB (Pret Sg P3) => c_ + "olgó" ; --# notpresent
    VPB (Pret Pl P1) => c_ + "olgamos" ; --# notpresent
    VPB (Pret Pl P2) => c_ + "olgasteis" ; --# notpresent
    VPB (Pret Pl P3) => c_ + "olgaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => c_ + "olgaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => c_ + "olgarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => c_ + "olgará" ; --# notpresent
    VPB (Fut Ind Pl P1) => c_ + "olgaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => c_ + "olgaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => c_ + "olgarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => c_ + "olgare" ; --# notpresent
    VPB (Fut Sub Sg P2) => c_ + "olgares" ; --# notpresent
    VPB (Fut Sub Sg P3) => c_ + "olgare" ; --# notpresent
    VPB (Fut Sub Pl P1) => c_ + "olgáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => c_ + "olgareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => c_ + "olgaren" ; --# notpresent
    VPB (Cond Sg P1) => c_ + "olgaría" ; --# notpresent
    VPB (Cond Sg P2) => c_ + "olgarías" ; --# notpresent
    VPB (Cond Sg P3) => c_ + "olgaría" ; --# notpresent
    VPB (Cond Pl P1) => c_ + "olgaríamos" ; --# notpresent
    VPB (Cond Pl P2) => c_ + "olgaríais" ; --# notpresent
    VPB (Cond Pl P3) => c_ + "olgarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => c_ + "uelga" ;
    VPB (Imper Sg P3) => c_ + "uelgue" ;
    VPB (Imper Pl P1) => c_ + "olguemos" ;
    VPB (Imper Pl P2) => c_ + "olgad" ;
    VPB (Imper Pl P3) => c_ + "uelguen" ;
    VPB (Pass Sg Masc) => c_ + "olgado" ;
    VPB (Pass Sg Fem) => c_ + "olgada" ;
    VPB (Pass Pl Masc) => c_ + "olgados" ;
    VPB (Pass Pl Fem) => c_ + "olgadas"
    }
  } ;
oper conocer_25 : Str -> Verbum = \conocer ->
  let cono_ = Predef.tk 3 conocer in
 {s = table {
    VI Infn => cono_ + "cer" ;
    VI Ger => cono_ + "ciendo" ;
    VI Part => cono_ + "cido" ;
    VPB (Pres Ind Sg P1) => cono_ + "zco" ;
    VPB (Pres Ind Sg P2) => cono_ + "ces" ;
    VPB (Pres Ind Sg P3) => cono_ + "ce" ;
    VPB (Pres Ind Pl P1) => cono_ + "cemos" ;
    VPB (Pres Ind Pl P2) => cono_ + "céis" ;
    VPB (Pres Ind Pl P3) => cono_ + "cen" ;
    VPB (Pres Sub Sg P1) => cono_ + "zca" ;
    VPB (Pres Sub Sg P2) => cono_ + "zcas" ;
    VPB (Pres Sub Sg P3) => cono_ + "zca" ;
    VPB (Pres Sub Pl P1) => cono_ + "zcamos" ;
    VPB (Pres Sub Pl P2) => cono_ + "zcáis" ;
    VPB (Pres Sub Pl P3) => cono_ + "zcan" ;
    VPB (Impf Ind Sg P1) => cono_ + "cía" ; --# notpresent
    VPB (Impf Ind Sg P2) => cono_ + "cías" ; --# notpresent
    VPB (Impf Ind Sg P3) => cono_ + "cía" ; --# notpresent
    VPB (Impf Ind Pl P1) => cono_ + "cíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => cono_ + "cíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => cono_ + "cían" ; --# notpresent
    VPB (Impf Sub Sg P1) => cono_ + "ciera" ; --# notpresent
    VPB (Impf Sub Sg P2) => cono_ + "cieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => cono_ + "ciera" ; --# notpresent
    VPB (Impf Sub Pl P1) => cono_ + "ciéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => cono_ + "cierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => cono_ + "cieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => cono_ + "ciese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => cono_ + "cieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => cono_ + "ciese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => cono_ + "ciésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => cono_ + "cieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => cono_ + "ciesen" ; --# notpresent
    VPB (Pret Sg P1) => cono_ + "cí" ; --# notpresent
    VPB (Pret Sg P2) => cono_ + "ciste" ; --# notpresent
    VPB (Pret Sg P3) => cono_ + "ció" ; --# notpresent
    VPB (Pret Pl P1) => cono_ + "cimos" ; --# notpresent
    VPB (Pret Pl P2) => cono_ + "cisteis" ; --# notpresent
    VPB (Pret Pl P3) => cono_ + "cieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => cono_ + "ceré" ; --# notpresent
    VPB (Fut Ind Sg P2) => cono_ + "cerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => cono_ + "cerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => cono_ + "ceremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => cono_ + "ceréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => cono_ + "cerán" ; --# notpresent
    VPB (Fut Sub Sg P1) => cono_ + "ciere" ; --# notpresent
    VPB (Fut Sub Sg P2) => cono_ + "cieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => cono_ + "ciere" ; --# notpresent
    VPB (Fut Sub Pl P1) => cono_ + "ciéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => cono_ + "ciereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => cono_ + "cieren" ; --# notpresent
    VPB (Cond Sg P1) => cono_ + "cería" ; --# notpresent
    VPB (Cond Sg P2) => cono_ + "cerías" ; --# notpresent
    VPB (Cond Sg P3) => cono_ + "cería" ; --# notpresent
    VPB (Cond Pl P1) => cono_ + "ceríamos" ; --# notpresent
    VPB (Cond Pl P2) => cono_ + "ceríais" ; --# notpresent
    VPB (Cond Pl P3) => cono_ + "cerían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => cono_ + "ce" ;
    VPB (Imper Sg P3) => cono_ + "zca" ;
    VPB (Imper Pl P1) => cono_ + "zcamos" ;
    VPB (Imper Pl P2) => cono_ + "ced" ;
    VPB (Imper Pl P3) => cono_ + "zcan" ;
    VPB (Pass Sg Masc) => cono_ + "cido" ;
    VPB (Pass Sg Fem) => cono_ + "cida" ;
    VPB (Pass Pl Masc) => cono_ + "cidos" ;
    VPB (Pass Pl Fem) => cono_ + "cidas"
    }
  } ;
oper creer_26 : Str -> Verbum = \creer ->
  let cre_ = Predef.tk 2 creer in
 {s = table {
    VI Infn => cre_ + "er" ;
    VI Ger => cre_ + "yendo" ;
    VI Part => cre_ + "ído" ;
    VPB (Pres Ind Sg P1) => cre_ + "o" ;
    VPB (Pres Ind Sg P2) => cre_ + "es" ;
    VPB (Pres Ind Sg P3) => cre_ + "e" ;
    VPB (Pres Ind Pl P1) => cre_ + "emos" ;
    VPB (Pres Ind Pl P2) => cre_ + "éis" ;
    VPB (Pres Ind Pl P3) => cre_ + "en" ;
    VPB (Pres Sub Sg P1) => cre_ + "a" ;
    VPB (Pres Sub Sg P2) => cre_ + "as" ;
    VPB (Pres Sub Sg P3) => cre_ + "a" ;
    VPB (Pres Sub Pl P1) => cre_ + "amos" ;
    VPB (Pres Sub Pl P2) => cre_ + "áis" ;
    VPB (Pres Sub Pl P3) => cre_ + "an" ;
    VPB (Impf Ind Sg P1) => cre_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => cre_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => cre_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => cre_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => cre_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => cre_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => cre_ + "yera" ; --# notpresent
    VPB (Impf Sub Sg P2) => cre_ + "yeras" ; --# notpresent
    VPB (Impf Sub Sg P3) => cre_ + "yera" ; --# notpresent
    VPB (Impf Sub Pl P1) => cre_ + "yéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => cre_ + "yerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => cre_ + "yeran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => cre_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => cre_ + "yeses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => cre_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => cre_ + "yésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => cre_ + "yeseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => cre_ + "yesen" ; --# notpresent
    VPB (Pret Sg P1) => cre_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => cre_ + "íste" ; --# notpresent
    VPB (Pret Sg P3) => cre_ + "yó" ; --# notpresent
    VPB (Pret Pl P1) => cre_ + "ímos" ; --# notpresent
    VPB (Pret Pl P2) => cre_ + "ísteis" ; --# notpresent
    VPB (Pret Pl P3) => cre_ + "yeron" ; --# notpresent
    VPB (Fut Ind Sg P1) => cre_ + "eré" ; --# notpresent
    VPB (Fut Ind Sg P2) => cre_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => cre_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => cre_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => cre_ + "eréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => cre_ + "erán" ; --# notpresent
    VPB (Fut Sub Sg P1) => cre_ + "yere" ; --# notpresent
    VPB (Fut Sub Sg P2) => cre_ + "yeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => cre_ + "yere" ; --# notpresent
    VPB (Fut Sub Pl P1) => cre_ + "yéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => cre_ + "yereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => cre_ + "yeren" ; --# notpresent
    VPB (Cond Sg P1) => cre_ + "ería" ; --# notpresent
    VPB (Cond Sg P2) => cre_ + "erías" ; --# notpresent
    VPB (Cond Sg P3) => cre_ + "ería" ; --# notpresent
    VPB (Cond Pl P1) => cre_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => cre_ + "eríais" ; --# notpresent
    VPB (Cond Pl P3) => cre_ + "erían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => cre_ + "e" ;
    VPB (Imper Sg P3) => cre_ + "a" ;
    VPB (Imper Pl P1) => cre_ + "amos" ;
    VPB (Imper Pl P2) => cre_ + "ed" ;
    VPB (Imper Pl P3) => cre_ + "an" ;
    VPB (Pass Sg Masc) => cre_ + "ído" ;
    VPB (Pass Sg Fem) => cre_ + "ída" ;
    VPB (Pass Pl Masc) => cre_ + "ídos" ;
    VPB (Pass Pl Fem) => cre_ + "ídas"
    }
  } ;
oper dar_27 : Str -> Verbum = \dar ->
  let d_ = Predef.tk 2 dar in
 {s = table {
    VI Infn => d_ + "ar" ;
    VI Ger => d_ + "ando" ;
    VI Part => d_ + "ado" ;
    VPB (Pres Ind Sg P1) => d_ + "oy" ;
    VPB (Pres Ind Sg P2) => d_ + "as" ;
    VPB (Pres Ind Sg P3) => d_ + "a" ;
    VPB (Pres Ind Pl P1) => d_ + "amos" ;
    VPB (Pres Ind Pl P2) => d_ + "ais" ;
    VPB (Pres Ind Pl P3) => d_ + "an" ;
    VPB (Pres Sub Sg P1) => d_ + "é" ;
    VPB (Pres Sub Sg P2) => d_ + "es" ;
    VPB (Pres Sub Sg P3) => d_ + "é" ;
    VPB (Pres Sub Pl P1) => d_ + "emos" ;
    VPB (Pres Sub Pl P2) => d_ + "eis" ;
    VPB (Pres Sub Pl P3) => d_ + "en" ;
    VPB (Impf Ind Sg P1) => d_ + "aba" ; --# notpresent
    VPB (Impf Ind Sg P2) => d_ + "abas" ; --# notpresent
    VPB (Impf Ind Sg P3) => d_ + "aba" ; --# notpresent
    VPB (Impf Ind Pl P1) => d_ + "ábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => d_ + "abais" ; --# notpresent
    VPB (Impf Ind Pl P3) => d_ + "aban" ; --# notpresent
    VPB (Impf Sub Sg P1) => d_ + "iera" ; --# notpresent
    VPB (Impf Sub Sg P2) => d_ + "ieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => d_ + "iera" ; --# notpresent
    VPB (Impf Sub Pl P1) => d_ + "iéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => d_ + "ierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => d_ + "ieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => d_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => d_ + "ieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => d_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => d_ + "iésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => d_ + "ieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => d_ + "iesen" ; --# notpresent
    VPB (Pret Sg P1) => d_ + "i" ; --# notpresent
    VPB (Pret Sg P2) => d_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => d_ + "io" ; --# notpresent
    VPB (Pret Pl P1) => d_ + "imos" ; --# notpresent
    VPB (Pret Pl P2) => d_ + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => d_ + "ieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => d_ + "aré" ; --# notpresent
    VPB (Fut Ind Sg P2) => d_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => d_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => d_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => d_ + "aréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => d_ + "arán" ; --# notpresent
    VPB (Fut Sub Sg P1) => d_ + "iere" ; --# notpresent
    VPB (Fut Sub Sg P2) => d_ + "ieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => d_ + "iere" ; --# notpresent
    VPB (Fut Sub Pl P1) => d_ + "iéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => d_ + "iereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => d_ + "ieren" ; --# notpresent
    VPB (Cond Sg P1) => d_ + "aría" ; --# notpresent
    VPB (Cond Sg P2) => d_ + "arías" ; --# notpresent
    VPB (Cond Sg P3) => d_ + "aría" ; --# notpresent
    VPB (Cond Pl P1) => d_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => d_ + "aríais" ; --# notpresent
    VPB (Cond Pl P3) => d_ + "arían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => d_ + "a" ;
    VPB (Imper Sg P3) => d_ + "é" ;
    VPB (Imper Pl P1) => d_ + "emos" ;
    VPB (Imper Pl P2) => d_ + "ad" ;
    VPB (Imper Pl P3) => d_ + "en" ;
    VPB (Pass Sg Masc) => d_ + "ado" ;
    VPB (Pass Sg Fem) => d_ + "ada" ;
    VPB (Pass Pl Masc) => d_ + "ados" ;
    VPB (Pass Pl Fem) => d_ + "adas"
    }
  } ;
oper decir_28 : Str -> Verbum = \decir ->
  let d_ = Predef.tk 4 decir in
 {s = table {
    VI Infn => d_ + "ecir" ;
    VI Ger => d_ + "iciendo" ;
    VI Part => d_ + "icho" ;
    VPB (Pres Ind Sg P1) => d_ + "igo" ;
    VPB (Pres Ind Sg P2) => d_ + "ices" ;
    VPB (Pres Ind Sg P3) => d_ + "ice" ;
    VPB (Pres Ind Pl P1) => d_ + "ecimos" ;
    VPB (Pres Ind Pl P2) => d_ + "ecís" ;
    VPB (Pres Ind Pl P3) => d_ + "icen" ;
    VPB (Pres Sub Sg P1) => d_ + "iga" ;
    VPB (Pres Sub Sg P2) => d_ + "igas" ;
    VPB (Pres Sub Sg P3) => d_ + "iga" ;
    VPB (Pres Sub Pl P1) => d_ + "igamos" ;
    VPB (Pres Sub Pl P2) => d_ + "igáis" ;
    VPB (Pres Sub Pl P3) => d_ + "igan" ;
    VPB (Impf Ind Sg P1) => d_ + "ecía" ; --# notpresent
    VPB (Impf Ind Sg P2) => d_ + "ecías" ; --# notpresent
    VPB (Impf Ind Sg P3) => d_ + "ecía" ; --# notpresent
    VPB (Impf Ind Pl P1) => d_ + "ecíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => d_ + "ecíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => d_ + "ecían" ; --# notpresent
    VPB (Impf Sub Sg P1) => d_ + "ijera" ; --# notpresent
    VPB (Impf Sub Sg P2) => d_ + "ijeras" ; --# notpresent
    VPB (Impf Sub Sg P3) => d_ + "ijera" ; --# notpresent
    VPB (Impf Sub Pl P1) => d_ + "ijéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => d_ + "ijerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => d_ + "ijeran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => d_ + "ijese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => d_ + "ijeses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => d_ + "ijese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => d_ + "ijésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => d_ + "ijeseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => d_ + "ijesen" ; --# notpresent
    VPB (Pret Sg P1) => d_ + "ije" ; --# notpresent
    VPB (Pret Sg P2) => d_ + "ijiste" ; --# notpresent
    VPB (Pret Sg P3) => d_ + "ijo" ; --# notpresent
    VPB (Pret Pl P1) => d_ + "ijimos" ; --# notpresent
    VPB (Pret Pl P2) => d_ + "ijisteis" ; --# notpresent
    VPB (Pret Pl P3) => d_ + "ijeron" ; --# notpresent
    VPB (Fut Ind Sg P1) => d_ + "iré" ; --# notpresent
    VPB (Fut Ind Sg P2) => d_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => d_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => d_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => d_ + "iréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => d_ + "irán" ; --# notpresent
    VPB (Fut Sub Sg P1) => d_ + "ijere" ; --# notpresent
    VPB (Fut Sub Sg P2) => d_ + "ijeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => d_ + "ijere" ; --# notpresent
    VPB (Fut Sub Pl P1) => d_ + "ijéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => d_ + "ijereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => d_ + "ijeren" ; --# notpresent
    VPB (Cond Sg P1) => d_ + "iría" ; --# notpresent
    VPB (Cond Sg P2) => d_ + "irías" ; --# notpresent
    VPB (Cond Sg P3) => d_ + "iría" ; --# notpresent
    VPB (Cond Pl P1) => d_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => d_ + "iríais" ; --# notpresent
    VPB (Cond Pl P3) => d_ + "irían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => d_ + "i" ;
    VPB (Imper Sg P3) => d_ + "iga" ;
    VPB (Imper Pl P1) => d_ + "igamos" ;
    VPB (Imper Pl P2) => d_ + "ecid" ;
    VPB (Imper Pl P3) => d_ + "igan" ;
    VPB (Pass Sg Masc) => d_ + "icho" ;
    VPB (Pass Sg Fem) => d_ + "icha" ;
    VPB (Pass Pl Masc) => d_ + "ichos" ;
    VPB (Pass Pl Fem) => d_ + "ichas"
    }
  } ;
oper defender_29 : Str -> Verbum = \defender ->
  let 
    def_ = Predef.tk 5 defender ;
    nd_  = Predef.tk 2 (Predef.dp 4 defender) 
  in
 {s = table {
    VI Infn => def_ + "e" + nd_ + "er" ;
    VI Ger => def_ + "e" + nd_ + "iendo" ;
    VI Part => def_ + "e" + nd_ + "ido" ;
    VPB (Pres Ind Sg P1) => def_ + "ie" + nd_ + "o" ;
    VPB (Pres Ind Sg P2) => def_ + "ie" + nd_ + "es" ;
    VPB (Pres Ind Sg P3) => def_ + "ie" + nd_ + "e" ;
    VPB (Pres Ind Pl P1) => def_ + "e" + nd_ + "emos" ;
    VPB (Pres Ind Pl P2) => def_ + "e" + nd_ + "éis" ;
    VPB (Pres Ind Pl P3) => def_ + "ie" + nd_ + "en" ;
    VPB (Pres Sub Sg P1) => def_ + "ie" + nd_ + "a" ;
    VPB (Pres Sub Sg P2) => def_ + "ie" + nd_ + "as" ;
    VPB (Pres Sub Sg P3) => def_ + "ie" + nd_ + "a" ;
    VPB (Pres Sub Pl P1) => def_ + "e" + nd_ + "amos" ;
    VPB (Pres Sub Pl P2) => def_ + "e" + nd_ + "áis" ;
    VPB (Pres Sub Pl P3) => def_ + "ie" + nd_ + "an" ;
    VPB (Impf Ind Sg P1) => def_ + "e" + nd_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => def_ + "e" + nd_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => def_ + "e" + nd_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => def_ + "e" + nd_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => def_ + "e" + nd_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => def_ + "e" + nd_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => def_ + "e" + nd_ + "iera" ; --# notpresent
    VPB (Impf Sub Sg P2) => def_ + "e" + nd_ + "ieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => def_ + "e" + nd_ + "iera" ; --# notpresent
    VPB (Impf Sub Pl P1) => def_ + "e" + nd_ + "iéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => def_ + "e" + nd_ + "ierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => def_ + "e" + nd_ + "ieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => def_ + "e" + nd_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => def_ + "e" + nd_ + "ieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => def_ + "e" + nd_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => def_ + "e" + nd_ + "iésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => def_ + "e" + nd_ + "ieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => def_ + "e" + nd_ + "iesen" ; --# notpresent
    VPB (Pret Sg P1) => def_ + "e" + nd_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => def_ + "e" + nd_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => def_ + "e" + nd_ + "ió" ; --# notpresent
    VPB (Pret Pl P1) => def_ + "e" + nd_ + "imos" ; --# notpresent
    VPB (Pret Pl P2) => def_ + "e" + nd_ + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => def_ + "e" + nd_ + "ieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => def_ + "e" + nd_ + "eré" ; --# notpresent
    VPB (Fut Ind Sg P2) => def_ + "e" + nd_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => def_ + "e" + nd_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => def_ + "e" + nd_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => def_ + "e" + nd_ + "eréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => def_ + "e" + nd_ + "erán" ; --# notpresent
    VPB (Fut Sub Sg P1) => def_ + "e" + nd_ + "iere" ; --# notpresent
    VPB (Fut Sub Sg P2) => def_ + "e" + nd_ + "ieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => def_ + "e" + nd_ + "iere" ; --# notpresent
    VPB (Fut Sub Pl P1) => def_ + "e" + nd_ + "iéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => def_ + "e" + nd_ + "iereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => def_ + "e" + nd_ + "ieren" ; --# notpresent
    VPB (Cond Sg P1) => def_ + "e" + nd_ + "ería" ; --# notpresent
    VPB (Cond Sg P2) => def_ + "e" + nd_ + "erías" ; --# notpresent
    VPB (Cond Sg P3) => def_ + "e" + nd_ + "ería" ; --# notpresent
    VPB (Cond Pl P1) => def_ + "e" + nd_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => def_ + "e" + nd_ + "eríais" ; --# notpresent
    VPB (Cond Pl P3) => def_ + "e" + nd_ + "erían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => def_ + "ie" + nd_ + "e" ;
    VPB (Imper Sg P3) => def_ + "ie" + nd_ + "a" ;
    VPB (Imper Pl P1) => def_ + "e" + nd_ + "amos" ;
    VPB (Imper Pl P2) => def_ + "e" + nd_ + "ed" ;
    VPB (Imper Pl P3) => def_ + "ie" + nd_ + "an" ;
    VPB (Pass Sg Masc) => def_ + "e" + nd_ + "ido" ;
    VPB (Pass Sg Fem) => def_ + "e" + nd_ + "ida" ;
    VPB (Pass Pl Masc) => def_ + "e" + nd_ + "idos" ;
    VPB (Pass Pl Fem) => def_ + "e" + nd_ + "idas"
    }
  } ;
oper delinquir_30 : Str -> Verbum = \delinquir ->
  let delin_ = Predef.tk 4 delinquir in
 {s = table {
    VI Infn => delin_ + "quir" ;
    VI Ger => delin_ + "quiendo" ;
    VI Part => delin_ + "quido" ;
    VPB (Pres Ind Sg P1) => delin_ + "co" ;
    VPB (Pres Ind Sg P2) => delin_ + "ques" ;
    VPB (Pres Ind Sg P3) => delin_ + "que" ;
    VPB (Pres Ind Pl P1) => delin_ + "quimos" ;
    VPB (Pres Ind Pl P2) => delin_ + "quís" ;
    VPB (Pres Ind Pl P3) => delin_ + "quen" ;
    VPB (Pres Sub Sg P1) => delin_ + "ca" ;
    VPB (Pres Sub Sg P2) => delin_ + "cas" ;
    VPB (Pres Sub Sg P3) => delin_ + "ca" ;
    VPB (Pres Sub Pl P1) => delin_ + "camos" ;
    VPB (Pres Sub Pl P2) => delin_ + "cáis" ;
    VPB (Pres Sub Pl P3) => delin_ + "can" ;
    VPB (Impf Ind Sg P1) => delin_ + "quía" ; --# notpresent
    VPB (Impf Ind Sg P2) => delin_ + "quías" ; --# notpresent
    VPB (Impf Ind Sg P3) => delin_ + "quía" ; --# notpresent
    VPB (Impf Ind Pl P1) => delin_ + "quíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => delin_ + "quíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => delin_ + "quían" ; --# notpresent
    VPB (Impf Sub Sg P1) => delin_ + "quiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => delin_ + "quieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => delin_ + "quiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => delin_ + "quiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => delin_ + "quierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => delin_ + "quieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => delin_ + "quiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => delin_ + "quieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => delin_ + "quiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => delin_ + "quiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => delin_ + "quieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => delin_ + "quiesen" ; --# notpresent
    VPB (Pret Sg P1) => delin_ + "quí" ; --# notpresent
    VPB (Pret Sg P2) => delin_ + "quiste" ; --# notpresent
    VPB (Pret Sg P3) => delin_ + "quió" ; --# notpresent
    VPB (Pret Pl P1) => delin_ + "quimos" ; --# notpresent
    VPB (Pret Pl P2) => delin_ + "quisteis" ; --# notpresent
    VPB (Pret Pl P3) => delin_ + "quieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => delin_ + "quiré" ; --# notpresent
    VPB (Fut Ind Sg P2) => delin_ + "quirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => delin_ + "quirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => delin_ + "quiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => delin_ + "quiréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => delin_ + "quirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => delin_ + "quiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => delin_ + "quieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => delin_ + "quiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => delin_ + "quiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => delin_ + "quiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => delin_ + "quieren" ; --# notpresent
    VPB (Cond Sg P1) => delin_ + "quiría" ; --# notpresent
    VPB (Cond Sg P2) => delin_ + "quirías" ; --# notpresent
    VPB (Cond Sg P3) => delin_ + "quiría" ; --# notpresent
    VPB (Cond Pl P1) => delin_ + "quiríamos" ; --# notpresent
    VPB (Cond Pl P2) => delin_ + "quiríais" ; --# notpresent
    VPB (Cond Pl P3) => delin_ + "quirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => delin_ + "que" ;
    VPB (Imper Sg P3) => delin_ + "ca" ;
    VPB (Imper Pl P1) => delin_ + "camos" ;
    VPB (Imper Pl P2) => delin_ + "quid" ;
    VPB (Imper Pl P3) => delin_ + "can" ;
    VPB (Pass Sg Masc) => delin_ + "quido" ;
    VPB (Pass Sg Fem) => delin_ + "quida" ;
    VPB (Pass Pl Masc) => delin_ + "quidos" ;
    VPB (Pass Pl Fem) => delin_ + "quidas"
    }
  } ;
oper desosar_31 : Str -> Verbum = \desosar ->
  let des_ = Predef.tk 4 desosar in
 {s = table {
    VI Infn => des_ + "osar" ;
    VI Ger => des_ + "osando" ;
    VI Part => des_ + "osado" ;
    VPB (Pres Ind Sg P1) => des_ + "hueso" ;
    VPB (Pres Ind Sg P2) => des_ + "huesas" ;
    VPB (Pres Ind Sg P3) => des_ + "huesa" ;
    VPB (Pres Ind Pl P1) => des_ + "osamos" ;
    VPB (Pres Ind Pl P2) => des_ + "osáis" ;
    VPB (Pres Ind Pl P3) => des_ + "huesan" ;
    VPB (Pres Sub Sg P1) => des_ + "huese" ;
    VPB (Pres Sub Sg P2) => des_ + "hueses" ;
    VPB (Pres Sub Sg P3) => des_ + "huese" ;
    VPB (Pres Sub Pl P1) => des_ + "osemos" ;
    VPB (Pres Sub Pl P2) => des_ + "oséis" ;
    VPB (Pres Sub Pl P3) => des_ + "huesen" ;
    VPB (Impf Ind Sg P1) => des_ + "osaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => des_ + "osabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => des_ + "osaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => des_ + "osábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => des_ + "osabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => des_ + "osaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => des_ + "osara" ; --# notpresent
    VPB (Impf Sub Sg P2) => des_ + "osaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => des_ + "osara" ; --# notpresent
    VPB (Impf Sub Pl P1) => des_ + "osáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => des_ + "osarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => des_ + "osaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => des_ + "osase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => des_ + "osases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => des_ + "osase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => des_ + "osásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => des_ + "osaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => des_ + "osasen" ; --# notpresent
    VPB (Pret Sg P1) => des_ + "osé" ; --# notpresent
    VPB (Pret Sg P2) => des_ + "osaste" ; --# notpresent
    VPB (Pret Sg P3) => des_ + "osó" ; --# notpresent
    VPB (Pret Pl P1) => des_ + "osamos" ; --# notpresent
    VPB (Pret Pl P2) => des_ + "osasteis" ; --# notpresent
    VPB (Pret Pl P3) => des_ + "osaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => des_ + "osaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => des_ + "osarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => des_ + "osará" ; --# notpresent
    VPB (Fut Ind Pl P1) => des_ + "osaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => des_ + "osaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => des_ + "osarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => des_ + "osare" ; --# notpresent
    VPB (Fut Sub Sg P2) => des_ + "osares" ; --# notpresent
    VPB (Fut Sub Sg P3) => des_ + "osare" ; --# notpresent
    VPB (Fut Sub Pl P1) => des_ + "osáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => des_ + "osareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => des_ + "osaren" ; --# notpresent
    VPB (Cond Sg P1) => des_ + "osaría" ; --# notpresent
    VPB (Cond Sg P2) => des_ + "osarías" ; --# notpresent
    VPB (Cond Sg P3) => des_ + "osaría" ; --# notpresent
    VPB (Cond Pl P1) => des_ + "osaríamos" ; --# notpresent
    VPB (Cond Pl P2) => des_ + "osaríais" ; --# notpresent
    VPB (Cond Pl P3) => des_ + "osarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => des_ + "huesa" ;
    VPB (Imper Sg P3) => des_ + "huese" ;
    VPB (Imper Pl P1) => des_ + "osemos" ;
    VPB (Imper Pl P2) => des_ + "osad" ;
    VPB (Imper Pl P3) => des_ + "huesen" ;
    VPB (Pass Sg Masc) => des_ + "osado" ;
    VPB (Pass Sg Fem) => des_ + "osada" ;
    VPB (Pass Pl Masc) => des_ + "osados" ;
    VPB (Pass Pl Fem) => des_ + "osadas"
    }
  } ;
oper dirigir_32 : Str -> Verbum = \dirigir ->
  let diri_ = Predef.tk 3 dirigir in
 {s = table {
    VI Infn => diri_ + "gir" ;
    VI Ger => diri_ + "giendo" ;
    VI Part => diri_ + "gido" ;
    VPB (Pres Ind Sg P1) => diri_ + "jo" ;
    VPB (Pres Ind Sg P2) => diri_ + "ges" ;
    VPB (Pres Ind Sg P3) => diri_ + "ge" ;
    VPB (Pres Ind Pl P1) => diri_ + "gimos" ;
    VPB (Pres Ind Pl P2) => diri_ + "gís" ;
    VPB (Pres Ind Pl P3) => diri_ + "gen" ;
    VPB (Pres Sub Sg P1) => diri_ + "ja" ;
    VPB (Pres Sub Sg P2) => diri_ + "jas" ;
    VPB (Pres Sub Sg P3) => diri_ + "ja" ;
    VPB (Pres Sub Pl P1) => diri_ + "jamos" ;
    VPB (Pres Sub Pl P2) => diri_ + "jáis" ;
    VPB (Pres Sub Pl P3) => diri_ + "jan" ;
    VPB (Impf Ind Sg P1) => diri_ + "gía" ; --# notpresent
    VPB (Impf Ind Sg P2) => diri_ + "gías" ; --# notpresent
    VPB (Impf Ind Sg P3) => diri_ + "gía" ; --# notpresent
    VPB (Impf Ind Pl P1) => diri_ + "gíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => diri_ + "gíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => diri_ + "gían" ; --# notpresent
    VPB (Impf Sub Sg P1) => diri_ + "giera" ; --# notpresent
    VPB (Impf Sub Sg P2) => diri_ + "gieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => diri_ + "giera" ; --# notpresent
    VPB (Impf Sub Pl P1) => diri_ + "giéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => diri_ + "gierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => diri_ + "gieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => diri_ + "giese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => diri_ + "gieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => diri_ + "giese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => diri_ + "giésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => diri_ + "gieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => diri_ + "giesen" ; --# notpresent
    VPB (Pret Sg P1) => diri_ + "gí" ; --# notpresent
    VPB (Pret Sg P2) => diri_ + "giste" ; --# notpresent
    VPB (Pret Sg P3) => diri_ + "gió" ; --# notpresent
    VPB (Pret Pl P1) => diri_ + "gimos" ; --# notpresent
    VPB (Pret Pl P2) => diri_ + "gisteis" ; --# notpresent
    VPB (Pret Pl P3) => diri_ + "gieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => diri_ + "giré" ; --# notpresent
    VPB (Fut Ind Sg P2) => diri_ + "girás" ; --# notpresent
    VPB (Fut Ind Sg P3) => diri_ + "girá" ; --# notpresent
    VPB (Fut Ind Pl P1) => diri_ + "giremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => diri_ + "giréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => diri_ + "girán" ; --# notpresent
    VPB (Fut Sub Sg P1) => diri_ + "giere" ; --# notpresent
    VPB (Fut Sub Sg P2) => diri_ + "gieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => diri_ + "giere" ; --# notpresent
    VPB (Fut Sub Pl P1) => diri_ + "giéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => diri_ + "giereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => diri_ + "gieren" ; --# notpresent
    VPB (Cond Sg P1) => diri_ + "giría" ; --# notpresent
    VPB (Cond Sg P2) => diri_ + "girías" ; --# notpresent
    VPB (Cond Sg P3) => diri_ + "giría" ; --# notpresent
    VPB (Cond Pl P1) => diri_ + "giríamos" ; --# notpresent
    VPB (Cond Pl P2) => diri_ + "giríais" ; --# notpresent
    VPB (Cond Pl P3) => diri_ + "girían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => diri_ + "ge" ;
    VPB (Imper Sg P3) => diri_ + "ja" ;
    VPB (Imper Pl P1) => diri_ + "jamos" ;
    VPB (Imper Pl P2) => diri_ + "gid" ;
    VPB (Imper Pl P3) => diri_ + "jan" ;
    VPB (Pass Sg Masc) => diri_ + "gido" ;
    VPB (Pass Sg Fem) => diri_ + "gida" ;
    VPB (Pass Pl Masc) => diri_ + "gidos" ;
    VPB (Pass Pl Fem) => diri_ + "gidas"
    }
  } ;
oper discernir_33 : Str -> Verbum = \discernir ->
  let disc_ = Predef.tk 5 discernir in
 {s = table {
    VI Infn => disc_ + "ernir" ;
    VI Ger => disc_ + "erniendo" ;
    VI Part => disc_ + "ernido" ;
    VPB (Pres Ind Sg P1) => disc_ + "ierno" ;
    VPB (Pres Ind Sg P2) => disc_ + "iernes" ;
    VPB (Pres Ind Sg P3) => disc_ + "ierne" ;
    VPB (Pres Ind Pl P1) => disc_ + "ernimos" ;
    VPB (Pres Ind Pl P2) => disc_ + "ernís" ;
    VPB (Pres Ind Pl P3) => disc_ + "iernen" ;
    VPB (Pres Sub Sg P1) => disc_ + "ierna" ;
    VPB (Pres Sub Sg P2) => disc_ + "iernas" ;
    VPB (Pres Sub Sg P3) => disc_ + "ierna" ;
    VPB (Pres Sub Pl P1) => disc_ + "ernamos" ;
    VPB (Pres Sub Pl P2) => disc_ + "ernáis" ;
    VPB (Pres Sub Pl P3) => disc_ + "iernan" ;
    VPB (Impf Ind Sg P1) => disc_ + "ernía" ; --# notpresent
    VPB (Impf Ind Sg P2) => disc_ + "ernías" ; --# notpresent
    VPB (Impf Ind Sg P3) => disc_ + "ernía" ; --# notpresent
    VPB (Impf Ind Pl P1) => disc_ + "erníamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => disc_ + "erníais" ; --# notpresent
    VPB (Impf Ind Pl P3) => disc_ + "ernían" ; --# notpresent
    VPB (Impf Sub Sg P1) => disc_ + "erniera" ; --# notpresent
    VPB (Impf Sub Sg P2) => disc_ + "ernieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => disc_ + "erniera" ; --# notpresent
    VPB (Impf Sub Pl P1) => disc_ + "erniéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => disc_ + "ernierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => disc_ + "ernieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => disc_ + "erniese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => disc_ + "ernieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => disc_ + "erniese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => disc_ + "erniésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => disc_ + "ernieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => disc_ + "erniesen" ; --# notpresent
    VPB (Pret Sg P1) => disc_ + "erní" ; --# notpresent
    VPB (Pret Sg P2) => disc_ + "erniste" ; --# notpresent
    VPB (Pret Sg P3) => disc_ + "ernió" ; --# notpresent
    VPB (Pret Pl P1) => disc_ + "ernimos" ; --# notpresent
    VPB (Pret Pl P2) => disc_ + "ernisteis" ; --# notpresent
    VPB (Pret Pl P3) => disc_ + "ernieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => disc_ + "erniré" ; --# notpresent
    VPB (Fut Ind Sg P2) => disc_ + "ernirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => disc_ + "ernirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => disc_ + "erniremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => disc_ + "erniréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => disc_ + "ernirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => disc_ + "erniere" ; --# notpresent
    VPB (Fut Sub Sg P2) => disc_ + "ernieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => disc_ + "erniere" ; --# notpresent
    VPB (Fut Sub Pl P1) => disc_ + "erniéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => disc_ + "erniereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => disc_ + "ernieren" ; --# notpresent
    VPB (Cond Sg P1) => disc_ + "erniría" ; --# notpresent
    VPB (Cond Sg P2) => disc_ + "ernirías" ; --# notpresent
    VPB (Cond Sg P3) => disc_ + "erniría" ; --# notpresent
    VPB (Cond Pl P1) => disc_ + "erniríamos" ; --# notpresent
    VPB (Cond Pl P2) => disc_ + "erniríais" ; --# notpresent
    VPB (Cond Pl P3) => disc_ + "ernirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => disc_ + "ierne" ;
    VPB (Imper Sg P3) => disc_ + "ierna" ;
    VPB (Imper Pl P1) => disc_ + "ernamos" ;
    VPB (Imper Pl P2) => disc_ + "ernid" ;
    VPB (Imper Pl P3) => disc_ + "iernan" ;
    VPB (Pass Sg Masc) => disc_ + "ernido" ;
    VPB (Pass Sg Fem) => disc_ + "ernida" ;
    VPB (Pass Pl Masc) => disc_ + "ernidos" ;
    VPB (Pass Pl Fem) => disc_ + "ernidas"
    }
  } ;
oper distinguir_34 : Str -> Verbum = \distinguir ->
  let disting_ = Predef.tk 3 distinguir in
 {s = table {
    VI Infn => disting_ + "uir" ;
    VI Ger => disting_ + "uiendo" ;
    VI Part => disting_ + "uido" ;
    VPB (Pres Ind Sg P1) => disting_ + "o" ;
    VPB (Pres Ind Sg P2) => disting_ + "ues" ;
    VPB (Pres Ind Sg P3) => disting_ + "ue" ;
    VPB (Pres Ind Pl P1) => disting_ + "uimos" ;
    VPB (Pres Ind Pl P2) => disting_ + "uís" ;
    VPB (Pres Ind Pl P3) => disting_ + "uen" ;
    VPB (Pres Sub Sg P1) => disting_ + "a" ;
    VPB (Pres Sub Sg P2) => disting_ + "as" ;
    VPB (Pres Sub Sg P3) => disting_ + "a" ;
    VPB (Pres Sub Pl P1) => disting_ + "amos" ;
    VPB (Pres Sub Pl P2) => disting_ + "áis" ;
    VPB (Pres Sub Pl P3) => disting_ + "an" ;
    VPB (Impf Ind Sg P1) => disting_ + "uía" ; --# notpresent
    VPB (Impf Ind Sg P2) => disting_ + "uías" ; --# notpresent
    VPB (Impf Ind Sg P3) => disting_ + "uía" ; --# notpresent
    VPB (Impf Ind Pl P1) => disting_ + "uíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => disting_ + "uíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => disting_ + "uían" ; --# notpresent
    VPB (Impf Sub Sg P1) => disting_ + "uiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => disting_ + "uieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => disting_ + "uiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => disting_ + "uiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => disting_ + "uierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => disting_ + "uieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => disting_ + "uiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => disting_ + "uieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => disting_ + "uiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => disting_ + "uiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => disting_ + "uieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => disting_ + "uiesen" ; --# notpresent
    VPB (Pret Sg P1) => disting_ + "uí" ; --# notpresent
    VPB (Pret Sg P2) => disting_ + "uiste" ; --# notpresent
    VPB (Pret Sg P3) => disting_ + "uió" ; --# notpresent
    VPB (Pret Pl P1) => disting_ + "uimos" ; --# notpresent
    VPB (Pret Pl P2) => disting_ + "uisteis" ; --# notpresent
    VPB (Pret Pl P3) => disting_ + "uieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => disting_ + "uiré" ; --# notpresent
    VPB (Fut Ind Sg P2) => disting_ + "uirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => disting_ + "uirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => disting_ + "uiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => disting_ + "uiréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => disting_ + "uirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => disting_ + "uiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => disting_ + "uieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => disting_ + "uiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => disting_ + "uiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => disting_ + "uiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => disting_ + "uieren" ; --# notpresent
    VPB (Cond Sg P1) => disting_ + "uiría" ; --# notpresent
    VPB (Cond Sg P2) => disting_ + "uirías" ; --# notpresent
    VPB (Cond Sg P3) => disting_ + "uiría" ; --# notpresent
    VPB (Cond Pl P1) => disting_ + "uiríamos" ; --# notpresent
    VPB (Cond Pl P2) => disting_ + "uiríais" ; --# notpresent
    VPB (Cond Pl P3) => disting_ + "uirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => disting_ + "ue" ;
    VPB (Imper Sg P3) => disting_ + "a" ;
    VPB (Imper Pl P1) => disting_ + "amos" ;
    VPB (Imper Pl P2) => disting_ + "uid" ;
    VPB (Imper Pl P3) => disting_ + "an" ;
    VPB (Pass Sg Masc) => disting_ + "uido" ;
    VPB (Pass Sg Fem) => disting_ + "uida" ;
    VPB (Pass Pl Masc) => disting_ + "uidos" ;
    VPB (Pass Pl Fem) => disting_ + "uidas"
    }
  } ;
oper dormir_35 : Str -> Verbum = \dormir ->
  let d_ = Predef.tk 5 dormir in
 {s = table {
    VI Infn => d_ + "ormir" ;
    VI Ger => d_ + "urmiendo" ;
    VI Part => d_ + "ormido" ;
    VPB (Pres Ind Sg P1) => d_ + "uermo" ;
    VPB (Pres Ind Sg P2) => d_ + "uermes" ;
    VPB (Pres Ind Sg P3) => d_ + "uerme" ;
    VPB (Pres Ind Pl P1) => d_ + "ormimos" ;
    VPB (Pres Ind Pl P2) => d_ + "ormís" ;
    VPB (Pres Ind Pl P3) => d_ + "uermen" ;
    VPB (Pres Sub Sg P1) => d_ + "uerma" ;
    VPB (Pres Sub Sg P2) => d_ + "uermas" ;
    VPB (Pres Sub Sg P3) => d_ + "uerma" ;
    VPB (Pres Sub Pl P1) => d_ + "urmamos" ;
    VPB (Pres Sub Pl P2) => d_ + "urmáis" ;
    VPB (Pres Sub Pl P3) => d_ + "uerman" ;
    VPB (Impf Ind Sg P1) => d_ + "ormía" ; --# notpresent
    VPB (Impf Ind Sg P2) => d_ + "ormías" ; --# notpresent
    VPB (Impf Ind Sg P3) => d_ + "ormía" ; --# notpresent
    VPB (Impf Ind Pl P1) => d_ + "ormíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => d_ + "ormíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => d_ + "ormían" ; --# notpresent
    VPB (Impf Sub Sg P1) => d_ + "urmiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => d_ + "urmieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => d_ + "urmiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => d_ + "urmiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => d_ + "urmierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => d_ + "urmieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => d_ + "urmiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => d_ + "urmieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => d_ + "urmiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => d_ + "urmiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => d_ + "urmieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => d_ + "urmiesen" ; --# notpresent
    VPB (Pret Sg P1) => d_ + "ormí" ; --# notpresent
    VPB (Pret Sg P2) => d_ + "ormiste" ; --# notpresent
    VPB (Pret Sg P3) => d_ + "urmió" ; --# notpresent
    VPB (Pret Pl P1) => d_ + "ormimos" ; --# notpresent
    VPB (Pret Pl P2) => d_ + "ormisteis" ; --# notpresent
    VPB (Pret Pl P3) => d_ + "urmieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => d_ + "ormiré" ; --# notpresent
    VPB (Fut Ind Sg P2) => d_ + "ormirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => d_ + "ormirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => d_ + "ormiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => d_ + "ormiréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => d_ + "ormirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => d_ + "urmiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => d_ + "urmieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => d_ + "urmiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => d_ + "urmiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => d_ + "urmiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => d_ + "urmieren" ; --# notpresent
    VPB (Cond Sg P1) => d_ + "ormiría" ; --# notpresent
    VPB (Cond Sg P2) => d_ + "ormirías" ; --# notpresent
    VPB (Cond Sg P3) => d_ + "ormiría" ; --# notpresent
    VPB (Cond Pl P1) => d_ + "ormiríamos" ; --# notpresent
    VPB (Cond Pl P2) => d_ + "ormiríais" ; --# notpresent
    VPB (Cond Pl P3) => d_ + "ormirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => d_ + "uerme" ;
    VPB (Imper Sg P3) => d_ + "uerma" ;
    VPB (Imper Pl P1) => d_ + "urmamos" ;
    VPB (Imper Pl P2) => d_ + "ormid" ;
    VPB (Imper Pl P3) => d_ + "uerman" ;
    VPB (Pass Sg Masc) => d_ + "ormido" ;
    VPB (Pass Sg Fem) => d_ + "ormida" ;
    VPB (Pass Pl Masc) => d_ + "ormidos" ;
    VPB (Pass Pl Fem) => d_ + "ormidas"
    }
  } ;
oper morir_35b : Str -> Verbum = \morir ->
  let d_ = Predef.tk 4 morir in
 {s = table {
    VI Infn => d_ + "orir" ;
    VI Ger => d_ + "uriendo" ;
    VI Part => d_ + "orido" ;
    VPB (Pres Ind Sg P1) => d_ + "uero" ;
    VPB (Pres Ind Sg P2) => d_ + "ueres" ;
    VPB (Pres Ind Sg P3) => d_ + "uere" ;
    VPB (Pres Ind Pl P1) => d_ + "orimos" ;
    VPB (Pres Ind Pl P2) => d_ + "orís" ;
    VPB (Pres Ind Pl P3) => d_ + "ueren" ;
    VPB (Pres Sub Sg P1) => d_ + "uera" ;
    VPB (Pres Sub Sg P2) => d_ + "ueras" ;
    VPB (Pres Sub Sg P3) => d_ + "uera" ;
    VPB (Pres Sub Pl P1) => d_ + "uramos" ;
    VPB (Pres Sub Pl P2) => d_ + "uráis" ;
    VPB (Pres Sub Pl P3) => d_ + "ueran" ;
    VPB (Impf Ind Sg P1) => d_ + "oría" ; --# notpresent
    VPB (Impf Ind Sg P2) => d_ + "orías" ; --# notpresent
    VPB (Impf Ind Sg P3) => d_ + "oría" ; --# notpresent
    VPB (Impf Ind Pl P1) => d_ + "oríamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => d_ + "oríais" ; --# notpresent
    VPB (Impf Ind Pl P3) => d_ + "orían" ; --# notpresent
    VPB (Impf Sub Sg P1) => d_ + "uriera" ; --# notpresent
    VPB (Impf Sub Sg P2) => d_ + "urieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => d_ + "uriera" ; --# notpresent
    VPB (Impf Sub Pl P1) => d_ + "uriéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => d_ + "urierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => d_ + "urieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => d_ + "uriese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => d_ + "urieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => d_ + "uriese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => d_ + "uriésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => d_ + "urieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => d_ + "uriesen" ; --# notpresent
    VPB (Pret Sg P1) => d_ + "orí" ; --# notpresent
    VPB (Pret Sg P2) => d_ + "oriste" ; --# notpresent
    VPB (Pret Sg P3) => d_ + "urió" ; --# notpresent
    VPB (Pret Pl P1) => d_ + "orimos" ; --# notpresent
    VPB (Pret Pl P2) => d_ + "oristeis" ; --# notpresent
    VPB (Pret Pl P3) => d_ + "urieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => d_ + "oriré" ; --# notpresent
    VPB (Fut Ind Sg P2) => d_ + "orirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => d_ + "orirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => d_ + "oriremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => d_ + "oriréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => d_ + "orirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => d_ + "uriere" ; --# notpresent
    VPB (Fut Sub Sg P2) => d_ + "urieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => d_ + "uriere" ; --# notpresent
    VPB (Fut Sub Pl P1) => d_ + "uriéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => d_ + "uriereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => d_ + "urieren" ; --# notpresent
    VPB (Cond Sg P1) => d_ + "oriría" ; --# notpresent
    VPB (Cond Sg P2) => d_ + "orirías" ; --# notpresent
    VPB (Cond Sg P3) => d_ + "oriría" ; --# notpresent
    VPB (Cond Pl P1) => d_ + "oriríamos" ; --# notpresent
    VPB (Cond Pl P2) => d_ + "oriríais" ; --# notpresent
    VPB (Cond Pl P3) => d_ + "orirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => d_ + "uere" ;
    VPB (Imper Sg P3) => d_ + "uera" ;
    VPB (Imper Pl P1) => d_ + "uramos" ;
    VPB (Imper Pl P2) => d_ + "orid" ;
    VPB (Imper Pl P3) => d_ + "ueran" ;
    VPB (Pass Sg Masc) => d_ + "orido" ;
    VPB (Pass Sg Fem) => d_ + "orida" ;
    VPB (Pass Pl Masc) => d_ + "oridos" ;
    VPB (Pass Pl Fem) => d_ + "oridas"
    }
  } ;
oper elegir_36 : Str -> Verbum = \elegir ->
  let el_ = Predef.tk 4 elegir ;
      el_verbum : Str -> Verbum = \part ->
   {s = table {
    VI Infn => el_ + "egir" ;
    VI Ger => el_ + "igiendo" ;
    VI Part => part ;
    VPB (Pres Ind Sg P1) => el_ + "ijo" ;
    VPB (Pres Ind Sg P2) => el_ + "iges" ;
    VPB (Pres Ind Sg P3) => el_ + "ige" ;
    VPB (Pres Ind Pl P1) => el_ + "egimos" ;
    VPB (Pres Ind Pl P2) => el_ + "egís" ;
    VPB (Pres Ind Pl P3) => el_ + "igen" ;
    VPB (Pres Sub Sg P1) => el_ + "ija" ;
    VPB (Pres Sub Sg P2) => el_ + "ijas" ;
    VPB (Pres Sub Sg P3) => el_ + "ija" ;
    VPB (Pres Sub Pl P1) => el_ + "ijamos" ;
    VPB (Pres Sub Pl P2) => el_ + "ijáis" ;
    VPB (Pres Sub Pl P3) => el_ + "ijan" ;
    VPB (Impf Ind Sg P1) => el_ + "egía" ; --# notpresent
    VPB (Impf Ind Sg P2) => el_ + "egías" ; --# notpresent
    VPB (Impf Ind Sg P3) => el_ + "egía" ; --# notpresent
    VPB (Impf Ind Pl P1) => el_ + "egíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => el_ + "egíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => el_ + "egían" ; --# notpresent
    VPB (Impf Sub Sg P1) => el_ + "igiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => el_ + "igieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => el_ + "igiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => el_ + "igiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => el_ + "igierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => el_ + "igieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => el_ + "igiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => el_ + "igieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => el_ + "igiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => el_ + "igiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => el_ + "igieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => el_ + "igiesen" ; --# notpresent
    VPB (Pret Sg P1) => el_ + "egí" ; --# notpresent
    VPB (Pret Sg P2) => el_ + "egiste" ; --# notpresent
    VPB (Pret Sg P3) => el_ + "igió" ; --# notpresent
    VPB (Pret Pl P1) => el_ + "egimos" ; --# notpresent
    VPB (Pret Pl P2) => el_ + "egisteis" ; --# notpresent
    VPB (Pret Pl P3) => el_ + "igieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => el_ + "egiré" ; --# notpresent
    VPB (Fut Ind Sg P2) => el_ + "egirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => el_ + "egirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => el_ + "egiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => el_ + "egiréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => el_ + "egirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => el_ + "igiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => el_ + "igieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => el_ + "igiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => el_ + "igiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => el_ + "igiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => el_ + "igieren" ; --# notpresent
    VPB (Cond Sg P1) => el_ + "egiría" ; --# notpresent
    VPB (Cond Sg P2) => el_ + "egirías" ; --# notpresent
    VPB (Cond Sg P3) => el_ + "egiría" ; --# notpresent
    VPB (Cond Pl P1) => el_ + "egiríamos" ; --# notpresent
    VPB (Cond Pl P2) => el_ + "egiríais" ; --# notpresent
    VPB (Cond Pl P3) => el_ + "egirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => el_ + "ige" ;
    VPB (Imper Sg P3) => el_ + "ija" ;
    VPB (Imper Pl P1) => el_ + "ijamos" ;
    VPB (Imper Pl P2) => el_ + "egid" ;
    VPB (Imper Pl P3) => el_ + "ijan" ;
    VPB (Pass Sg Masc) => part ;
    VPB (Pass Sg Fem) => init part + "a" ;
    VPB (Pass Pl Masc) => part + "s" ;
    VPB (Pass Pl Fem) => init part + "as"
    }}
  in el_verbum (variants {el_ + "egido" ; el_ + "ecto"}) ;

oper empezar_37 : Str -> Verbum = \empezar ->
  let emp_ = Predef.tk 4 empezar in
 {s = table {
    VI Infn => emp_ + "ezar" ;
    VI Ger => emp_ + "ezando" ;
    VI Part => emp_ + "ezado" ;
    VPB (Pres Ind Sg P1) => emp_ + "iezo" ;
    VPB (Pres Ind Sg P2) => emp_ + "iezas" ;
    VPB (Pres Ind Sg P3) => emp_ + "ieza" ;
    VPB (Pres Ind Pl P1) => emp_ + "ezamos" ;
    VPB (Pres Ind Pl P2) => emp_ + "ezáis" ;
    VPB (Pres Ind Pl P3) => emp_ + "iezan" ;
    VPB (Pres Sub Sg P1) => emp_ + "iece" ;
    VPB (Pres Sub Sg P2) => emp_ + "ieces" ;
    VPB (Pres Sub Sg P3) => emp_ + "iece" ;
    VPB (Pres Sub Pl P1) => emp_ + "ecemos" ;
    VPB (Pres Sub Pl P2) => emp_ + "ecéis" ;
    VPB (Pres Sub Pl P3) => emp_ + "iecen" ;
    VPB (Impf Ind Sg P1) => emp_ + "ezaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => emp_ + "ezabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => emp_ + "ezaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => emp_ + "ezábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => emp_ + "ezabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => emp_ + "ezaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => emp_ + "ezara" ; --# notpresent
    VPB (Impf Sub Sg P2) => emp_ + "ezaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => emp_ + "ezara" ; --# notpresent
    VPB (Impf Sub Pl P1) => emp_ + "ezáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => emp_ + "ezarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => emp_ + "ezaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => emp_ + "ezase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => emp_ + "ezases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => emp_ + "ezase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => emp_ + "ezásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => emp_ + "ezaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => emp_ + "ezasen" ; --# notpresent
    VPB (Pret Sg P1) => emp_ + "ecé" ; --# notpresent
    VPB (Pret Sg P2) => emp_ + "ezaste" ; --# notpresent
    VPB (Pret Sg P3) => emp_ + "ezó" ; --# notpresent
    VPB (Pret Pl P1) => emp_ + "ezamos" ; --# notpresent
    VPB (Pret Pl P2) => emp_ + "ezasteis" ; --# notpresent
    VPB (Pret Pl P3) => emp_ + "ezaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => emp_ + "ezaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => emp_ + "ezarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => emp_ + "ezará" ; --# notpresent
    VPB (Fut Ind Pl P1) => emp_ + "ezaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => emp_ + "ezaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => emp_ + "ezarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => emp_ + "ezare" ; --# notpresent
    VPB (Fut Sub Sg P2) => emp_ + "ezares" ; --# notpresent
    VPB (Fut Sub Sg P3) => emp_ + "ezare" ; --# notpresent
    VPB (Fut Sub Pl P1) => emp_ + "ezáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => emp_ + "ezareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => emp_ + "ezaren" ; --# notpresent
    VPB (Cond Sg P1) => emp_ + "ezaría" ; --# notpresent
    VPB (Cond Sg P2) => emp_ + "ezarías" ; --# notpresent
    VPB (Cond Sg P3) => emp_ + "ezaría" ; --# notpresent
    VPB (Cond Pl P1) => emp_ + "ezaríamos" ; --# notpresent
    VPB (Cond Pl P2) => emp_ + "ezaríais" ; --# notpresent
    VPB (Cond Pl P3) => emp_ + "ezarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => emp_ + "ieza" ;
    VPB (Imper Sg P3) => emp_ + "iece" ;
    VPB (Imper Pl P1) => emp_ + "ecemos" ;
    VPB (Imper Pl P2) => emp_ + "ezad" ;
    VPB (Imper Pl P3) => emp_ + "iecen" ;
    VPB (Pass Sg Masc) => emp_ + "ezado" ;
    VPB (Pass Sg Fem) => emp_ + "ezada" ;
    VPB (Pass Pl Masc) => emp_ + "ezados" ;
    VPB (Pass Pl Fem) => emp_ + "ezadas"
    }
  } ;
oper encontrar_38 : Str -> Verbum = \encontrar ->
  let 
    enc_ = Predef.tk 6 encontrar ;
    ntr_ = Predef.dp 3 (Predef.tk 2 encontrar)
  in
 {s = table {
    VI Infn => enc_ + "o" + ntr_ + "ar" ;
    VI Ger => enc_ + "o" + ntr_ + "ando" ;
    VI Part => enc_ + "o" + ntr_ + "ado" ;
    VPB (Pres Ind Sg P1) => enc_ + "ue" + ntr_ + "o" ;
    VPB (Pres Ind Sg P2) => enc_ + "ue" + ntr_ + "as" ;
    VPB (Pres Ind Sg P3) => enc_ + "ue" + ntr_ + "a" ;
    VPB (Pres Ind Pl P1) => enc_ + "o" + ntr_ + "amos" ;
    VPB (Pres Ind Pl P2) => enc_ + "o" + ntr_ + "áis" ;
    VPB (Pres Ind Pl P3) => enc_ + "ue" + ntr_ + "an" ;
    VPB (Pres Sub Sg P1) => enc_ + "ue" + ntr_ + "e" ;
    VPB (Pres Sub Sg P2) => enc_ + "ue" + ntr_ + "es" ;
    VPB (Pres Sub Sg P3) => enc_ + "ue" + ntr_ + "e" ;
    VPB (Pres Sub Pl P1) => enc_ + "o" + ntr_ + "emos" ;
    VPB (Pres Sub Pl P2) => enc_ + "o" + ntr_ + "éis" ;
    VPB (Pres Sub Pl P3) => enc_ + "ue" + ntr_ + "en" ;
    VPB (Impf Ind Sg P1) => enc_ + "o" + ntr_ + "aba" ; --# notpresent
    VPB (Impf Ind Sg P2) => enc_ + "o" + ntr_ + "abas" ; --# notpresent
    VPB (Impf Ind Sg P3) => enc_ + "o" + ntr_ + "aba" ; --# notpresent
    VPB (Impf Ind Pl P1) => enc_ + "o" + ntr_ + "ábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => enc_ + "o" + ntr_ + "abais" ; --# notpresent
    VPB (Impf Ind Pl P3) => enc_ + "o" + ntr_ + "aban" ; --# notpresent
    VPB (Impf Sub Sg P1) => enc_ + "o" + ntr_ + "ara" ; --# notpresent
    VPB (Impf Sub Sg P2) => enc_ + "o" + ntr_ + "aras" ; --# notpresent
    VPB (Impf Sub Sg P3) => enc_ + "o" + ntr_ + "ara" ; --# notpresent
    VPB (Impf Sub Pl P1) => enc_ + "o" + ntr_ + "áramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => enc_ + "o" + ntr_ + "arais" ; --# notpresent
    VPB (Impf Sub Pl P3) => enc_ + "o" + ntr_ + "aran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => enc_ + "o" + ntr_ + "ase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => enc_ + "o" + ntr_ + "ases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => enc_ + "o" + ntr_ + "ase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => enc_ + "o" + ntr_ + "ásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => enc_ + "o" + ntr_ + "aseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => enc_ + "o" + ntr_ + "asen" ; --# notpresent
    VPB (Pret Sg P1) => enc_ + "o" + ntr_ + "é" ; --# notpresent
    VPB (Pret Sg P2) => enc_ + "o" + ntr_ + "aste" ; --# notpresent
    VPB (Pret Sg P3) => enc_ + "o" + ntr_ + "ó" ; --# notpresent
    VPB (Pret Pl P1) => enc_ + "o" + ntr_ + "amos" ; --# notpresent
    VPB (Pret Pl P2) => enc_ + "o" + ntr_ + "asteis" ; --# notpresent
    VPB (Pret Pl P3) => enc_ + "o" + ntr_ + "aron" ; --# notpresent
    VPB (Fut Ind Sg P1) => enc_ + "o" + ntr_ + "aré" ; --# notpresent
    VPB (Fut Ind Sg P2) => enc_ + "o" + ntr_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => enc_ + "o" + ntr_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => enc_ + "o" + ntr_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => enc_ + "o" + ntr_ + "aréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => enc_ + "o" + ntr_ + "arán" ; --# notpresent
    VPB (Fut Sub Sg P1) => enc_ + "o" + ntr_ + "are" ; --# notpresent
    VPB (Fut Sub Sg P2) => enc_ + "o" + ntr_ + "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => enc_ + "o" + ntr_ + "are" ; --# notpresent
    VPB (Fut Sub Pl P1) => enc_ + "o" + ntr_ + "áremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => enc_ + "o" + ntr_ + "areis" ; --# notpresent
    VPB (Fut Sub Pl P3) => enc_ + "o" + ntr_ + "aren" ; --# notpresent
    VPB (Cond Sg P1) => enc_ + "o" + ntr_ + "aría" ; --# notpresent
    VPB (Cond Sg P2) => enc_ + "o" + ntr_ + "arías" ; --# notpresent
    VPB (Cond Sg P3) => enc_ + "o" + ntr_ + "aría" ; --# notpresent
    VPB (Cond Pl P1) => enc_ + "o" + ntr_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => enc_ + "o" + ntr_ + "aríais" ; --# notpresent
    VPB (Cond Pl P3) => enc_ + "o" + ntr_ + "arían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => enc_ + "ue" + ntr_ + "a" ;
    VPB (Imper Sg P3) => enc_ + "ue" + ntr_ + "e" ;
    VPB (Imper Pl P1) => enc_ + "o" + ntr_ + "emos" ;
    VPB (Imper Pl P2) => enc_ + "o" + ntr_ + "ad" ;
    VPB (Imper Pl P3) => enc_ + "ue" + ntr_ + "en" ;
    VPB (Pass Sg Masc) => enc_ + "o" + ntr_ + "ado" ;
    VPB (Pass Sg Fem) => enc_ + "o" + ntr_ + "ada" ;
    VPB (Pass Pl Masc) => enc_ + "o" + ntr_ + "ados" ;
    VPB (Pass Pl Fem) => enc_ + "o" + ntr_ + "adas"
    }
  } ;
oper contar_38b : Str -> Verbum = \contar ->
  let c_ = Predef.tk 5 contar in
 {s = table {
    VI Infn => c_ + "ontar" ;
    VI Ger => c_ + "ontando" ;
    VI Part => c_ + "ontado" ;
    VPB (Pres Ind Sg P1) => c_ + "uento" ;
    VPB (Pres Ind Sg P2) => c_ + "uentas" ;
    VPB (Pres Ind Sg P3) => c_ + "uenta" ;
    VPB (Pres Ind Pl P1) => c_ + "ontamos" ;
    VPB (Pres Ind Pl P2) => c_ + "ontáis" ;
    VPB (Pres Ind Pl P3) => c_ + "uentan" ;
    VPB (Pres Sub Sg P1) => c_ + "uente" ;
    VPB (Pres Sub Sg P2) => c_ + "uentes" ;
    VPB (Pres Sub Sg P3) => c_ + "uente" ;
    VPB (Pres Sub Pl P1) => c_ + "ontemos" ;
    VPB (Pres Sub Pl P2) => c_ + "ontéis" ;
    VPB (Pres Sub Pl P3) => c_ + "uenten" ;
    VPB (Impf Ind Sg P1) => c_ + "ontaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => c_ + "ontabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => c_ + "ontaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => c_ + "ontábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => c_ + "ontabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => c_ + "ontaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => c_ + "ontara" ; --# notpresent
    VPB (Impf Sub Sg P2) => c_ + "ontaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => c_ + "ontara" ; --# notpresent
    VPB (Impf Sub Pl P1) => c_ + "ontáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => c_ + "ontarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => c_ + "ontaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => c_ + "ontase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => c_ + "ontases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => c_ + "ontase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => c_ + "ontásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => c_ + "ontaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => c_ + "ontasen" ; --# notpresent
    VPB (Pret Sg P1) => c_ + "onté" ; --# notpresent
    VPB (Pret Sg P2) => c_ + "ontaste" ; --# notpresent
    VPB (Pret Sg P3) => c_ + "ontó" ; --# notpresent
    VPB (Pret Pl P1) => c_ + "ontamos" ; --# notpresent
    VPB (Pret Pl P2) => c_ + "ontasteis" ; --# notpresent
    VPB (Pret Pl P3) => c_ + "ontaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => c_ + "ontaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => c_ + "ontarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => c_ + "ontará" ; --# notpresent
    VPB (Fut Ind Pl P1) => c_ + "ontaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => c_ + "ontaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => c_ + "ontarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => c_ + "ontare" ; --# notpresent
    VPB (Fut Sub Sg P2) => c_ + "ontares" ; --# notpresent
    VPB (Fut Sub Sg P3) => c_ + "ontare" ; --# notpresent
    VPB (Fut Sub Pl P1) => c_ + "ontáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => c_ + "ontareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => c_ + "ontaren" ; --# notpresent
    VPB (Cond Sg P1) => c_ + "ontaría" ; --# notpresent
    VPB (Cond Sg P2) => c_ + "ontarías" ; --# notpresent
    VPB (Cond Sg P3) => c_ + "ontaría" ; --# notpresent
    VPB (Cond Pl P1) => c_ + "ontaríamos" ; --# notpresent
    VPB (Cond Pl P2) => c_ + "ontaríais" ; --# notpresent
    VPB (Cond Pl P3) => c_ + "ontarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => c_ + "uenta" ;
    VPB (Imper Sg P3) => c_ + "uente" ;
    VPB (Imper Pl P1) => c_ + "ontemos" ;
    VPB (Imper Pl P2) => c_ + "ontad" ;
    VPB (Imper Pl P3) => c_ + "uenten" ;
    VPB (Pass Sg Masc) => c_ + "ontado" ;
    VPB (Pass Sg Fem) => c_ + "ontada" ;
    VPB (Pass Pl Masc) => c_ + "ontados" ;
    VPB (Pass Pl Fem) => c_ + "ontadas"
    }
  } ;
oper enraizar_39 : Str -> Verbum = \enraizar ->
  let enra_ = Predef.tk 4 enraizar in
 {s = table {
    VI Infn => enra_ + "izar" ;
    VI Ger => enra_ + "izando" ;
    VI Part => enra_ + "izado" ;
    VPB (Pres Ind Sg P1) => enra_ + "ízo" ;
    VPB (Pres Ind Sg P2) => enra_ + "ízas" ;
    VPB (Pres Ind Sg P3) => enra_ + "íza" ;
    VPB (Pres Ind Pl P1) => enra_ + "izamos" ;
    VPB (Pres Ind Pl P2) => enra_ + "izáis" ;
    VPB (Pres Ind Pl P3) => enra_ + "ízan" ;
    VPB (Pres Sub Sg P1) => enra_ + "íce" ;
    VPB (Pres Sub Sg P2) => enra_ + "íces" ;
    VPB (Pres Sub Sg P3) => enra_ + "íce" ;
    VPB (Pres Sub Pl P1) => enra_ + "icemos" ;
    VPB (Pres Sub Pl P2) => enra_ + "icéis" ;
    VPB (Pres Sub Pl P3) => enra_ + "ícen" ;
    VPB (Impf Ind Sg P1) => enra_ + "izaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => enra_ + "izabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => enra_ + "izaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => enra_ + "izábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => enra_ + "izabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => enra_ + "izaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => enra_ + "izara" ; --# notpresent
    VPB (Impf Sub Sg P2) => enra_ + "izaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => enra_ + "izara" ; --# notpresent
    VPB (Impf Sub Pl P1) => enra_ + "izáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => enra_ + "izarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => enra_ + "izaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => enra_ + "izase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => enra_ + "izases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => enra_ + "izase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => enra_ + "izásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => enra_ + "izaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => enra_ + "izasen" ; --# notpresent
    VPB (Pret Sg P1) => enra_ + "icé" ; --# notpresent
    VPB (Pret Sg P2) => enra_ + "izaste" ; --# notpresent
    VPB (Pret Sg P3) => enra_ + "izó" ; --# notpresent
    VPB (Pret Pl P1) => enra_ + "izamos" ; --# notpresent
    VPB (Pret Pl P2) => enra_ + "izasteis" ; --# notpresent
    VPB (Pret Pl P3) => enra_ + "izaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => enra_ + "izaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => enra_ + "izarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => enra_ + "izará" ; --# notpresent
    VPB (Fut Ind Pl P1) => enra_ + "izaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => enra_ + "izaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => enra_ + "izarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => enra_ + "izare" ; --# notpresent
    VPB (Fut Sub Sg P2) => enra_ + "izares" ; --# notpresent
    VPB (Fut Sub Sg P3) => enra_ + "izare" ; --# notpresent
    VPB (Fut Sub Pl P1) => enra_ + "izáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => enra_ + "izareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => enra_ + "izaren" ; --# notpresent
    VPB (Cond Sg P1) => enra_ + "izaría" ; --# notpresent
    VPB (Cond Sg P2) => enra_ + "izarías" ; --# notpresent
    VPB (Cond Sg P3) => enra_ + "izaría" ; --# notpresent
    VPB (Cond Pl P1) => enra_ + "izaríamos" ; --# notpresent
    VPB (Cond Pl P2) => enra_ + "izaríais" ; --# notpresent
    VPB (Cond Pl P3) => enra_ + "izarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => enra_ + "íza" ;
    VPB (Imper Sg P3) => enra_ + "íce" ;
    VPB (Imper Pl P1) => enra_ + "icemos" ;
    VPB (Imper Pl P2) => enra_ + "izad" ;
    VPB (Imper Pl P3) => enra_ + "ícen" ;
    VPB (Pass Sg Masc) => enra_ + "izado" ;
    VPB (Pass Sg Fem) => enra_ + "izada" ;
    VPB (Pass Pl Masc) => enra_ + "izados" ;
    VPB (Pass Pl Fem) => enra_ + "izadas"
    }
  } ;
oper erguir_40 : Str -> Verbum = \erguir ->
  let x_ = Predef.tk 6 erguir in
 {s = table {
    VI Infn => x_ + "erguir" ;
    VI Ger => x_ + "irguiendo" ;
    VI Part => x_ + "erguido" ;
    VPB (Pres Ind Sg P1) => x_ + "yergo" ;
    VPB (Pres Ind Sg P2) => x_ + "yergues" ;
    VPB (Pres Ind Sg P3) => x_ + "yergue" ;
    VPB (Pres Ind Pl P1) => x_ + "erguimos" ;
    VPB (Pres Ind Pl P2) => x_ + "erguís" ;
    VPB (Pres Ind Pl P3) => x_ + "yerguen" ;
    VPB (Pres Sub Sg P1) => x_ + "yerga" ;
    VPB (Pres Sub Sg P2) => x_ + "yergas" ;
    VPB (Pres Sub Sg P3) => x_ + "yerga" ;
    VPB (Pres Sub Pl P1) => x_ + "irgamos" ;
    VPB (Pres Sub Pl P2) => x_ + "irgáis" ;
    VPB (Pres Sub Pl P3) => x_ + "yergan" ;
    VPB (Impf Ind Sg P1) => x_ + "erguía" ; --# notpresent
    VPB (Impf Ind Sg P2) => x_ + "erguías" ; --# notpresent
    VPB (Impf Ind Sg P3) => x_ + "erguía" ; --# notpresent
    VPB (Impf Ind Pl P1) => x_ + "erguíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => x_ + "erguíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => x_ + "erguían" ; --# notpresent
    VPB (Impf Sub Sg P1) => x_ + "irguiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => x_ + "irguieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => x_ + "irguiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => x_ + "irguiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => x_ + "irguierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => x_ + "irguieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => x_ + "irguiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => x_ + "irguieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => x_ + "irguiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => x_ + "irguiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => x_ + "irguieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => x_ + "irguiesen" ; --# notpresent
    VPB (Pret Sg P1) => x_ + "erguí" ; --# notpresent
    VPB (Pret Sg P2) => x_ + "erguiste" ; --# notpresent
    VPB (Pret Sg P3) => x_ + "irguió" ; --# notpresent
    VPB (Pret Pl P1) => x_ + "erguimos" ; --# notpresent
    VPB (Pret Pl P2) => x_ + "erguisteis" ; --# notpresent
    VPB (Pret Pl P3) => x_ + "irguieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "erguiré" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "erguirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "erguirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "erguiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "erguiréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "erguirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "irguiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "irguieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "irguiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "irguiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "irguiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "irguieren" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "erguiría" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "erguirías" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "erguiría" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "erguiríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "erguiríais" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "erguirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => x_ + "yergue" ;
    VPB (Imper Sg P3) => x_ + "yerga" ;
    VPB (Imper Pl P1) => x_ + "yergamos" ;
    VPB (Imper Pl P2) => x_ + "erguid" ;
    VPB (Imper Pl P3) => x_ + "yergan" ;
    VPB (Pass Sg Masc) => x_ + "erguido" ;
    VPB (Pass Sg Fem) => x_ + "erguida" ;
    VPB (Pass Pl Masc) => x_ + "erguidos" ;
    VPB (Pass Pl Fem) => x_ + "erguidas"
    }
  } ;
oper errar_41 : Str -> Verbum = \errar ->
  let x_ = Predef.tk 5 errar in
 {s = table {
    VI Infn => x_ + "errar" ;
    VI Ger => x_ + "errando" ;
    VI Part => x_ + "errado" ;
    VPB (Pres Ind Sg P1) => x_ + "yerro" ;
    VPB (Pres Ind Sg P2) => x_ + "yerras" ;
    VPB (Pres Ind Sg P3) => x_ + "yerra" ;
    VPB (Pres Ind Pl P1) => x_ + "erramos" ;
    VPB (Pres Ind Pl P2) => x_ + "erráis" ;
    VPB (Pres Ind Pl P3) => x_ + "yerran" ;
    VPB (Pres Sub Sg P1) => x_ + "yerre" ;
    VPB (Pres Sub Sg P2) => x_ + "yerres" ;
    VPB (Pres Sub Sg P3) => x_ + "yerre" ;
    VPB (Pres Sub Pl P1) => x_ + "erremos" ;
    VPB (Pres Sub Pl P2) => x_ + "erréis" ;
    VPB (Pres Sub Pl P3) => x_ + "yerren" ;
    VPB (Impf Ind Sg P1) => x_ + "erraba" ; --# notpresent
    VPB (Impf Ind Sg P2) => x_ + "errabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => x_ + "erraba" ; --# notpresent
    VPB (Impf Ind Pl P1) => x_ + "errábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => x_ + "errabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => x_ + "erraban" ; --# notpresent
    VPB (Impf Sub Sg P1) => x_ + "errara" ; --# notpresent
    VPB (Impf Sub Sg P2) => x_ + "erraras" ; --# notpresent
    VPB (Impf Sub Sg P3) => x_ + "errara" ; --# notpresent
    VPB (Impf Sub Pl P1) => x_ + "erráramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => x_ + "errarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => x_ + "erraran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => x_ + "errase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => x_ + "errases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => x_ + "errase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => x_ + "errásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => x_ + "erraseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => x_ + "errasen" ; --# notpresent
    VPB (Pret Sg P1) => x_ + "erré" ; --# notpresent
    VPB (Pret Sg P2) => x_ + "erraste" ; --# notpresent
    VPB (Pret Sg P3) => x_ + "erró" ; --# notpresent
    VPB (Pret Pl P1) => x_ + "erramos" ; --# notpresent
    VPB (Pret Pl P2) => x_ + "errasteis" ; --# notpresent
    VPB (Pret Pl P3) => x_ + "erraron" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "erraré" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "errarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "errará" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "erraremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "erraréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "errarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "errare" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "errares" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "errare" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "erráremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "errareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "erraren" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "erraría" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "errarías" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "erraría" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "erraríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "erraríais" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "errarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => x_ + "yerra" ;
    VPB (Imper Sg P3) => x_ + "yerre" ;
    VPB (Imper Pl P1) => x_ + "erremos" ;
    VPB (Imper Pl P2) => x_ + "errad" ;
    VPB (Imper Pl P3) => x_ + "yerren" ;
    VPB (Pass Sg Masc) => x_ + "errado" ;
    VPB (Pass Sg Fem) => x_ + "errada" ;
    VPB (Pass Pl Masc) => x_ + "errados" ;
    VPB (Pass Pl Fem) => x_ + "erradas"
    }
  } ;
oper forzar_42 : Str -> Verbum = \forzar ->
  let f_ = Predef.tk 5 forzar in
 {s = table {
    VI Infn => f_ + "orzar" ;
    VI Ger => f_ + "orzando" ;
    VI Part => f_ + "orzado" ;
    VPB (Pres Ind Sg P1) => f_ + "uerzo" ;
    VPB (Pres Ind Sg P2) => f_ + "uerzas" ;
    VPB (Pres Ind Sg P3) => f_ + "uerza" ;
    VPB (Pres Ind Pl P1) => f_ + "orzamos" ;
    VPB (Pres Ind Pl P2) => f_ + "orzáis" ;
    VPB (Pres Ind Pl P3) => f_ + "uerzan" ;
    VPB (Pres Sub Sg P1) => f_ + "uerce" ;
    VPB (Pres Sub Sg P2) => f_ + "uerces" ;
    VPB (Pres Sub Sg P3) => f_ + "uerce" ;
    VPB (Pres Sub Pl P1) => f_ + "orcemos" ;
    VPB (Pres Sub Pl P2) => f_ + "orcéis" ;
    VPB (Pres Sub Pl P3) => f_ + "uercen" ;
    VPB (Impf Ind Sg P1) => f_ + "orzaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => f_ + "orzabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => f_ + "orzaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => f_ + "orzábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => f_ + "orzabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => f_ + "orzaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => f_ + "orzara" ; --# notpresent
    VPB (Impf Sub Sg P2) => f_ + "orzaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => f_ + "orzara" ; --# notpresent
    VPB (Impf Sub Pl P1) => f_ + "orzáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => f_ + "orzarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => f_ + "orzaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => f_ + "orzase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => f_ + "orzases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => f_ + "orzase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => f_ + "orzásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => f_ + "orzaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => f_ + "orzasen" ; --# notpresent
    VPB (Pret Sg P1) => f_ + "orcé" ; --# notpresent
    VPB (Pret Sg P2) => f_ + "orzaste" ; --# notpresent
    VPB (Pret Sg P3) => f_ + "orzó" ; --# notpresent
    VPB (Pret Pl P1) => f_ + "orzamos" ; --# notpresent
    VPB (Pret Pl P2) => f_ + "orzasteis" ; --# notpresent
    VPB (Pret Pl P3) => f_ + "orzaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => f_ + "orzaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => f_ + "orzarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => f_ + "orzará" ; --# notpresent
    VPB (Fut Ind Pl P1) => f_ + "orzaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => f_ + "orzaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => f_ + "orzarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => f_ + "orzare" ; --# notpresent
    VPB (Fut Sub Sg P2) => f_ + "orzares" ; --# notpresent
    VPB (Fut Sub Sg P3) => f_ + "orzare" ; --# notpresent
    VPB (Fut Sub Pl P1) => f_ + "orzáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => f_ + "orzareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => f_ + "orzaren" ; --# notpresent
    VPB (Cond Sg P1) => f_ + "orzaría" ; --# notpresent
    VPB (Cond Sg P2) => f_ + "orzarías" ; --# notpresent
    VPB (Cond Sg P3) => f_ + "orzaría" ; --# notpresent
    VPB (Cond Pl P1) => f_ + "orzaríamos" ; --# notpresent
    VPB (Cond Pl P2) => f_ + "orzaríais" ; --# notpresent
    VPB (Cond Pl P3) => f_ + "orzarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => f_ + "uerza" ;
    VPB (Imper Sg P3) => f_ + "uerce" ;
    VPB (Imper Pl P1) => f_ + "orcemos" ;
    VPB (Imper Pl P2) => f_ + "orzad" ;
    VPB (Imper Pl P3) => f_ + "uercen" ;
    VPB (Pass Sg Masc) => f_ + "orzado" ;
    VPB (Pass Sg Fem) => f_ + "orzada" ;
    VPB (Pass Pl Masc) => f_ + "orzados" ;
    VPB (Pass Pl Fem) => f_ + "orzadas"
    }
  } ;
oper guiar_43 : Str -> Verbum = \guiar ->
  let gu_ = Predef.tk 3 guiar in
 {s = table {
    VI Infn => gu_ + "iar" ;
    VI Ger => gu_ + "iando" ;
    VI Part => gu_ + "iado" ;
    VPB (Pres Ind Sg P1) => gu_ + "ío" ;
    VPB (Pres Ind Sg P2) => gu_ + "ías" ;
    VPB (Pres Ind Sg P3) => gu_ + "ía" ;
    VPB (Pres Ind Pl P1) => gu_ + "iamos" ;
    VPB (Pres Ind Pl P2) => gu_ + "iáis" ;
    VPB (Pres Ind Pl P3) => gu_ + "ían" ;
    VPB (Pres Sub Sg P1) => gu_ + "íe" ;
    VPB (Pres Sub Sg P2) => gu_ + "íes" ;
    VPB (Pres Sub Sg P3) => gu_ + "íe" ;
    VPB (Pres Sub Pl P1) => gu_ + "iemos" ;
    VPB (Pres Sub Pl P2) => gu_ + "iéis" ;
    VPB (Pres Sub Pl P3) => gu_ + "íen" ;
    VPB (Impf Ind Sg P1) => gu_ + "iaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => gu_ + "iabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => gu_ + "iaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => gu_ + "iábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => gu_ + "iabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => gu_ + "iaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => gu_ + "iara" ; --# notpresent
    VPB (Impf Sub Sg P2) => gu_ + "iaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => gu_ + "iara" ; --# notpresent
    VPB (Impf Sub Pl P1) => gu_ + "iáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => gu_ + "iarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => gu_ + "iaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => gu_ + "iase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => gu_ + "iases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => gu_ + "iase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => gu_ + "iásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => gu_ + "iaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => gu_ + "iasen" ; --# notpresent
    VPB (Pret Sg P1) => gu_ + "ié" ; --# notpresent
    VPB (Pret Sg P2) => gu_ + "iaste" ; --# notpresent
    VPB (Pret Sg P3) => gu_ + "ió" ; --# notpresent
    VPB (Pret Pl P1) => gu_ + "iamos" ; --# notpresent
    VPB (Pret Pl P2) => gu_ + "iasteis" ; --# notpresent
    VPB (Pret Pl P3) => gu_ + "iaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => gu_ + "iaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => gu_ + "iarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => gu_ + "iará" ; --# notpresent
    VPB (Fut Ind Pl P1) => gu_ + "iaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => gu_ + "iaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => gu_ + "iarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => gu_ + "iare" ; --# notpresent
    VPB (Fut Sub Sg P2) => gu_ + "iares" ; --# notpresent
    VPB (Fut Sub Sg P3) => gu_ + "iare" ; --# notpresent
    VPB (Fut Sub Pl P1) => gu_ + "iáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => gu_ + "iareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => gu_ + "iaren" ; --# notpresent
    VPB (Cond Sg P1) => gu_ + "iaría" ; --# notpresent
    VPB (Cond Sg P2) => gu_ + "iarías" ; --# notpresent
    VPB (Cond Sg P3) => gu_ + "iaría" ; --# notpresent
    VPB (Cond Pl P1) => gu_ + "iaríamos" ; --# notpresent
    VPB (Cond Pl P2) => gu_ + "iaríais" ; --# notpresent
    VPB (Cond Pl P3) => gu_ + "iarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => gu_ + "ía" ;
    VPB (Imper Sg P3) => gu_ + "íe" ;
    VPB (Imper Pl P1) => gu_ + "iemos" ;
    VPB (Imper Pl P2) => gu_ + "iad" ;
    VPB (Imper Pl P3) => gu_ + "íen" ;
    VPB (Pass Sg Masc) => gu_ + "iado" ;
    VPB (Pass Sg Fem) => gu_ + "iada" ;
    VPB (Pass Pl Masc) => gu_ + "iados" ;
    VPB (Pass Pl Fem) => gu_ + "iadas"
    }
  } ;
oper hacer_44 : Str -> Verbum = \hacer ->
  let h_ = Predef.tk 4 hacer in
 {s = table {
    VI Infn => h_ + "acer" ;
    VI Ger => h_ + "aciendo" ;
    VI Part => h_ + "echo" ;
    VPB (Pres Ind Sg P1) => h_ + "ago" ;
    VPB (Pres Ind Sg P2) => h_ + "aces" ;
    VPB (Pres Ind Sg P3) => h_ + "ace" ;
    VPB (Pres Ind Pl P1) => h_ + "acemos" ;
    VPB (Pres Ind Pl P2) => h_ + "acéis" ;
    VPB (Pres Ind Pl P3) => h_ + "acen" ;
    VPB (Pres Sub Sg P1) => h_ + "aga" ;
    VPB (Pres Sub Sg P2) => h_ + "agas" ;
    VPB (Pres Sub Sg P3) => h_ + "aga" ;
    VPB (Pres Sub Pl P1) => h_ + "agamos" ;
    VPB (Pres Sub Pl P2) => h_ + "agáis" ;
    VPB (Pres Sub Pl P3) => h_ + "agan" ;
    VPB (Impf Ind Sg P1) => h_ + "acía" ; --# notpresent
    VPB (Impf Ind Sg P2) => h_ + "acías" ; --# notpresent
    VPB (Impf Ind Sg P3) => h_ + "acía" ; --# notpresent
    VPB (Impf Ind Pl P1) => h_ + "acíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => h_ + "acíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => h_ + "acían" ; --# notpresent
    VPB (Impf Sub Sg P1) => h_ + "iciera" ; --# notpresent
    VPB (Impf Sub Sg P2) => h_ + "icieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => h_ + "iciera" ; --# notpresent
    VPB (Impf Sub Pl P1) => h_ + "iciéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => h_ + "icierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => h_ + "icieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => h_ + "iciese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => h_ + "icieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => h_ + "iciese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => h_ + "iciésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => h_ + "icieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => h_ + "iciesen" ; --# notpresent
    VPB (Pret Sg P1) => h_ + "ice" ; --# notpresent
    VPB (Pret Sg P2) => h_ + "iciste" ; --# notpresent
    VPB (Pret Sg P3) => h_ + "izo" ; --# notpresent
    VPB (Pret Pl P1) => h_ + "icimos" ; --# notpresent
    VPB (Pret Pl P2) => h_ + "icisteis" ; --# notpresent
    VPB (Pret Pl P3) => h_ + "icieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => h_ + "aré" ; --# notpresent
    VPB (Fut Ind Sg P2) => h_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => h_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => h_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => h_ + "aréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => h_ + "arán" ; --# notpresent
    VPB (Fut Sub Sg P1) => h_ + "iciere" ; --# notpresent
    VPB (Fut Sub Sg P2) => h_ + "icieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => h_ + "iciere" ; --# notpresent
    VPB (Fut Sub Pl P1) => h_ + "iciéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => h_ + "iciereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => h_ + "icieren" ; --# notpresent
    VPB (Cond Sg P1) => h_ + "aría" ; --# notpresent
    VPB (Cond Sg P2) => h_ + "arías" ; --# notpresent
    VPB (Cond Sg P3) => h_ + "aría" ; --# notpresent
    VPB (Cond Pl P1) => h_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => h_ + "aríais" ; --# notpresent
    VPB (Cond Pl P3) => h_ + "arían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => h_ + "az" ;
    VPB (Imper Sg P3) => h_ + "aga" ;
    VPB (Imper Pl P1) => h_ + "agamos" ;
    VPB (Imper Pl P2) => h_ + "aced" ;
    VPB (Imper Pl P3) => h_ + "agan" ;
    VPB (Pass Sg Masc) => h_ + "echo" ;
    VPB (Pass Sg Fem) => h_ + "echa" ;
    VPB (Pass Pl Masc) => h_ + "echos" ;
    VPB (Pass Pl Fem) => h_ + "echas"
    }
  } ;
oper influir_45 : Str -> Verbum = \influir ->
  let influ_ = Predef.tk 2 influir in
 {s = table {
    VI Infn => influ_ + "ir" ;
    VI Ger => influ_ + "yendo" ;
    VI Part => influ_ + "ido" ;
    VPB (Pres Ind Sg P1) => influ_ + "yo" ;
    VPB (Pres Ind Sg P2) => influ_ + "yes" ;
    VPB (Pres Ind Sg P3) => influ_ + "ye" ;
    VPB (Pres Ind Pl P1) => influ_ + "imos" ;
    VPB (Pres Ind Pl P2) => influ_ + "ís" ;
    VPB (Pres Ind Pl P3) => influ_ + "yen" ;
    VPB (Pres Sub Sg P1) => influ_ + "ya" ;
    VPB (Pres Sub Sg P2) => influ_ + "yas" ;
    VPB (Pres Sub Sg P3) => influ_ + "ya" ;
    VPB (Pres Sub Pl P1) => influ_ + "yamos" ;
    VPB (Pres Sub Pl P2) => influ_ + "yáis" ;
    VPB (Pres Sub Pl P3) => influ_ + "yan" ;
    VPB (Impf Ind Sg P1) => influ_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => influ_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => influ_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => influ_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => influ_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => influ_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => influ_ + "yera" ; --# notpresent
    VPB (Impf Sub Sg P2) => influ_ + "yeras" ; --# notpresent
    VPB (Impf Sub Sg P3) => influ_ + "yera" ; --# notpresent
    VPB (Impf Sub Pl P1) => influ_ + "yéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => influ_ + "yerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => influ_ + "yeran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => influ_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => influ_ + "yeses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => influ_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => influ_ + "yésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => influ_ + "yeseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => influ_ + "yesen" ; --# notpresent
    VPB (Pret Sg P1) => influ_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => influ_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => influ_ + "yó" ; --# notpresent
    VPB (Pret Pl P1) => influ_ + "imos" ; --# notpresent
    VPB (Pret Pl P2) => influ_ + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => influ_ + "yeron" ; --# notpresent
    VPB (Fut Ind Sg P1) => influ_ + "iré" ; --# notpresent
    VPB (Fut Ind Sg P2) => influ_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => influ_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => influ_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => influ_ + "iréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => influ_ + "irán" ; --# notpresent
    VPB (Fut Sub Sg P1) => influ_ + "yere" ; --# notpresent
    VPB (Fut Sub Sg P2) => influ_ + "yeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => influ_ + "yere" ; --# notpresent
    VPB (Fut Sub Pl P1) => influ_ + "yéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => influ_ + "yereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => influ_ + "yeren" ; --# notpresent
    VPB (Cond Sg P1) => influ_ + "iría" ; --# notpresent
    VPB (Cond Sg P2) => influ_ + "irías" ; --# notpresent
    VPB (Cond Sg P3) => influ_ + "iría" ; --# notpresent
    VPB (Cond Pl P1) => influ_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => influ_ + "iríais" ; --# notpresent
    VPB (Cond Pl P3) => influ_ + "irían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => influ_ + "ye" ;
    VPB (Imper Sg P3) => influ_ + "ya" ;
    VPB (Imper Pl P1) => influ_ + "yamos" ;
    VPB (Imper Pl P2) => influ_ + "id" ;
    VPB (Imper Pl P3) => influ_ + "yan" ;
    VPB (Pass Sg Masc) => influ_ + "ido" ;
    VPB (Pass Sg Fem) => influ_ + "ida" ;
    VPB (Pass Pl Masc) => influ_ + "idos" ;
    VPB (Pass Pl Fem) => influ_ + "idas"
    }
  } ;
oper ir_46 : Str -> Verbum = \ir ->
  let x_ = Predef.tk 2 ir in
 {s = table {
    VI Infn => x_ + "ir" ;
    VI Ger => x_ + "yendo" ;
    VI Part => x_ + "ido" ;
    VPB (Pres Ind Sg P1) => x_ + "voy" ;
    VPB (Pres Ind Sg P2) => x_ + "vas" ;
    VPB (Pres Ind Sg P3) => x_ + "va" ;
    VPB (Pres Ind Pl P1) => x_ + "vamos" ;
    VPB (Pres Ind Pl P2) => x_ + "vais" ;
    VPB (Pres Ind Pl P3) => x_ + "van" ;
    VPB (Pres Sub Sg P1) => x_ + "vaya" ;
    VPB (Pres Sub Sg P2) => x_ + "vayas" ;
    VPB (Pres Sub Sg P3) => x_ + "vaya" ;
    VPB (Pres Sub Pl P1) => x_ + "vayamos" ;
    VPB (Pres Sub Pl P2) => x_ + "vayáis" ;
    VPB (Pres Sub Pl P3) => x_ + "vayan" ;
    VPB (Impf Ind Sg P1) => x_ + "iba" ; --# notpresent
    VPB (Impf Ind Sg P2) => x_ + "ibas" ; --# notpresent
    VPB (Impf Ind Sg P3) => x_ + "iba" ; --# notpresent
    VPB (Impf Ind Pl P1) => x_ + "íbamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => x_ + "ibais" ; --# notpresent
    VPB (Impf Ind Pl P3) => x_ + "iban" ; --# notpresent
    VPB (Impf Sub Sg P1) => x_ + "fuera" ; --# notpresent
    VPB (Impf Sub Sg P2) => x_ + "fueras" ; --# notpresent
    VPB (Impf Sub Sg P3) => x_ + "fuera" ; --# notpresent
    VPB (Impf Sub Pl P1) => x_ + "fuéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => x_ + "fuerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => x_ + "fueran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => x_ + "fuese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => x_ + "fueses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => x_ + "fuese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => x_ + "fuésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => x_ + "fueseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => x_ + "fuesen" ; --# notpresent
    VPB (Pret Sg P1) => x_ + "fui" ; --# notpresent
    VPB (Pret Sg P2) => x_ + "fuiste" ; --# notpresent
    VPB (Pret Sg P3) => x_ + "fue" ; --# notpresent
    VPB (Pret Pl P1) => x_ + "fuimos" ; --# notpresent
    VPB (Pret Pl P2) => x_ + "fuisteis" ; --# notpresent
    VPB (Pret Pl P3) => x_ + "fueron" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "iré" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "iréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "irán" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "fuere" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "fueres" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "fuere" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "fuéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "fuereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "fueren" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "iría" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "irías" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "iría" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "iríais" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "irían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => x_ + "ve" ;
    VPB (Imper Sg P3) => x_ + "vaya" ;
    VPB (Imper Pl P1) => variants {x_ + "vamos" ; x_ + "vayamos"} ;
    VPB (Imper Pl P2) => x_ + "id" ;
    VPB (Imper Pl P3) => x_ + "vayan" ;
    VPB (Pass Sg Masc) => x_ + "ido" ;
    VPB (Pass Sg Fem) => x_ + "ida" ;
    VPB (Pass Pl Masc) => x_ + "idos" ;
    VPB (Pass Pl Fem) => x_ + "idas"
    }
  } ;
oper jugar_47 : Str -> Verbum = \jugar ->
  let ju_ = Predef.tk 3 jugar in
 {s = table {
    VI Infn => ju_ + "gar" ;
    VI Ger => ju_ + "gando" ;
    VI Part => ju_ + "gado" ;
    VPB (Pres Ind Sg P1) => ju_ + "ego" ;
    VPB (Pres Ind Sg P2) => ju_ + "egas" ;
    VPB (Pres Ind Sg P3) => ju_ + "ega" ;
    VPB (Pres Ind Pl P1) => ju_ + "gamos" ;
    VPB (Pres Ind Pl P2) => ju_ + "gáis" ;
    VPB (Pres Ind Pl P3) => ju_ + "egan" ;
    VPB (Pres Sub Sg P1) => ju_ + "egue" ;
    VPB (Pres Sub Sg P2) => ju_ + "egues" ;
    VPB (Pres Sub Sg P3) => ju_ + "egue" ;
    VPB (Pres Sub Pl P1) => ju_ + "guemos" ;
    VPB (Pres Sub Pl P2) => ju_ + "guéis" ;
    VPB (Pres Sub Pl P3) => ju_ + "eguen" ;
    VPB (Impf Ind Sg P1) => ju_ + "gaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => ju_ + "gabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => ju_ + "gaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => ju_ + "gábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => ju_ + "gabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => ju_ + "gaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => ju_ + "gara" ; --# notpresent
    VPB (Impf Sub Sg P2) => ju_ + "garas" ; --# notpresent
    VPB (Impf Sub Sg P3) => ju_ + "gara" ; --# notpresent
    VPB (Impf Sub Pl P1) => ju_ + "gáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => ju_ + "garais" ; --# notpresent
    VPB (Impf Sub Pl P3) => ju_ + "garan" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => ju_ + "gase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => ju_ + "gases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => ju_ + "gase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => ju_ + "gásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => ju_ + "gaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => ju_ + "gasen" ; --# notpresent
    VPB (Pret Sg P1) => ju_ + "gué" ; --# notpresent
    VPB (Pret Sg P2) => ju_ + "gaste" ; --# notpresent
    VPB (Pret Sg P3) => ju_ + "gó" ; --# notpresent
    VPB (Pret Pl P1) => ju_ + "gamos" ; --# notpresent
    VPB (Pret Pl P2) => ju_ + "gasteis" ; --# notpresent
    VPB (Pret Pl P3) => ju_ + "garon" ; --# notpresent
    VPB (Fut Ind Sg P1) => ju_ + "garé" ; --# notpresent
    VPB (Fut Ind Sg P2) => ju_ + "garás" ; --# notpresent
    VPB (Fut Ind Sg P3) => ju_ + "gará" ; --# notpresent
    VPB (Fut Ind Pl P1) => ju_ + "garemos" ; --# notpresent
    VPB (Fut Ind Pl P2) => ju_ + "garéis" ; --# notpresent
    VPB (Fut Ind Pl P3) => ju_ + "garán" ; --# notpresent
    VPB (Fut Sub Sg P1) => ju_ + "gare" ; --# notpresent
    VPB (Fut Sub Sg P2) => ju_ + "gares" ; --# notpresent
    VPB (Fut Sub Sg P3) => ju_ + "gare" ; --# notpresent
    VPB (Fut Sub Pl P1) => ju_ + "gáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => ju_ + "gareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => ju_ + "garen" ; --# notpresent
    VPB (Cond Sg P1) => ju_ + "garía" ; --# notpresent
    VPB (Cond Sg P2) => ju_ + "garías" ; --# notpresent
    VPB (Cond Sg P3) => ju_ + "garía" ; --# notpresent
    VPB (Cond Pl P1) => ju_ + "garíamos" ; --# notpresent
    VPB (Cond Pl P2) => ju_ + "garíais" ; --# notpresent
    VPB (Cond Pl P3) => ju_ + "garían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => ju_ + "ega" ;
    VPB (Imper Sg P3) => ju_ + "egue" ;
    VPB (Imper Pl P1) => ju_ + "guemos" ;
    VPB (Imper Pl P2) => ju_ + "gad" ;
    VPB (Imper Pl P3) => ju_ + "eguen" ;
    VPB (Pass Sg Masc) => ju_ + "gado" ;
    VPB (Pass Sg Fem) => ju_ + "gada" ;
    VPB (Pass Pl Masc) => ju_ + "gados" ;
    VPB (Pass Pl Fem) => ju_ + "gadas"
    }
  } ;
oper lucir_48 : Str -> Verbum = \lucir ->
  let lu_ = Predef.tk 3 lucir in
 {s = table {
    VI Infn => lu_ + "cir" ;
    VI Ger => lu_ + "ciendo" ;
    VI Part => lu_ + "cido" ;
    VPB (Pres Ind Sg P1) => lu_ + "zco" ;
    VPB (Pres Ind Sg P2) => lu_ + "ces" ;
    VPB (Pres Ind Sg P3) => lu_ + "ce" ;
    VPB (Pres Ind Pl P1) => lu_ + "cimos" ;
    VPB (Pres Ind Pl P2) => lu_ + "cís" ;
    VPB (Pres Ind Pl P3) => lu_ + "cen" ;
    VPB (Pres Sub Sg P1) => lu_ + "zca" ;
    VPB (Pres Sub Sg P2) => lu_ + "zcas" ;
    VPB (Pres Sub Sg P3) => lu_ + "zca" ;
    VPB (Pres Sub Pl P1) => lu_ + "zcamos" ;
    VPB (Pres Sub Pl P2) => lu_ + "zcáis" ;
    VPB (Pres Sub Pl P3) => lu_ + "zcan" ;
    VPB (Impf Ind Sg P1) => lu_ + "cía" ; --# notpresent
    VPB (Impf Ind Sg P2) => lu_ + "cías" ; --# notpresent
    VPB (Impf Ind Sg P3) => lu_ + "cía" ; --# notpresent
    VPB (Impf Ind Pl P1) => lu_ + "cíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => lu_ + "cíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => lu_ + "cían" ; --# notpresent
    VPB (Impf Sub Sg P1) => lu_ + "ciera" ; --# notpresent
    VPB (Impf Sub Sg P2) => lu_ + "cieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => lu_ + "ciera" ; --# notpresent
    VPB (Impf Sub Pl P1) => lu_ + "ciéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => lu_ + "cierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => lu_ + "cieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => lu_ + "ciese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => lu_ + "cieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => lu_ + "ciese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => lu_ + "ciésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => lu_ + "cieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => lu_ + "ciesen" ; --# notpresent
    VPB (Pret Sg P1) => lu_ + "cí" ; --# notpresent
    VPB (Pret Sg P2) => lu_ + "ciste" ; --# notpresent
    VPB (Pret Sg P3) => lu_ + "ció" ; --# notpresent
    VPB (Pret Pl P1) => lu_ + "cimos" ; --# notpresent
    VPB (Pret Pl P2) => lu_ + "cisteis" ; --# notpresent
    VPB (Pret Pl P3) => lu_ + "cieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => lu_ + "ciré" ; --# notpresent
    VPB (Fut Ind Sg P2) => lu_ + "cirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => lu_ + "cirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => lu_ + "ciremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => lu_ + "ciréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => lu_ + "cirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => lu_ + "ciere" ; --# notpresent
    VPB (Fut Sub Sg P2) => lu_ + "cieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => lu_ + "ciere" ; --# notpresent
    VPB (Fut Sub Pl P1) => lu_ + "ciéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => lu_ + "ciereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => lu_ + "cieren" ; --# notpresent
    VPB (Cond Sg P1) => lu_ + "ciría" ; --# notpresent
    VPB (Cond Sg P2) => lu_ + "cirías" ; --# notpresent
    VPB (Cond Sg P3) => lu_ + "ciría" ; --# notpresent
    VPB (Cond Pl P1) => lu_ + "ciríamos" ; --# notpresent
    VPB (Cond Pl P2) => lu_ + "ciríais" ; --# notpresent
    VPB (Cond Pl P3) => lu_ + "cirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => lu_ + "ce" ;
    VPB (Imper Sg P3) => lu_ + "zca" ;
    VPB (Imper Pl P1) => lu_ + "zcamos" ;
    VPB (Imper Pl P2) => lu_ + "cid" ;
    VPB (Imper Pl P3) => lu_ + "zcan" ;
    VPB (Pass Sg Masc) => lu_ + "cido" ;
    VPB (Pass Sg Fem) => lu_ + "cida" ;
    VPB (Pass Pl Masc) => lu_ + "cidos" ;
    VPB (Pass Pl Fem) => lu_ + "cidas"
    }
  } ;
oper mecer_49 : Str -> Verbum = \mecer ->
  let me_ = Predef.tk 3 mecer in
 {s = table {
    VI Infn => me_ + "cer" ;
    VI Ger => me_ + "ciendo" ;
    VI Part => me_ + "cido" ;
    VPB (Pres Ind Sg P1) => me_ + "zo" ;
    VPB (Pres Ind Sg P2) => me_ + "ces" ;
    VPB (Pres Ind Sg P3) => me_ + "ce" ;
    VPB (Pres Ind Pl P1) => me_ + "cemos" ;
    VPB (Pres Ind Pl P2) => me_ + "céis" ;
    VPB (Pres Ind Pl P3) => me_ + "cen" ;
    VPB (Pres Sub Sg P1) => me_ + "za" ;
    VPB (Pres Sub Sg P2) => me_ + "zas" ;
    VPB (Pres Sub Sg P3) => me_ + "za" ;
    VPB (Pres Sub Pl P1) => me_ + "zamos" ;
    VPB (Pres Sub Pl P2) => me_ + "záis" ;
    VPB (Pres Sub Pl P3) => me_ + "zan" ;
    VPB (Impf Ind Sg P1) => me_ + "cía" ; --# notpresent
    VPB (Impf Ind Sg P2) => me_ + "cías" ; --# notpresent
    VPB (Impf Ind Sg P3) => me_ + "cía" ; --# notpresent
    VPB (Impf Ind Pl P1) => me_ + "cíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => me_ + "cíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => me_ + "cían" ; --# notpresent
    VPB (Impf Sub Sg P1) => me_ + "ciera" ; --# notpresent
    VPB (Impf Sub Sg P2) => me_ + "cieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => me_ + "ciera" ; --# notpresent
    VPB (Impf Sub Pl P1) => me_ + "ciéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => me_ + "cierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => me_ + "cieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => me_ + "ciese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => me_ + "cieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => me_ + "ciese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => me_ + "ciésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => me_ + "cieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => me_ + "ciesen" ; --# notpresent
    VPB (Pret Sg P1) => me_ + "cí" ; --# notpresent
    VPB (Pret Sg P2) => me_ + "ciste" ; --# notpresent
    VPB (Pret Sg P3) => me_ + "ció" ; --# notpresent
    VPB (Pret Pl P1) => me_ + "cimos" ; --# notpresent
    VPB (Pret Pl P2) => me_ + "cisteis" ; --# notpresent
    VPB (Pret Pl P3) => me_ + "cieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => me_ + "ceré" ; --# notpresent
    VPB (Fut Ind Sg P2) => me_ + "cerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => me_ + "cerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => me_ + "ceremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => me_ + "ceréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => me_ + "cerán" ; --# notpresent
    VPB (Fut Sub Sg P1) => me_ + "ciere" ; --# notpresent
    VPB (Fut Sub Sg P2) => me_ + "cieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => me_ + "ciere" ; --# notpresent
    VPB (Fut Sub Pl P1) => me_ + "ciéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => me_ + "ciereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => me_ + "cieren" ; --# notpresent
    VPB (Cond Sg P1) => me_ + "cería" ; --# notpresent
    VPB (Cond Sg P2) => me_ + "cerías" ; --# notpresent
    VPB (Cond Sg P3) => me_ + "cería" ; --# notpresent
    VPB (Cond Pl P1) => me_ + "ceríamos" ; --# notpresent
    VPB (Cond Pl P2) => me_ + "ceríais" ; --# notpresent
    VPB (Cond Pl P3) => me_ + "cerían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => me_ + "ce" ;
    VPB (Imper Sg P3) => me_ + "za" ;
    VPB (Imper Pl P1) => me_ + "zamos" ;
    VPB (Imper Pl P2) => me_ + "ced" ;
    VPB (Imper Pl P3) => me_ + "zan" ;
    VPB (Pass Sg Masc) => me_ + "cido" ;
    VPB (Pass Sg Fem) => me_ + "cida" ;
    VPB (Pass Pl Masc) => me_ + "cidos" ;
    VPB (Pass Pl Fem) => me_ + "cidas"
    }
  } ;
oper mover_50 : Str -> Verbum = \mover ->
  let m_ = Predef.tk 4 mover in
 {s = table {
    VI Infn => m_ + "over" ;
    VI Ger => m_ + "oviendo" ;
    VI Part => m_ + "ovido" ;
    VPB (Pres Ind Sg P1) => m_ + "uevo" ;
    VPB (Pres Ind Sg P2) => m_ + "ueves" ;
    VPB (Pres Ind Sg P3) => m_ + "ueve" ;
    VPB (Pres Ind Pl P1) => m_ + "ovemos" ;
    VPB (Pres Ind Pl P2) => m_ + "ovéis" ;
    VPB (Pres Ind Pl P3) => m_ + "ueven" ;
    VPB (Pres Sub Sg P1) => m_ + "ueva" ;
    VPB (Pres Sub Sg P2) => m_ + "uevas" ;
    VPB (Pres Sub Sg P3) => m_ + "ueva" ;
    VPB (Pres Sub Pl P1) => m_ + "ovamos" ;
    VPB (Pres Sub Pl P2) => m_ + "ováis" ;
    VPB (Pres Sub Pl P3) => m_ + "uevan" ;
    VPB (Impf Ind Sg P1) => m_ + "ovía" ; --# notpresent
    VPB (Impf Ind Sg P2) => m_ + "ovías" ; --# notpresent
    VPB (Impf Ind Sg P3) => m_ + "ovía" ; --# notpresent
    VPB (Impf Ind Pl P1) => m_ + "ovíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => m_ + "ovíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => m_ + "ovían" ; --# notpresent
    VPB (Impf Sub Sg P1) => m_ + "oviera" ; --# notpresent
    VPB (Impf Sub Sg P2) => m_ + "ovieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => m_ + "oviera" ; --# notpresent
    VPB (Impf Sub Pl P1) => m_ + "oviéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => m_ + "ovierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => m_ + "ovieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => m_ + "oviese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => m_ + "ovieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => m_ + "oviese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => m_ + "oviésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => m_ + "ovieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => m_ + "oviesen" ; --# notpresent
    VPB (Pret Sg P1) => m_ + "oví" ; --# notpresent
    VPB (Pret Sg P2) => m_ + "oviste" ; --# notpresent
    VPB (Pret Sg P3) => m_ + "ovió" ; --# notpresent
    VPB (Pret Pl P1) => m_ + "ovimos" ; --# notpresent
    VPB (Pret Pl P2) => m_ + "ovisteis" ; --# notpresent
    VPB (Pret Pl P3) => m_ + "ovieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => m_ + "overé" ; --# notpresent
    VPB (Fut Ind Sg P2) => m_ + "overás" ; --# notpresent
    VPB (Fut Ind Sg P3) => m_ + "overá" ; --# notpresent
    VPB (Fut Ind Pl P1) => m_ + "overemos" ; --# notpresent
    VPB (Fut Ind Pl P2) => m_ + "overéis" ; --# notpresent
    VPB (Fut Ind Pl P3) => m_ + "overán" ; --# notpresent
    VPB (Fut Sub Sg P1) => m_ + "oviere" ; --# notpresent
    VPB (Fut Sub Sg P2) => m_ + "ovieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => m_ + "oviere" ; --# notpresent
    VPB (Fut Sub Pl P1) => m_ + "oviéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => m_ + "oviereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => m_ + "ovieren" ; --# notpresent
    VPB (Cond Sg P1) => m_ + "overía" ; --# notpresent
    VPB (Cond Sg P2) => m_ + "overías" ; --# notpresent
    VPB (Cond Sg P3) => m_ + "overía" ; --# notpresent
    VPB (Cond Pl P1) => m_ + "overíamos" ; --# notpresent
    VPB (Cond Pl P2) => m_ + "overíais" ; --# notpresent
    VPB (Cond Pl P3) => m_ + "overían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => m_ + "ueve" ;
    VPB (Imper Sg P3) => m_ + "ueva" ;
    VPB (Imper Pl P1) => m_ + "ovamos" ;
    VPB (Imper Pl P2) => m_ + "oved" ;
    VPB (Imper Pl P3) => m_ + "uevan" ;
    VPB (Pass Sg Masc) => m_ + "ovido" ;
    VPB (Pass Sg Fem) => m_ + "ovida" ;
    VPB (Pass Pl Masc) => m_ + "ovidos" ;
    VPB (Pass Pl Fem) => m_ + "ovidas"
    }
  } ;
oper morder_50b : Str -> Verbum = \morder ->
  let m_ = Predef.tk 5 morder in
 {s = table {
    VI Infn => m_ + "order" ;
    VI Ger => m_ + "ordiendo" ;
    VI Part => m_ + "ordido" ;
    VPB (Pres Ind Sg P1) => m_ + "uerdo" ;
    VPB (Pres Ind Sg P2) => m_ + "uerdes" ;
    VPB (Pres Ind Sg P3) => m_ + "uerde" ;
    VPB (Pres Ind Pl P1) => m_ + "ordemos" ;
    VPB (Pres Ind Pl P2) => m_ + "ordéis" ;
    VPB (Pres Ind Pl P3) => m_ + "uerden" ;
    VPB (Pres Sub Sg P1) => m_ + "uerda" ;
    VPB (Pres Sub Sg P2) => m_ + "uerdas" ;
    VPB (Pres Sub Sg P3) => m_ + "uerda" ;
    VPB (Pres Sub Pl P1) => m_ + "ordamos" ;
    VPB (Pres Sub Pl P2) => m_ + "ordáis" ;
    VPB (Pres Sub Pl P3) => m_ + "uerdan" ;
    VPB (Impf Ind Sg P1) => m_ + "ordía" ; --# notpresent
    VPB (Impf Ind Sg P2) => m_ + "ordías" ; --# notpresent
    VPB (Impf Ind Sg P3) => m_ + "ordía" ; --# notpresent
    VPB (Impf Ind Pl P1) => m_ + "ordíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => m_ + "ordíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => m_ + "ordían" ; --# notpresent
    VPB (Impf Sub Sg P1) => m_ + "ordiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => m_ + "ordieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => m_ + "ordiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => m_ + "ordiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => m_ + "ordierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => m_ + "ordieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => m_ + "ordiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => m_ + "ordieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => m_ + "ordiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => m_ + "ordiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => m_ + "ordieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => m_ + "ordiesen" ; --# notpresent
    VPB (Pret Sg P1) => m_ + "ordí" ; --# notpresent
    VPB (Pret Sg P2) => m_ + "ordiste" ; --# notpresent
    VPB (Pret Sg P3) => m_ + "ordió" ; --# notpresent
    VPB (Pret Pl P1) => m_ + "ordimos" ; --# notpresent
    VPB (Pret Pl P2) => m_ + "ordisteis" ; --# notpresent
    VPB (Pret Pl P3) => m_ + "ordieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => m_ + "orderé" ; --# notpresent
    VPB (Fut Ind Sg P2) => m_ + "orderás" ; --# notpresent
    VPB (Fut Ind Sg P3) => m_ + "orderá" ; --# notpresent
    VPB (Fut Ind Pl P1) => m_ + "orderemos" ; --# notpresent
    VPB (Fut Ind Pl P2) => m_ + "orderéis" ; --# notpresent
    VPB (Fut Ind Pl P3) => m_ + "orderán" ; --# notpresent
    VPB (Fut Sub Sg P1) => m_ + "ordiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => m_ + "ordieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => m_ + "ordiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => m_ + "ordiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => m_ + "ordiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => m_ + "ordieren" ; --# notpresent
    VPB (Cond Sg P1) => m_ + "ordería" ; --# notpresent
    VPB (Cond Sg P2) => m_ + "orderías" ; --# notpresent
    VPB (Cond Sg P3) => m_ + "ordería" ; --# notpresent
    VPB (Cond Pl P1) => m_ + "orderíamos" ; --# notpresent
    VPB (Cond Pl P2) => m_ + "orderíais" ; --# notpresent
    VPB (Cond Pl P3) => m_ + "orderían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => m_ + "uerde" ;
    VPB (Imper Sg P3) => m_ + "uerda" ;
    VPB (Imper Pl P1) => m_ + "ordamos" ;
    VPB (Imper Pl P2) => m_ + "orded" ;
    VPB (Imper Pl P3) => m_ + "uerdan" ;
    VPB (Pass Sg Masc) => m_ + "ordido" ;
    VPB (Pass Sg Fem) => m_ + "ordida" ;
    VPB (Pass Pl Masc) => m_ + "ordidos" ;
    VPB (Pass Pl Fem) => m_ + "ordidas"
    }
  } ;

oper oir_51 : Str -> Verbum = \oir ->
  let o_ = Predef.tk 2 oir in
 {s = table {
    VI Infn => o_ + "ír" ;
    VI Ger => o_ + "yendo" ;
    VI Part => o_ + "ído" ;
    VPB (Pres Ind Sg P1) => o_ + "igo" ;
    VPB (Pres Ind Sg P2) => o_ + "yes" ;
    VPB (Pres Ind Sg P3) => o_ + "ye" ;
    VPB (Pres Ind Pl P1) => o_ + "ímos" ;
    VPB (Pres Ind Pl P2) => o_ + "ís" ;
    VPB (Pres Ind Pl P3) => o_ + "yen" ;
    VPB (Pres Sub Sg P1) => o_ + "iga" ;
    VPB (Pres Sub Sg P2) => o_ + "igas" ;
    VPB (Pres Sub Sg P3) => o_ + "iga" ;
    VPB (Pres Sub Pl P1) => o_ + "igamos" ;
    VPB (Pres Sub Pl P2) => o_ + "igáis" ;
    VPB (Pres Sub Pl P3) => o_ + "igan" ;
    VPB (Impf Ind Sg P1) => o_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => o_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => o_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => o_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => o_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => o_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => o_ + "yera" ; --# notpresent
    VPB (Impf Sub Sg P2) => o_ + "yeras" ; --# notpresent
    VPB (Impf Sub Sg P3) => o_ + "yera" ; --# notpresent
    VPB (Impf Sub Pl P1) => o_ + "yéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => o_ + "yerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => o_ + "yeran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => o_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => o_ + "yeses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => o_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => o_ + "yésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => o_ + "yeseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => o_ + "yesen" ; --# notpresent
    VPB (Pret Sg P1) => o_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => o_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => o_ + "yó" ; --# notpresent
    VPB (Pret Pl P1) => o_ + "ímos" ; --# notpresent
    VPB (Pret Pl P2) => o_ + "ísteis" ; --# notpresent
    VPB (Pret Pl P3) => o_ + "yeron" ; --# notpresent
    VPB (Fut Ind Sg P1) => o_ + "iré" ; --# notpresent
    VPB (Fut Ind Sg P2) => o_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => o_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => o_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => o_ + "iréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => o_ + "irán" ; --# notpresent
    VPB (Fut Sub Sg P1) => o_ + "yere" ; --# notpresent
    VPB (Fut Sub Sg P2) => o_ + "yeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => o_ + "yere" ; --# notpresent
    VPB (Fut Sub Pl P1) => o_ + "yéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => o_ + "yereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => o_ + "yeren" ; --# notpresent
    VPB (Cond Sg P1) => o_ + "iría" ; --# notpresent
    VPB (Cond Sg P2) => o_ + "irías" ; --# notpresent
    VPB (Cond Sg P3) => o_ + "iría" ; --# notpresent
    VPB (Cond Pl P1) => o_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => o_ + "iríais" ; --# notpresent
    VPB (Cond Pl P3) => o_ + "irían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => o_ + "ye" ;
    VPB (Imper Sg P3) => o_ + "iga" ;
    VPB (Imper Pl P1) => o_ + "igamos" ;
    VPB (Imper Pl P2) => o_ + "íd" ;
    VPB (Imper Pl P3) => o_ + "igan" ;
    VPB (Pass Sg Masc) => o_ + "ído" ;
    VPB (Pass Sg Fem) => o_ + "ída" ;
    VPB (Pass Pl Masc) => o_ + "ídos" ;
    VPB (Pass Pl Fem) => o_ + "ídas"
    }
  } ;

oper oler_52 : Str -> Verbum = \oler ->
  let x_ = Predef.tk 4 oler in
 {s = table {
    VI Infn => x_ + "oler" ;
    VI Ger => x_ + "oliendo" ;
    VI Part => x_ + "olido" ;
    VPB (Pres Ind Sg P1) => x_ + "huelo" ;
    VPB (Pres Ind Sg P2) => x_ + "hueles" ;
    VPB (Pres Ind Sg P3) => x_ + "huele" ;
    VPB (Pres Ind Pl P1) => x_ + "olemos" ;
    VPB (Pres Ind Pl P2) => x_ + "oléis" ;
    VPB (Pres Ind Pl P3) => x_ + "huelen" ;
    VPB (Pres Sub Sg P1) => x_ + "huela" ;
    VPB (Pres Sub Sg P2) => x_ + "huelas" ;
    VPB (Pres Sub Sg P3) => x_ + "huela" ;
    VPB (Pres Sub Pl P1) => x_ + "olamos" ;
    VPB (Pres Sub Pl P2) => x_ + "oláis" ;
    VPB (Pres Sub Pl P3) => x_ + "huelan" ;
    VPB (Impf Ind Sg P1) => x_ + "olía" ; --# notpresent
    VPB (Impf Ind Sg P2) => x_ + "olías" ; --# notpresent
    VPB (Impf Ind Sg P3) => x_ + "olía" ; --# notpresent
    VPB (Impf Ind Pl P1) => x_ + "olíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => x_ + "olíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => x_ + "olían" ; --# notpresent
    VPB (Impf Sub Sg P1) => x_ + "oliera" ; --# notpresent
    VPB (Impf Sub Sg P2) => x_ + "olieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => x_ + "oliera" ; --# notpresent
    VPB (Impf Sub Pl P1) => x_ + "oliéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => x_ + "olierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => x_ + "olieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => x_ + "oliese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => x_ + "olieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => x_ + "oliese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => x_ + "oliésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => x_ + "olieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => x_ + "oliesen" ; --# notpresent
    VPB (Pret Sg P1) => x_ + "olí" ; --# notpresent
    VPB (Pret Sg P2) => x_ + "oliste" ; --# notpresent
    VPB (Pret Sg P3) => x_ + "olió" ; --# notpresent
    VPB (Pret Pl P1) => x_ + "olimos" ; --# notpresent
    VPB (Pret Pl P2) => x_ + "olisteis" ; --# notpresent
    VPB (Pret Pl P3) => x_ + "olieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "oleré" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "olerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "olerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "oleremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "oleréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "olerán" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "oliere" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "olieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "oliere" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "oliéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "oliereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "olieren" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "olería" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "olerías" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "olería" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "oleríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "oleríais" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "olerían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => x_ + "huele" ;
    VPB (Imper Sg P3) => x_ + "huela" ;
    VPB (Imper Pl P1) => x_ + "olamos" ;
    VPB (Imper Pl P2) => x_ + "oled" ;
    VPB (Imper Pl P3) => x_ + "huelan" ;
    VPB (Pass Sg Masc) => x_ + "olido" ;
    VPB (Pass Sg Fem) => x_ + "olida" ;
    VPB (Pass Pl Masc) => x_ + "olidos" ;
    VPB (Pass Pl Fem) => x_ + "olidas"
    }
  } ;
oper pagar_53 : Str -> Verbum = \pagar ->
  let pag_ = Predef.tk 2 pagar in
 {s = table {
    VI Infn => pag_ + "ar" ;
    VI Ger => pag_ + "ando" ;
    VI Part => pag_ + "ado" ;
    VPB (Pres Ind Sg P1) => pag_ + "o" ;
    VPB (Pres Ind Sg P2) => pag_ + "as" ;
    VPB (Pres Ind Sg P3) => pag_ + "a" ;
    VPB (Pres Ind Pl P1) => pag_ + "amos" ;
    VPB (Pres Ind Pl P2) => pag_ + "áis" ;
    VPB (Pres Ind Pl P3) => pag_ + "an" ;
    VPB (Pres Sub Sg P1) => pag_ + "ue" ;
    VPB (Pres Sub Sg P2) => pag_ + "ues" ;
    VPB (Pres Sub Sg P3) => pag_ + "ue" ;
    VPB (Pres Sub Pl P1) => pag_ + "uemos" ;
    VPB (Pres Sub Pl P2) => pag_ + "uéis" ;
    VPB (Pres Sub Pl P3) => pag_ + "uen" ;
    VPB (Impf Ind Sg P1) => pag_ + "aba" ; --# notpresent
    VPB (Impf Ind Sg P2) => pag_ + "abas" ; --# notpresent
    VPB (Impf Ind Sg P3) => pag_ + "aba" ; --# notpresent
    VPB (Impf Ind Pl P1) => pag_ + "ábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => pag_ + "abais" ; --# notpresent
    VPB (Impf Ind Pl P3) => pag_ + "aban" ; --# notpresent
    VPB (Impf Sub Sg P1) => pag_ + "ara" ; --# notpresent
    VPB (Impf Sub Sg P2) => pag_ + "aras" ; --# notpresent
    VPB (Impf Sub Sg P3) => pag_ + "ara" ; --# notpresent
    VPB (Impf Sub Pl P1) => pag_ + "áramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => pag_ + "arais" ; --# notpresent
    VPB (Impf Sub Pl P3) => pag_ + "aran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => pag_ + "ase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => pag_ + "ases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => pag_ + "ase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => pag_ + "ásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => pag_ + "aseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => pag_ + "asen" ; --# notpresent
    VPB (Pret Sg P1) => pag_ + "ué" ; --# notpresent
    VPB (Pret Sg P2) => pag_ + "aste" ; --# notpresent
    VPB (Pret Sg P3) => pag_ + "ó" ; --# notpresent
    VPB (Pret Pl P1) => pag_ + "amos" ; --# notpresent
    VPB (Pret Pl P2) => pag_ + "asteis" ; --# notpresent
    VPB (Pret Pl P3) => pag_ + "aron" ; --# notpresent
    VPB (Fut Ind Sg P1) => pag_ + "aré" ; --# notpresent
    VPB (Fut Ind Sg P2) => pag_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => pag_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => pag_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => pag_ + "aréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => pag_ + "arán" ; --# notpresent
    VPB (Fut Sub Sg P1) => pag_ + "are" ; --# notpresent
    VPB (Fut Sub Sg P2) => pag_ + "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => pag_ + "are" ; --# notpresent
    VPB (Fut Sub Pl P1) => pag_ + "áremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => pag_ + "areis" ; --# notpresent
    VPB (Fut Sub Pl P3) => pag_ + "aren" ; --# notpresent
    VPB (Cond Sg P1) => pag_ + "aría" ; --# notpresent
    VPB (Cond Sg P2) => pag_ + "arías" ; --# notpresent
    VPB (Cond Sg P3) => pag_ + "aría" ; --# notpresent
    VPB (Cond Pl P1) => pag_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => pag_ + "aríais" ; --# notpresent
    VPB (Cond Pl P3) => pag_ + "arían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => pag_ + "a" ;
    VPB (Imper Sg P3) => pag_ + "ue" ;
    VPB (Imper Pl P1) => pag_ + "uemos" ;
    VPB (Imper Pl P2) => pag_ + "ad" ;
    VPB (Imper Pl P3) => pag_ + "uen" ;
    VPB (Pass Sg Masc) => pag_ + "ado" ;
    VPB (Pass Sg Fem) => pag_ + "ada" ;
    VPB (Pass Pl Masc) => pag_ + "ados" ;
    VPB (Pass Pl Fem) => pag_ + "adas"
    }
  } ;
oper parecer_54 : Str -> Verbum = \parecer ->
  let pare_ = Predef.tk 3 parecer in
 {s = table {
    VI Infn => pare_ + "cer" ;
    VI Ger => pare_ + "ciendo" ;
    VI Part => pare_ + "cido" ;
    VPB (Pres Ind Sg P1) => pare_ + "zco" ;
    VPB (Pres Ind Sg P2) => pare_ + "ces" ;
    VPB (Pres Ind Sg P3) => pare_ + "ce" ;
    VPB (Pres Ind Pl P1) => pare_ + "cemos" ;
    VPB (Pres Ind Pl P2) => pare_ + "céis" ;
    VPB (Pres Ind Pl P3) => pare_ + "cen" ;
    VPB (Pres Sub Sg P1) => pare_ + "zca" ;
    VPB (Pres Sub Sg P2) => pare_ + "zcas" ;
    VPB (Pres Sub Sg P3) => pare_ + "zca" ;
    VPB (Pres Sub Pl P1) => pare_ + "zcamos" ;
    VPB (Pres Sub Pl P2) => pare_ + "zcáis" ;
    VPB (Pres Sub Pl P3) => pare_ + "zcan" ;
    VPB (Impf Ind Sg P1) => pare_ + "cía" ; --# notpresent
    VPB (Impf Ind Sg P2) => pare_ + "cías" ; --# notpresent
    VPB (Impf Ind Sg P3) => pare_ + "cía" ; --# notpresent
    VPB (Impf Ind Pl P1) => pare_ + "cíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => pare_ + "cíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => pare_ + "cían" ; --# notpresent
    VPB (Impf Sub Sg P1) => pare_ + "ciera" ; --# notpresent
    VPB (Impf Sub Sg P2) => pare_ + "cieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => pare_ + "ciera" ; --# notpresent
    VPB (Impf Sub Pl P1) => pare_ + "ciéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => pare_ + "cierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => pare_ + "cieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => pare_ + "ciese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => pare_ + "cieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => pare_ + "ciese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => pare_ + "ciésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => pare_ + "cieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => pare_ + "ciesen" ; --# notpresent
    VPB (Pret Sg P1) => pare_ + "cí" ; --# notpresent
    VPB (Pret Sg P2) => pare_ + "ciste" ; --# notpresent
    VPB (Pret Sg P3) => pare_ + "ció" ; --# notpresent
    VPB (Pret Pl P1) => pare_ + "cimos" ; --# notpresent
    VPB (Pret Pl P2) => pare_ + "cisteis" ; --# notpresent
    VPB (Pret Pl P3) => pare_ + "cieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => pare_ + "ceré" ; --# notpresent
    VPB (Fut Ind Sg P2) => pare_ + "cerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => pare_ + "cerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => pare_ + "ceremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => pare_ + "ceréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => pare_ + "cerán" ; --# notpresent
    VPB (Fut Sub Sg P1) => pare_ + "ciere" ; --# notpresent
    VPB (Fut Sub Sg P2) => pare_ + "cieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => pare_ + "ciere" ; --# notpresent
    VPB (Fut Sub Pl P1) => pare_ + "ciéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => pare_ + "ciereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => pare_ + "cieren" ; --# notpresent
    VPB (Cond Sg P1) => pare_ + "cería" ; --# notpresent
    VPB (Cond Sg P2) => pare_ + "cerías" ; --# notpresent
    VPB (Cond Sg P3) => pare_ + "cería" ; --# notpresent
    VPB (Cond Pl P1) => pare_ + "ceríamos" ; --# notpresent
    VPB (Cond Pl P2) => pare_ + "ceríais" ; --# notpresent
    VPB (Cond Pl P3) => pare_ + "cerían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => pare_ + "ce" ;
    VPB (Imper Sg P3) => pare_ + "zca" ;
    VPB (Imper Pl P1) => pare_ + "zcamos" ;
    VPB (Imper Pl P2) => pare_ + "ced" ;
    VPB (Imper Pl P3) => pare_ + "zcan" ;
    VPB (Pass Sg Masc) => pare_ + "cido" ;
    VPB (Pass Sg Fem) => pare_ + "cida" ;
    VPB (Pass Pl Masc) => pare_ + "cidos" ;
    VPB (Pass Pl Fem) => pare_ + "cidas"
    }
  } ;
oper pedir_55 : Str -> Verbum = \pedir ->
  let p_ = Predef.tk 4 pedir in
 {s = table {
    VI Infn => p_ + "edir" ;
    VI Ger => p_ + "idiendo" ;
    VI Part => p_ + "edido" ;
    VPB (Pres Ind Sg P1) => p_ + "ido" ;
    VPB (Pres Ind Sg P2) => p_ + "ides" ;
    VPB (Pres Ind Sg P3) => p_ + "ide" ;
    VPB (Pres Ind Pl P1) => p_ + "edimos" ;
    VPB (Pres Ind Pl P2) => p_ + "edís" ;
    VPB (Pres Ind Pl P3) => p_ + "iden" ;
    VPB (Pres Sub Sg P1) => p_ + "ida" ;
    VPB (Pres Sub Sg P2) => p_ + "idas" ;
    VPB (Pres Sub Sg P3) => p_ + "ida" ;
    VPB (Pres Sub Pl P1) => p_ + "idamos" ;
    VPB (Pres Sub Pl P2) => p_ + "idáis" ;
    VPB (Pres Sub Pl P3) => p_ + "idan" ;
    VPB (Impf Ind Sg P1) => p_ + "edía" ; --# notpresent
    VPB (Impf Ind Sg P2) => p_ + "edías" ; --# notpresent
    VPB (Impf Ind Sg P3) => p_ + "edía" ; --# notpresent
    VPB (Impf Ind Pl P1) => p_ + "edíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => p_ + "edíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => p_ + "edían" ; --# notpresent
    VPB (Impf Sub Sg P1) => p_ + "idiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => p_ + "idieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => p_ + "idiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => p_ + "idiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => p_ + "idierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => p_ + "idieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => p_ + "idiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => p_ + "idieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => p_ + "idiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => p_ + "idiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => p_ + "idieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => p_ + "idiesen" ; --# notpresent
    VPB (Pret Sg P1) => p_ + "edí" ; --# notpresent
    VPB (Pret Sg P2) => p_ + "ediste" ; --# notpresent
    VPB (Pret Sg P3) => p_ + "idió" ; --# notpresent
    VPB (Pret Pl P1) => p_ + "edimos" ; --# notpresent
    VPB (Pret Pl P2) => p_ + "edisteis" ; --# notpresent
    VPB (Pret Pl P3) => p_ + "idieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => p_ + "ediré" ; --# notpresent
    VPB (Fut Ind Sg P2) => p_ + "edirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => p_ + "edirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => p_ + "ediremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => p_ + "ediréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => p_ + "edirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => p_ + "idiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => p_ + "idieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => p_ + "idiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => p_ + "idiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => p_ + "idiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => p_ + "idieren" ; --# notpresent
    VPB (Cond Sg P1) => p_ + "ediría" ; --# notpresent
    VPB (Cond Sg P2) => p_ + "edirías" ; --# notpresent
    VPB (Cond Sg P3) => p_ + "ediría" ; --# notpresent
    VPB (Cond Pl P1) => p_ + "ediríamos" ; --# notpresent
    VPB (Cond Pl P2) => p_ + "ediríais" ; --# notpresent
    VPB (Cond Pl P3) => p_ + "edirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => p_ + "ide" ;
    VPB (Imper Sg P3) => p_ + "ida" ;
    VPB (Imper Pl P1) => p_ + "idamos" ;
    VPB (Imper Pl P2) => p_ + "edid" ;
    VPB (Imper Pl P3) => p_ + "idan" ;
    VPB (Pass Sg Masc) => p_ + "edido" ;
    VPB (Pass Sg Fem) => p_ + "edida" ;
    VPB (Pass Pl Masc) => p_ + "edidos" ;
    VPB (Pass Pl Fem) => p_ + "edidas"
    }
  } ;
oper pensar_56 : Str -> Verbum = \pensar ->
  let p_ = Predef.tk 5 pensar in
 {s = table {
    VI Infn => p_ + "ensar" ;
    VI Ger => p_ + "ensando" ;
    VI Part => p_ + "ensado" ;
    VPB (Pres Ind Sg P1) => p_ + "ienso" ;
    VPB (Pres Ind Sg P2) => p_ + "iensas" ;
    VPB (Pres Ind Sg P3) => p_ + "iensa" ;
    VPB (Pres Ind Pl P1) => p_ + "ensamos" ;
    VPB (Pres Ind Pl P2) => p_ + "ensáis" ;
    VPB (Pres Ind Pl P3) => p_ + "iensan" ;
    VPB (Pres Sub Sg P1) => p_ + "iense" ;
    VPB (Pres Sub Sg P2) => p_ + "ienses" ;
    VPB (Pres Sub Sg P3) => p_ + "iense" ;
    VPB (Pres Sub Pl P1) => p_ + "ensemos" ;
    VPB (Pres Sub Pl P2) => p_ + "enséis" ;
    VPB (Pres Sub Pl P3) => p_ + "iensen" ;
    VPB (Impf Ind Sg P1) => p_ + "ensaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => p_ + "ensabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => p_ + "ensaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => p_ + "ensábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => p_ + "ensabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => p_ + "ensaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => p_ + "ensara" ; --# notpresent
    VPB (Impf Sub Sg P2) => p_ + "ensaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => p_ + "ensara" ; --# notpresent
    VPB (Impf Sub Pl P1) => p_ + "ensáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => p_ + "ensarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => p_ + "ensaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => p_ + "ensase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => p_ + "ensases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => p_ + "ensase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => p_ + "ensásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => p_ + "ensaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => p_ + "ensasen" ; --# notpresent
    VPB (Pret Sg P1) => p_ + "ensé" ; --# notpresent
    VPB (Pret Sg P2) => p_ + "ensaste" ; --# notpresent
    VPB (Pret Sg P3) => p_ + "ensó" ; --# notpresent
    VPB (Pret Pl P1) => p_ + "ensamos" ; --# notpresent
    VPB (Pret Pl P2) => p_ + "ensasteis" ; --# notpresent
    VPB (Pret Pl P3) => p_ + "ensaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => p_ + "ensaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => p_ + "ensarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => p_ + "ensará" ; --# notpresent
    VPB (Fut Ind Pl P1) => p_ + "ensaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => p_ + "ensaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => p_ + "ensarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => p_ + "ensare" ; --# notpresent
    VPB (Fut Sub Sg P2) => p_ + "ensares" ; --# notpresent
    VPB (Fut Sub Sg P3) => p_ + "ensare" ; --# notpresent
    VPB (Fut Sub Pl P1) => p_ + "ensáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => p_ + "ensareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => p_ + "ensaren" ; --# notpresent
    VPB (Cond Sg P1) => p_ + "ensaría" ; --# notpresent
    VPB (Cond Sg P2) => p_ + "ensarías" ; --# notpresent
    VPB (Cond Sg P3) => p_ + "ensaría" ; --# notpresent
    VPB (Cond Pl P1) => p_ + "ensaríamos" ; --# notpresent
    VPB (Cond Pl P2) => p_ + "ensaríais" ; --# notpresent
    VPB (Cond Pl P3) => p_ + "ensarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => p_ + "iensa" ;
    VPB (Imper Sg P3) => p_ + "iense" ;
    VPB (Imper Pl P1) => p_ + "ensemos" ;
    VPB (Imper Pl P2) => p_ + "ensad" ;
    VPB (Imper Pl P3) => p_ + "iensen" ;
    VPB (Pass Sg Masc) => p_ + "ensado" ;
    VPB (Pass Sg Fem) => p_ + "ensada" ;
    VPB (Pass Pl Masc) => p_ + "ensados" ;
    VPB (Pass Pl Fem) => p_ + "ensadas"
    }
  } ;
oper placer_57 : Str -> Verbum = \placer ->
  let pl_ = Predef.tk 4 placer ;
      pl_verbum : (_,_,_ : Str) -> Verbum = \mut1,mut2,mut3 ->
 {s = table {
    VI Infn => pl_ + "acer" ;
    VI Ger => pl_ + "aciendo" ;
    VI Part => pl_ + "acido" ;
    VPB (Pres Ind Sg P1) => pl_ + "azco" ;
    VPB (Pres Ind Sg P2) => pl_ + "aces" ;
    VPB (Pres Ind Sg P3) => pl_ + "ace" ;
    VPB (Pres Ind Pl P1) => pl_ + "acemos" ;
    VPB (Pres Ind Pl P2) => pl_ + "acéis" ;
    VPB (Pres Ind Pl P3) => pl_ + "acen" ;
    VPB (Pres Sub Sg P1) => pl_ + "azca" ;
    VPB (Pres Sub Sg P2) => pl_ + "azcas" ;
    VPB (Pres Sub Sg P3) => pl_ + mut3 ;
    VPB (Pres Sub Pl P1) => pl_ + "azcamos" ;
    VPB (Pres Sub Pl P2) => pl_ + "azcáis" ;
    VPB (Pres Sub Pl P3) => pl_ + "azcan" ;
    VPB (Impf Ind Sg P1) => pl_ + "acía" ; --# notpresent
    VPB (Impf Ind Sg P2) => pl_ + "acías" ; --# notpresent
    VPB (Impf Ind Sg P3) => pl_ + "acía" ; --# notpresent
    VPB (Impf Ind Pl P1) => pl_ + "acíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => pl_ + "acíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => pl_ + "acían" ; --# notpresent
    VPB (Impf Sub Sg P1) => pl_ + "aciera" ; --# notpresent
    VPB (Impf Sub Sg P2) => pl_ + "acieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => pl_ + mut1 + "era" ; --# notpresent
    VPB (Impf Sub Pl P1) => pl_ + "aciéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => pl_ + "acierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => pl_ + "acieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => pl_ + "aciese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => pl_ + "acieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => pl_ + mut1 + "ese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => pl_ + "aciésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => pl_ + "acieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => pl_ + "aciesen" ; --# notpresent
    VPB (Pret Sg P1) => pl_ + "ací" ; --# notpresent
    VPB (Pret Sg P2) => pl_ + "aciste" ; --# notpresent
    VPB (Pret Sg P3) => pl_ + mut2 ; --# notpresent
    VPB (Pret Pl P1) => pl_ + "acimos" ; --# notpresent
    VPB (Pret Pl P2) => pl_ + "acisteis" ; --# notpresent
    VPB (Pret Pl P3) => pl_ + mut1 + "eron" ; --# notpresent
    VPB (Fut Ind Sg P1) => pl_ + "aceré" ; --# notpresent
    VPB (Fut Ind Sg P2) => pl_ + "acerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => pl_ + "acerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => pl_ + "aceremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => pl_ + "aceréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => pl_ + "acerán" ; --# notpresent
    VPB (Fut Sub Sg P1) => pl_ + "aciere" ; --# notpresent
    VPB (Fut Sub Sg P2) => pl_ + "acieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => pl_ + mut1 + "ere" ; --# notpresent
    VPB (Fut Sub Pl P1) => pl_ + "aciéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => pl_ + "aciereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => pl_ + "acieren" ; --# notpresent
    VPB (Cond Sg P1) => pl_ + "acería" ; --# notpresent
    VPB (Cond Sg P2) => pl_ + "acerías" ; --# notpresent
    VPB (Cond Sg P3) => pl_ + "acería" ; --# notpresent
    VPB (Cond Pl P1) => pl_ + "aceríamos" ; --# notpresent
    VPB (Cond Pl P2) => pl_ + "aceríais" ; --# notpresent
    VPB (Cond Pl P3) => pl_ + "acerían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => pl_ + "ace" ;
    VPB (Imper Sg P3) => pl_ + "azca" ;
    VPB (Imper Pl P1) => pl_ + "azcamos" ;
    VPB (Imper Pl P2) => pl_ + "aced" ;
    VPB (Imper Pl P3) => pl_ + "azcan" ;
    VPB (Pass Sg Masc) => pl_ + "acido" ;
    VPB (Pass Sg Fem) => pl_ + "acida" ;
    VPB (Pass Pl Masc) => pl_ + "acidos" ;
    VPB (Pass Pl Fem) => pl_ + "acidas"
    }
  }
  in variants {pl_verbum "aci"  "ació" "azca" ;
               pl_verbum "ugui" "ugo"  (variants {pl_ + "egue" ; pl_ + "ega"}) ;
              } ;

oper poder_58 : Str -> Verbum = \poder ->
  let p_ = Predef.tk 4 poder in
 {s = table {
    VI Infn => p_ + "oder" ;
    VI Ger => p_ + "udiendo" ;
    VI Part => p_ + "odido" ;
    VPB (Pres Ind Sg P1) => p_ + "uedo" ;
    VPB (Pres Ind Sg P2) => p_ + "uedes" ;
    VPB (Pres Ind Sg P3) => p_ + "uede" ;
    VPB (Pres Ind Pl P1) => p_ + "odemos" ;
    VPB (Pres Ind Pl P2) => p_ + "odéis" ;
    VPB (Pres Ind Pl P3) => p_ + "ueden" ;
    VPB (Pres Sub Sg P1) => p_ + "ueda" ;
    VPB (Pres Sub Sg P2) => p_ + "uedas" ;
    VPB (Pres Sub Sg P3) => p_ + "ueda" ;
    VPB (Pres Sub Pl P1) => p_ + "odamos" ;
    VPB (Pres Sub Pl P2) => p_ + "odáis" ;
    VPB (Pres Sub Pl P3) => p_ + "uedan" ;
    VPB (Impf Ind Sg P1) => p_ + "odía" ; --# notpresent
    VPB (Impf Ind Sg P2) => p_ + "odías" ; --# notpresent
    VPB (Impf Ind Sg P3) => p_ + "odía" ; --# notpresent
    VPB (Impf Ind Pl P1) => p_ + "odíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => p_ + "odíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => p_ + "odían" ; --# notpresent
    VPB (Impf Sub Sg P1) => p_ + "udiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => p_ + "udieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => p_ + "udiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => p_ + "udiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => p_ + "udierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => p_ + "udieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => p_ + "udiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => p_ + "udieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => p_ + "udiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => p_ + "udiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => p_ + "udieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => p_ + "udiesen" ; --# notpresent
    VPB (Pret Sg P1) => p_ + "ude" ; --# notpresent
    VPB (Pret Sg P2) => p_ + "udiste" ; --# notpresent
    VPB (Pret Sg P3) => p_ + "udo" ; --# notpresent
    VPB (Pret Pl P1) => p_ + "udimos" ; --# notpresent
    VPB (Pret Pl P2) => p_ + "udisteis" ; --# notpresent
    VPB (Pret Pl P3) => p_ + "udieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => p_ + "odré" ; --# notpresent
    VPB (Fut Ind Sg P2) => p_ + "odrás" ; --# notpresent
    VPB (Fut Ind Sg P3) => p_ + "odrá" ; --# notpresent
    VPB (Fut Ind Pl P1) => p_ + "odremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => p_ + "odréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => p_ + "odrán" ; --# notpresent
    VPB (Fut Sub Sg P1) => p_ + "udiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => p_ + "udieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => p_ + "udiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => p_ + "udiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => p_ + "udiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => p_ + "udieren" ; --# notpresent
    VPB (Cond Sg P1) => p_ + "odría" ; --# notpresent
    VPB (Cond Sg P2) => p_ + "odrías" ; --# notpresent
    VPB (Cond Sg P3) => p_ + "odría" ; --# notpresent
    VPB (Cond Pl P1) => p_ + "odríamos" ; --# notpresent
    VPB (Cond Pl P2) => p_ + "odríais" ; --# notpresent
    VPB (Cond Pl P3) => p_ + "odrían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => p_ + "uede" ;
    VPB (Imper Sg P3) => p_ + "ueda" ;
    VPB (Imper Pl P1) => p_ + "odamos" ;
    VPB (Imper Pl P2) => p_ + "oded" ;
    VPB (Imper Pl P3) => p_ + "uedan" ;
    VPB (Pass Sg Masc) => p_ + "odido" ;
    VPB (Pass Sg Fem) => p_ + "odida" ;
    VPB (Pass Pl Masc) => p_ + "odidos" ;
    VPB (Pass Pl Fem) => p_ + "odidas"
    }
  } ;
oper poner_60 : Str -> Verbum = \poner ->
  let p_ = Predef.tk 4 poner in
 {s = table {
    VI Infn => p_ + "oner" ;
    VI Ger => p_ + "oniendo" ;
    VI Part => p_ + "uesto" ;
    VPB (Pres Ind Sg P1) => p_ + "ongo" ;
    VPB (Pres Ind Sg P2) => p_ + "ones" ;
    VPB (Pres Ind Sg P3) => p_ + "one" ;
    VPB (Pres Ind Pl P1) => p_ + "onemos" ;
    VPB (Pres Ind Pl P2) => p_ + "onéis" ;
    VPB (Pres Ind Pl P3) => p_ + "onen" ;
    VPB (Pres Sub Sg P1) => p_ + "onga" ;
    VPB (Pres Sub Sg P2) => p_ + "ongas" ;
    VPB (Pres Sub Sg P3) => p_ + "onga" ;
    VPB (Pres Sub Pl P1) => p_ + "ongamos" ;
    VPB (Pres Sub Pl P2) => p_ + "ongáis" ;
    VPB (Pres Sub Pl P3) => p_ + "ongan" ;
    VPB (Impf Ind Sg P1) => p_ + "onía" ; --# notpresent
    VPB (Impf Ind Sg P2) => p_ + "onías" ; --# notpresent
    VPB (Impf Ind Sg P3) => p_ + "onía" ; --# notpresent
    VPB (Impf Ind Pl P1) => p_ + "oníamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => p_ + "oníais" ; --# notpresent
    VPB (Impf Ind Pl P3) => p_ + "onían" ; --# notpresent
    VPB (Impf Sub Sg P1) => p_ + "usiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => p_ + "usieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => p_ + "usiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => p_ + "usiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => p_ + "usierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => p_ + "usieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => p_ + "usiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => p_ + "usieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => p_ + "usiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => p_ + "usiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => p_ + "usieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => p_ + "usiesen" ; --# notpresent
    VPB (Pret Sg P1) => p_ + "use" ; --# notpresent
    VPB (Pret Sg P2) => p_ + "usiste" ; --# notpresent
    VPB (Pret Sg P3) => p_ + "uso" ; --# notpresent
    VPB (Pret Pl P1) => p_ + "usimos" ; --# notpresent
    VPB (Pret Pl P2) => p_ + "usisteis" ; --# notpresent
    VPB (Pret Pl P3) => p_ + "usieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => p_ + "ondré" ; --# notpresent
    VPB (Fut Ind Sg P2) => p_ + "ondrás" ; --# notpresent
    VPB (Fut Ind Sg P3) => p_ + "ondrá" ; --# notpresent
    VPB (Fut Ind Pl P1) => p_ + "ondremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => p_ + "ondréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => p_ + "ondrán" ; --# notpresent
    VPB (Fut Sub Sg P1) => p_ + "usiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => p_ + "usieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => p_ + "usiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => p_ + "usiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => p_ + "usiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => p_ + "usieren" ; --# notpresent
    VPB (Cond Sg P1) => p_ + "ondría" ; --# notpresent
    VPB (Cond Sg P2) => p_ + "ondrías" ; --# notpresent
    VPB (Cond Sg P3) => p_ + "ondría" ; --# notpresent
    VPB (Cond Pl P1) => p_ + "ondríamos" ; --# notpresent
    VPB (Cond Pl P2) => p_ + "ondríais" ; --# notpresent
    VPB (Cond Pl P3) => p_ + "ondrían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => p_ + "on" ;
    VPB (Imper Sg P3) => p_ + "onga" ;
    VPB (Imper Pl P1) => p_ + "ongamos" ;
    VPB (Imper Pl P2) => p_ + "oned" ;
    VPB (Imper Pl P3) => p_ + "ongan" ;
    VPB (Pass Sg Masc) => p_ + "uesto" ;
    VPB (Pass Sg Fem) => p_ + "uesta" ;
    VPB (Pass Pl Masc) => p_ + "uestos" ;
    VPB (Pass Pl Fem) => p_ + "uestas"
    }
  } ;
oper predecir_61 : Str -> Verbum = \predecir ->
  let pred_ = Predef.tk 4 predecir in
 {s = table {
    VI Infn => pred_ + "ecir" ;
    VI Ger => pred_ + "iciendo" ;
    VI Part => pred_ + "icho" ;
    VPB (Pres Ind Sg P1) => pred_ + "igo" ;
    VPB (Pres Ind Sg P2) => pred_ + "ices" ;
    VPB (Pres Ind Sg P3) => pred_ + "ice" ;
    VPB (Pres Ind Pl P1) => pred_ + "ecimos" ;
    VPB (Pres Ind Pl P2) => pred_ + "ecís" ;
    VPB (Pres Ind Pl P3) => pred_ + "icen" ;
    VPB (Pres Sub Sg P1) => pred_ + "iga" ;
    VPB (Pres Sub Sg P2) => pred_ + "igas" ;
    VPB (Pres Sub Sg P3) => pred_ + "iga" ;
    VPB (Pres Sub Pl P1) => pred_ + "igamos" ;
    VPB (Pres Sub Pl P2) => pred_ + "igáis" ;
    VPB (Pres Sub Pl P3) => pred_ + "igan" ;
    VPB (Impf Ind Sg P1) => pred_ + "ecía" ; --# notpresent
    VPB (Impf Ind Sg P2) => pred_ + "ecías" ; --# notpresent
    VPB (Impf Ind Sg P3) => pred_ + "ecía" ; --# notpresent
    VPB (Impf Ind Pl P1) => pred_ + "ecíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => pred_ + "ecíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => pred_ + "ecían" ; --# notpresent
    VPB (Impf Sub Sg P1) => pred_ + "ijera" ; --# notpresent
    VPB (Impf Sub Sg P2) => pred_ + "ijeras" ; --# notpresent
    VPB (Impf Sub Sg P3) => pred_ + "ijera" ; --# notpresent
    VPB (Impf Sub Pl P1) => pred_ + "ijéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => pred_ + "ijerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => pred_ + "ijeran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => pred_ + "ijese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => pred_ + "ijeses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => pred_ + "ijese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => pred_ + "ijésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => pred_ + "ijeseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => pred_ + "ijesen" ; --# notpresent
    VPB (Pret Sg P1) => pred_ + "ije" ; --# notpresent
    VPB (Pret Sg P2) => pred_ + "ijiste" ; --# notpresent
    VPB (Pret Sg P3) => pred_ + "ijo" ; --# notpresent
    VPB (Pret Pl P1) => pred_ + "ijimos" ; --# notpresent
    VPB (Pret Pl P2) => pred_ + "ijisteis" ; --# notpresent
    VPB (Pret Pl P3) => pred_ + "ijeron" ; --# notpresent
    VPB (Fut Ind Sg P1) => pred_ + "eciré" ; --# notpresent
    VPB (Fut Ind Sg P2) => pred_ + "ecirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => pred_ + "ecirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => pred_ + "eciremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => pred_ + "eciréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => pred_ + "ecirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => pred_ + "ijere" ; --# notpresent
    VPB (Fut Sub Sg P2) => pred_ + "ijeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => pred_ + "ijere" ; --# notpresent
    VPB (Fut Sub Pl P1) => pred_ + "ijéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => pred_ + "ijereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => pred_ + "ijeren" ; --# notpresent
    VPB (Cond Sg P1) => pred_ + "eciría" ; --# notpresent
    VPB (Cond Sg P2) => pred_ + "ecirías" ; --# notpresent
    VPB (Cond Sg P3) => pred_ + "eciría" ; --# notpresent
    VPB (Cond Pl P1) => pred_ + "eciríamos" ; --# notpresent
    VPB (Cond Pl P2) => pred_ + "eciríais" ; --# notpresent
    VPB (Cond Pl P3) => pred_ + "ecirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => pred_ + "ice" ;
    VPB (Imper Sg P3) => pred_ + "iga" ;
    VPB (Imper Pl P1) => pred_ + "igamos" ;
    VPB (Imper Pl P2) => pred_ + "ecid" ;
    VPB (Imper Pl P3) => pred_ + "igan" ;
    VPB (Pass Sg Masc) => pred_ + "icho" ;
    VPB (Pass Sg Fem) => pred_ + "icha" ;
    VPB (Pass Pl Masc) => pred_ + "ichos" ;
    VPB (Pass Pl Fem) => pred_ + "ichas"
    }
  } ;
oper producir_62 : Str -> Verbum = \producir ->
  let produ_ = Predef.tk 3 producir in
 {s = table {
    VI Infn => produ_ + "cir" ;
    VI Ger => produ_ + "ciendo" ;
    VI Part => produ_ + "cido" ;
    VPB (Pres Ind Sg P1) => produ_ + "zco" ;
    VPB (Pres Ind Sg P2) => produ_ + "ces" ;
    VPB (Pres Ind Sg P3) => produ_ + "ce" ;
    VPB (Pres Ind Pl P1) => produ_ + "cimos" ;
    VPB (Pres Ind Pl P2) => produ_ + "cís" ;
    VPB (Pres Ind Pl P3) => produ_ + "cen" ;
    VPB (Pres Sub Sg P1) => produ_ + "zca" ;
    VPB (Pres Sub Sg P2) => produ_ + "zcas" ;
    VPB (Pres Sub Sg P3) => produ_ + "zca" ;
    VPB (Pres Sub Pl P1) => produ_ + "zcamos" ;
    VPB (Pres Sub Pl P2) => produ_ + "zcáis" ;
    VPB (Pres Sub Pl P3) => produ_ + "zcan" ;
    VPB (Impf Ind Sg P1) => produ_ + "cía" ; --# notpresent
    VPB (Impf Ind Sg P2) => produ_ + "cías" ; --# notpresent
    VPB (Impf Ind Sg P3) => produ_ + "cía" ; --# notpresent
    VPB (Impf Ind Pl P1) => produ_ + "cíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => produ_ + "cíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => produ_ + "cían" ; --# notpresent
    VPB (Impf Sub Sg P1) => produ_ + "jera" ; --# notpresent
    VPB (Impf Sub Sg P2) => produ_ + "jeras" ; --# notpresent
    VPB (Impf Sub Sg P3) => produ_ + "jera" ; --# notpresent
    VPB (Impf Sub Pl P1) => produ_ + "jéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => produ_ + "jerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => produ_ + "jeran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => produ_ + "jese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => produ_ + "jeses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => produ_ + "jese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => produ_ + "jésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => produ_ + "jeseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => produ_ + "jesen" ; --# notpresent
    VPB (Pret Sg P1) => produ_ + "je" ; --# notpresent
    VPB (Pret Sg P2) => produ_ + "jiste" ; --# notpresent
    VPB (Pret Sg P3) => produ_ + "jo" ; --# notpresent
    VPB (Pret Pl P1) => produ_ + "jimos" ; --# notpresent
    VPB (Pret Pl P2) => produ_ + "jisteis" ; --# notpresent
    VPB (Pret Pl P3) => produ_ + "jeron" ; --# notpresent
    VPB (Fut Ind Sg P1) => produ_ + "ciré" ; --# notpresent
    VPB (Fut Ind Sg P2) => produ_ + "cirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => produ_ + "cirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => produ_ + "ciremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => produ_ + "ciréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => produ_ + "cirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => produ_ + "jere" ; --# notpresent
    VPB (Fut Sub Sg P2) => produ_ + "jeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => produ_ + "jere" ; --# notpresent
    VPB (Fut Sub Pl P1) => produ_ + "jéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => produ_ + "jereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => produ_ + "jeren" ; --# notpresent
    VPB (Cond Sg P1) => produ_ + "ciría" ; --# notpresent
    VPB (Cond Sg P2) => produ_ + "cirías" ; --# notpresent
    VPB (Cond Sg P3) => produ_ + "ciría" ; --# notpresent
    VPB (Cond Pl P1) => produ_ + "ciríamos" ; --# notpresent
    VPB (Cond Pl P2) => produ_ + "ciríais" ; --# notpresent
    VPB (Cond Pl P3) => produ_ + "cirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => produ_ + "ce" ;
    VPB (Imper Sg P3) => produ_ + "zca" ;
    VPB (Imper Pl P1) => produ_ + "zcamos" ;
    VPB (Imper Pl P2) => produ_ + "cid" ;
    VPB (Imper Pl P3) => produ_ + "zcan" ;
    VPB (Pass Sg Masc) => produ_ + "cido" ;
    VPB (Pass Sg Fem) => produ_ + "cida" ;
    VPB (Pass Pl Masc) => produ_ + "cidos" ;
    VPB (Pass Pl Fem) => produ_ + "cidas"
    }
  } ;
oper prohibir_63 : Str -> Verbum = \prohibir ->
  let proh_ = Predef.tk 4 prohibir in
 {s = table {
    VI Infn => proh_ + "ibir" ;
    VI Ger => proh_ + "ibiendo" ;
    VI Part => proh_ + "ibido" ;
    VPB (Pres Ind Sg P1) => proh_ + "íbo" ;
    VPB (Pres Ind Sg P2) => proh_ + "íbes" ;
    VPB (Pres Ind Sg P3) => proh_ + "íbe" ;
    VPB (Pres Ind Pl P1) => proh_ + "ibimos" ;
    VPB (Pres Ind Pl P2) => proh_ + "ibís" ;
    VPB (Pres Ind Pl P3) => proh_ + "íben" ;
    VPB (Pres Sub Sg P1) => proh_ + "íba" ;
    VPB (Pres Sub Sg P2) => proh_ + "íbas" ;
    VPB (Pres Sub Sg P3) => proh_ + "íba" ;
    VPB (Pres Sub Pl P1) => proh_ + "ibamos" ;
    VPB (Pres Sub Pl P2) => proh_ + "ibáis" ;
    VPB (Pres Sub Pl P3) => proh_ + "íban" ;
    VPB (Impf Ind Sg P1) => proh_ + "ibía" ; --# notpresent
    VPB (Impf Ind Sg P2) => proh_ + "ibías" ; --# notpresent
    VPB (Impf Ind Sg P3) => proh_ + "ibía" ; --# notpresent
    VPB (Impf Ind Pl P1) => proh_ + "ibíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => proh_ + "ibíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => proh_ + "ibían" ; --# notpresent
    VPB (Impf Sub Sg P1) => proh_ + "ibiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => proh_ + "ibieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => proh_ + "ibiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => proh_ + "ibiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => proh_ + "ibierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => proh_ + "ibieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => proh_ + "ibiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => proh_ + "ibieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => proh_ + "ibiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => proh_ + "ibiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => proh_ + "ibieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => proh_ + "ibiesen" ; --# notpresent
    VPB (Pret Sg P1) => proh_ + "ibí" ; --# notpresent
    VPB (Pret Sg P2) => proh_ + "ibiste" ; --# notpresent
    VPB (Pret Sg P3) => proh_ + "ibió" ; --# notpresent
    VPB (Pret Pl P1) => proh_ + "ibimos" ; --# notpresent
    VPB (Pret Pl P2) => proh_ + "ibisteis" ; --# notpresent
    VPB (Pret Pl P3) => proh_ + "ibieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => proh_ + "ibiré" ; --# notpresent
    VPB (Fut Ind Sg P2) => proh_ + "ibirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => proh_ + "ibirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => proh_ + "ibiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => proh_ + "ibiréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => proh_ + "ibirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => proh_ + "ibiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => proh_ + "ibieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => proh_ + "ibiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => proh_ + "ibiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => proh_ + "ibiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => proh_ + "ibieren" ; --# notpresent
    VPB (Cond Sg P1) => proh_ + "ibiría" ; --# notpresent
    VPB (Cond Sg P2) => proh_ + "ibirías" ; --# notpresent
    VPB (Cond Sg P3) => proh_ + "ibiría" ; --# notpresent
    VPB (Cond Pl P1) => proh_ + "ibiríamos" ; --# notpresent
    VPB (Cond Pl P2) => proh_ + "ibiríais" ; --# notpresent
    VPB (Cond Pl P3) => proh_ + "ibirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => proh_ + "íbe" ;
    VPB (Imper Sg P3) => proh_ + "íba" ;
    VPB (Imper Pl P1) => proh_ + "ibamos" ;
    VPB (Imper Pl P2) => proh_ + "ibid" ;
    VPB (Imper Pl P3) => proh_ + "íban" ;
    VPB (Pass Sg Masc) => proh_ + "ibido" ;
    VPB (Pass Sg Fem) => proh_ + "ibida" ;
    VPB (Pass Pl Masc) => proh_ + "ibidos" ;
    VPB (Pass Pl Fem) => proh_ + "ibidas"
    }
  } ;
oper querer_64 : Str -> Verbum = \querer ->
  let qu_ = Predef.tk 4 querer in
 {s = table {
    VI Infn => qu_ + "erer" ;
    VI Ger => qu_ + "eriendo" ;
    VI Part => qu_ + "erido" ;
    VPB (Pres Ind Sg P1) => qu_ + "iero" ;
    VPB (Pres Ind Sg P2) => qu_ + "ieres" ;
    VPB (Pres Ind Sg P3) => qu_ + "iere" ;
    VPB (Pres Ind Pl P1) => qu_ + "eremos" ;
    VPB (Pres Ind Pl P2) => qu_ + "eréis" ;
    VPB (Pres Ind Pl P3) => qu_ + "ieren" ;
    VPB (Pres Sub Sg P1) => qu_ + "iera" ;
    VPB (Pres Sub Sg P2) => qu_ + "ieras" ;
    VPB (Pres Sub Sg P3) => qu_ + "iera" ;
    VPB (Pres Sub Pl P1) => qu_ + "eramos" ;
    VPB (Pres Sub Pl P2) => qu_ + "eráis" ;
    VPB (Pres Sub Pl P3) => qu_ + "ieran" ;
    VPB (Impf Ind Sg P1) => qu_ + "ería" ; --# notpresent
    VPB (Impf Ind Sg P2) => qu_ + "erías" ; --# notpresent
    VPB (Impf Ind Sg P3) => qu_ + "ería" ; --# notpresent
    VPB (Impf Ind Pl P1) => qu_ + "eríamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => qu_ + "eríais" ; --# notpresent
    VPB (Impf Ind Pl P3) => qu_ + "erían" ; --# notpresent
    VPB (Impf Sub Sg P1) => qu_ + "isiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => qu_ + "isieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => qu_ + "isiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => qu_ + "isiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => qu_ + "isierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => qu_ + "isieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => qu_ + "isiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => qu_ + "isieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => qu_ + "isiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => qu_ + "isiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => qu_ + "isieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => qu_ + "isiesen" ; --# notpresent
    VPB (Pret Sg P1) => qu_ + "ise" ; --# notpresent
    VPB (Pret Sg P2) => qu_ + "isiste" ; --# notpresent
    VPB (Pret Sg P3) => qu_ + "iso" ; --# notpresent
    VPB (Pret Pl P1) => qu_ + "isimos" ; --# notpresent
    VPB (Pret Pl P2) => qu_ + "isisteis" ; --# notpresent
    VPB (Pret Pl P3) => qu_ + "isieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => qu_ + "erré" ; --# notpresent
    VPB (Fut Ind Sg P2) => qu_ + "errás" ; --# notpresent
    VPB (Fut Ind Sg P3) => qu_ + "errá" ; --# notpresent
    VPB (Fut Ind Pl P1) => qu_ + "erremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => qu_ + "erréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => qu_ + "errán" ; --# notpresent
    VPB (Fut Sub Sg P1) => qu_ + "isiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => qu_ + "isieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => qu_ + "isiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => qu_ + "isiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => qu_ + "isiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => qu_ + "isieren" ; --# notpresent
    VPB (Cond Sg P1) => qu_ + "erría" ; --# notpresent
    VPB (Cond Sg P2) => qu_ + "errías" ; --# notpresent
    VPB (Cond Sg P3) => qu_ + "erría" ; --# notpresent
    VPB (Cond Pl P1) => qu_ + "erríamos" ; --# notpresent
    VPB (Cond Pl P2) => qu_ + "erríais" ; --# notpresent
    VPB (Cond Pl P3) => qu_ + "errían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => qu_ + "iere" ;
    VPB (Imper Sg P3) => qu_ + "iera" ;
    VPB (Imper Pl P1) => qu_ + "eramos" ;
    VPB (Imper Pl P2) => qu_ + "ered" ;
    VPB (Imper Pl P3) => qu_ + "ieran" ;
    VPB (Pass Sg Masc) => qu_ + "erido" ;
    VPB (Pass Sg Fem) => qu_ + "erida" ;
    VPB (Pass Pl Masc) => qu_ + "eridos" ;
    VPB (Pass Pl Fem) => qu_ + "eridas"
    }
  } ;
oper raer_65 : Str -> Verbum = \raer ->
  let ra_ = Predef.tk 2 raer in
 {s = table {
    VI Infn => ra_ + "er" ;
    VI Ger => ra_ + "yendo" ;
    VI Part => ra_ + "ído" ;
    VPB (Pres Ind Sg P1) => variants {ra_ + "o" ; ra_ + "igo"} ;
    VPB (Pres Ind Sg P2) => ra_ + "es" ;
    VPB (Pres Ind Sg P3) => ra_ + "e" ;
    VPB (Pres Ind Pl P1) => ra_ + "emos" ;
    VPB (Pres Ind Pl P2) => ra_ + "éis" ;
    VPB (Pres Ind Pl P3) => ra_ + "en" ;
    VPB (Pres Sub Sg P1) => ra_ + "iga" ;
    VPB (Pres Sub Sg P2) => ra_ + "igas" ;
    VPB (Pres Sub Sg P3) => ra_ + "iga" ;
    VPB (Pres Sub Pl P1) => ra_ + "igamos" ;
    VPB (Pres Sub Pl P2) => ra_ + "igáis" ;
    VPB (Pres Sub Pl P3) => ra_ + "igan" ;
    VPB (Impf Ind Sg P1) => ra_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => ra_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => ra_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => ra_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => ra_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => ra_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => ra_ + "yera" ; --# notpresent
    VPB (Impf Sub Sg P2) => ra_ + "yeras" ; --# notpresent
    VPB (Impf Sub Sg P3) => ra_ + "yera" ; --# notpresent
    VPB (Impf Sub Pl P1) => ra_ + "yéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => ra_ + "yerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => ra_ + "yeran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => ra_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => ra_ + "yeses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => ra_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => ra_ + "yésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => ra_ + "yeseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => ra_ + "yesen" ; --# notpresent
    VPB (Pret Sg P1) => ra_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => ra_ + "íste" ; --# notpresent
    VPB (Pret Sg P3) => ra_ + "yó" ; --# notpresent
    VPB (Pret Pl P1) => ra_ + "ímos" ; --# notpresent
    VPB (Pret Pl P2) => ra_ + "ísteis" ; --# notpresent
    VPB (Pret Pl P3) => ra_ + "yeron" ; --# notpresent
    VPB (Fut Ind Sg P1) => ra_ + "eré" ; --# notpresent
    VPB (Fut Ind Sg P2) => ra_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => ra_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => ra_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => ra_ + "eréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => ra_ + "erán" ; --# notpresent
    VPB (Fut Sub Sg P1) => ra_ + "yere" ; --# notpresent
    VPB (Fut Sub Sg P2) => ra_ + "yeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => ra_ + "yere" ; --# notpresent
    VPB (Fut Sub Pl P1) => ra_ + "yéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => ra_ + "yereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => ra_ + "yeren" ; --# notpresent
    VPB (Cond Sg P1) => ra_ + "ería" ; --# notpresent
    VPB (Cond Sg P2) => ra_ + "erías" ; --# notpresent
    VPB (Cond Sg P3) => ra_ + "ería" ; --# notpresent
    VPB (Cond Pl P1) => ra_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => ra_ + "eríais" ; --# notpresent
    VPB (Cond Pl P3) => ra_ + "erían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => ra_ + "e" ;
    VPB (Imper Sg P3) => ra_ + "iga" ;
    VPB (Imper Pl P1) => ra_ + "igamos" ;
    VPB (Imper Pl P2) => ra_ + "ed" ;
    VPB (Imper Pl P3) => ra_ + "igan" ;
    VPB (Pass Sg Masc) => ra_ + "ído" ;
    VPB (Pass Sg Fem) => ra_ + "ída" ;
    VPB (Pass Pl Masc) => ra_ + "ídos" ;
    VPB (Pass Pl Fem) => ra_ + "ídas"
    }
  } ;
oper regar_66 : Str -> Verbum = \regar ->
  let r_ = Predef.tk 4 regar in
 {s = table {
    VI Infn => r_ + "egar" ;
    VI Ger => r_ + "egando" ;
    VI Part => r_ + "egado" ;
    VPB (Pres Ind Sg P1) => r_ + "iego" ;
    VPB (Pres Ind Sg P2) => r_ + "iegas" ;
    VPB (Pres Ind Sg P3) => r_ + "iega" ;
    VPB (Pres Ind Pl P1) => r_ + "egamos" ;
    VPB (Pres Ind Pl P2) => r_ + "egáis" ;
    VPB (Pres Ind Pl P3) => r_ + "iegan" ;
    VPB (Pres Sub Sg P1) => r_ + "iegue" ;
    VPB (Pres Sub Sg P2) => r_ + "iegues" ;
    VPB (Pres Sub Sg P3) => r_ + "iegue" ;
    VPB (Pres Sub Pl P1) => r_ + "eguemos" ;
    VPB (Pres Sub Pl P2) => r_ + "eguéis" ;
    VPB (Pres Sub Pl P3) => r_ + "ieguen" ;
    VPB (Impf Ind Sg P1) => r_ + "egaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => r_ + "egabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => r_ + "egaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => r_ + "egábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => r_ + "egabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => r_ + "egaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => r_ + "egara" ; --# notpresent
    VPB (Impf Sub Sg P2) => r_ + "egaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => r_ + "egara" ; --# notpresent
    VPB (Impf Sub Pl P1) => r_ + "egáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => r_ + "egarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => r_ + "egaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => r_ + "egase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => r_ + "egases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => r_ + "egase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => r_ + "egásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => r_ + "egaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => r_ + "egasen" ; --# notpresent
    VPB (Pret Sg P1) => r_ + "egué" ; --# notpresent
    VPB (Pret Sg P2) => r_ + "egaste" ; --# notpresent
    VPB (Pret Sg P3) => r_ + "egó" ; --# notpresent
    VPB (Pret Pl P1) => r_ + "egamos" ; --# notpresent
    VPB (Pret Pl P2) => r_ + "egasteis" ; --# notpresent
    VPB (Pret Pl P3) => r_ + "egaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => r_ + "egaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => r_ + "egarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => r_ + "egará" ; --# notpresent
    VPB (Fut Ind Pl P1) => r_ + "egaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => r_ + "egaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => r_ + "egarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => r_ + "egare" ; --# notpresent
    VPB (Fut Sub Sg P2) => r_ + "egares" ; --# notpresent
    VPB (Fut Sub Sg P3) => r_ + "egare" ; --# notpresent
    VPB (Fut Sub Pl P1) => r_ + "egáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => r_ + "egareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => r_ + "egaren" ; --# notpresent
    VPB (Cond Sg P1) => r_ + "egaría" ; --# notpresent
    VPB (Cond Sg P2) => r_ + "egarías" ; --# notpresent
    VPB (Cond Sg P3) => r_ + "egaría" ; --# notpresent
    VPB (Cond Pl P1) => r_ + "egaríamos" ; --# notpresent
    VPB (Cond Pl P2) => r_ + "egaríais" ; --# notpresent
    VPB (Cond Pl P3) => r_ + "egarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => r_ + "iega" ;
    VPB (Imper Sg P3) => r_ + "iegue" ;
    VPB (Imper Pl P1) => r_ + "eguemos" ;
    VPB (Imper Pl P2) => r_ + "egad" ;
    VPB (Imper Pl P3) => r_ + "ieguen" ;
    VPB (Pass Sg Masc) => r_ + "egado" ;
    VPB (Pass Sg Fem) => r_ + "egada" ;
    VPB (Pass Pl Masc) => r_ + "egados" ;
    VPB (Pass Pl Fem) => r_ + "egadas"
    }
  } ;
oper reñir_68 : Str -> Verbum = \reñir ->
  let r_ = Predef.tk 4 reñir in
 {s = table {
    VI Infn => r_ + "eñir" ;
    VI Ger => r_ + "iñiendo" ;
    VI Part => r_ + "eñido" ;
    VPB (Pres Ind Sg P1) => r_ + "iño" ;
    VPB (Pres Ind Sg P2) => r_ + "iñes" ;
    VPB (Pres Ind Sg P3) => r_ + "iñe" ;
    VPB (Pres Ind Pl P1) => r_ + "eñimos" ;
    VPB (Pres Ind Pl P2) => r_ + "eñís" ;
    VPB (Pres Ind Pl P3) => r_ + "iñen" ;
    VPB (Pres Sub Sg P1) => r_ + "iña" ;
    VPB (Pres Sub Sg P2) => r_ + "iñas" ;
    VPB (Pres Sub Sg P3) => r_ + "iña" ;
    VPB (Pres Sub Pl P1) => r_ + "iñamos" ;
    VPB (Pres Sub Pl P2) => r_ + "iñáis" ;
    VPB (Pres Sub Pl P3) => r_ + "iñan" ;
    VPB (Impf Ind Sg P1) => r_ + "eñía" ; --# notpresent
    VPB (Impf Ind Sg P2) => r_ + "eñías" ; --# notpresent
    VPB (Impf Ind Sg P3) => r_ + "eñía" ; --# notpresent
    VPB (Impf Ind Pl P1) => r_ + "eñíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => r_ + "eñíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => r_ + "eñían" ; --# notpresent
    VPB (Impf Sub Sg P1) => r_ + "iñera" ; --# notpresent
    VPB (Impf Sub Sg P2) => r_ + "iñeras" ; --# notpresent
    VPB (Impf Sub Sg P3) => r_ + "iñera" ; --# notpresent
    VPB (Impf Sub Pl P1) => r_ + "iñéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => r_ + "iñerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => r_ + "iñeran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => r_ + "iñese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => r_ + "iñeses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => r_ + "iñese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => r_ + "iñésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => r_ + "iñeseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => r_ + "iñesen" ; --# notpresent
    VPB (Pret Sg P1) => r_ + "eñí" ; --# notpresent
    VPB (Pret Sg P2) => r_ + "eñiste" ; --# notpresent
    VPB (Pret Sg P3) => r_ + "iñó" ; --# notpresent
    VPB (Pret Pl P1) => r_ + "eñimos" ; --# notpresent
    VPB (Pret Pl P2) => r_ + "eñisteis" ; --# notpresent
    VPB (Pret Pl P3) => r_ + "iñeron" ; --# notpresent
    VPB (Fut Ind Sg P1) => r_ + "eñiré" ; --# notpresent
    VPB (Fut Ind Sg P2) => r_ + "eñirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => r_ + "eñirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => r_ + "eñiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => r_ + "eñiréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => r_ + "eñirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => r_ + "iñere" ; --# notpresent
    VPB (Fut Sub Sg P2) => r_ + "iñeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => r_ + "iñere" ; --# notpresent
    VPB (Fut Sub Pl P1) => r_ + "iñéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => r_ + "iñereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => r_ + "iñeren" ; --# notpresent
    VPB (Cond Sg P1) => r_ + "eñiría" ; --# notpresent
    VPB (Cond Sg P2) => r_ + "eñirías" ; --# notpresent
    VPB (Cond Sg P3) => r_ + "eñiría" ; --# notpresent
    VPB (Cond Pl P1) => r_ + "eñiríamos" ; --# notpresent
    VPB (Cond Pl P2) => r_ + "eñiríais" ; --# notpresent
    VPB (Cond Pl P3) => r_ + "eñirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => r_ + "iñe" ;
    VPB (Imper Sg P3) => r_ + "iña" ;
    VPB (Imper Pl P1) => r_ + "iñamos" ;
    VPB (Imper Pl P2) => r_ + "eñid" ;
    VPB (Imper Pl P3) => r_ + "iñan" ;
    VPB (Pass Sg Masc) => r_ + "eñido" ;
    VPB (Pass Sg Fem) => r_ + "eñida" ;
    VPB (Pass Pl Masc) => r_ + "eñidos" ;
    VPB (Pass Pl Fem) => r_ + "eñidas"
    }
  } ;
oper reunir_69 : Str -> Verbum = \reunir ->
  let re_ = Predef.tk 4 reunir in
 {s = table {
    VI Infn => re_ + "unir" ;
    VI Ger => re_ + "uniendo" ;
    VI Part => re_ + "unido" ;
    VPB (Pres Ind Sg P1) => re_ + "úno" ;
    VPB (Pres Ind Sg P2) => re_ + "únes" ;
    VPB (Pres Ind Sg P3) => re_ + "úne" ;
    VPB (Pres Ind Pl P1) => re_ + "unimos" ;
    VPB (Pres Ind Pl P2) => re_ + "unís" ;
    VPB (Pres Ind Pl P3) => re_ + "únen" ;
    VPB (Pres Sub Sg P1) => re_ + "úna" ;
    VPB (Pres Sub Sg P2) => re_ + "únas" ;
    VPB (Pres Sub Sg P3) => re_ + "úna" ;
    VPB (Pres Sub Pl P1) => re_ + "unamos" ;
    VPB (Pres Sub Pl P2) => re_ + "unáis" ;
    VPB (Pres Sub Pl P3) => re_ + "únan" ;
    VPB (Impf Ind Sg P1) => re_ + "unía" ; --# notpresent
    VPB (Impf Ind Sg P2) => re_ + "unías" ; --# notpresent
    VPB (Impf Ind Sg P3) => re_ + "unía" ; --# notpresent
    VPB (Impf Ind Pl P1) => re_ + "uníamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => re_ + "uníais" ; --# notpresent
    VPB (Impf Ind Pl P3) => re_ + "unían" ; --# notpresent
    VPB (Impf Sub Sg P1) => re_ + "uniera" ; --# notpresent
    VPB (Impf Sub Sg P2) => re_ + "unieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => re_ + "uniera" ; --# notpresent
    VPB (Impf Sub Pl P1) => re_ + "uniéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => re_ + "unierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => re_ + "unieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => re_ + "uniese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => re_ + "unieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => re_ + "uniese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => re_ + "uniésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => re_ + "unieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => re_ + "uniesen" ; --# notpresent
    VPB (Pret Sg P1) => re_ + "uní" ; --# notpresent
    VPB (Pret Sg P2) => re_ + "uniste" ; --# notpresent
    VPB (Pret Sg P3) => re_ + "unió" ; --# notpresent
    VPB (Pret Pl P1) => re_ + "unimos" ; --# notpresent
    VPB (Pret Pl P2) => re_ + "unisteis" ; --# notpresent
    VPB (Pret Pl P3) => re_ + "unieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => re_ + "uniré" ; --# notpresent
    VPB (Fut Ind Sg P2) => re_ + "unirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => re_ + "unirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => re_ + "uniremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => re_ + "uniréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => re_ + "unirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => re_ + "uniere" ; --# notpresent
    VPB (Fut Sub Sg P2) => re_ + "unieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => re_ + "uniere" ; --# notpresent
    VPB (Fut Sub Pl P1) => re_ + "uniéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => re_ + "uniereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => re_ + "unieren" ; --# notpresent
    VPB (Cond Sg P1) => re_ + "uniría" ; --# notpresent
    VPB (Cond Sg P2) => re_ + "unirías" ; --# notpresent
    VPB (Cond Sg P3) => re_ + "uniría" ; --# notpresent
    VPB (Cond Pl P1) => re_ + "uniríamos" ; --# notpresent
    VPB (Cond Pl P2) => re_ + "uniríais" ; --# notpresent
    VPB (Cond Pl P3) => re_ + "unirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => re_ + "úne" ;
    VPB (Imper Sg P3) => re_ + "úna" ;
    VPB (Imper Pl P1) => re_ + "unamos" ;
    VPB (Imper Pl P2) => re_ + "unid" ;
    VPB (Imper Pl P3) => re_ + "únan" ;
    VPB (Pass Sg Masc) => re_ + "unido" ;
    VPB (Pass Sg Fem) => re_ + "unida" ;
    VPB (Pass Pl Masc) => re_ + "unidos" ;
    VPB (Pass Pl Fem) => re_ + "unidas"
    }
  } ;
oper roer_70 : Str -> Verbum = \roer ->
  let ro_ = Predef.tk 2 roer in
 {s = table {
    VI Infn => ro_ + "er" ;
    VI Ger => ro_ + "yendo" ;
    VI Part => ro_ + "ído" ;
    VPB (Pres Ind Sg P1) => variants {ro_ + "o" ; ro_ + "igo"} ;
    VPB (Pres Ind Sg P2) => ro_ + "es" ;
    VPB (Pres Ind Sg P3) => ro_ + "e" ;
    VPB (Pres Ind Pl P1) => ro_ + "emos" ;
    VPB (Pres Ind Pl P2) => ro_ + "éis" ;
    VPB (Pres Ind Pl P3) => ro_ + "en" ;
    VPB (Pres Sub Sg P1) => ro_ + "a" ;
    VPB (Pres Sub Sg P2) => ro_ + "as" ;
    VPB (Pres Sub Sg P3) => ro_ + "a" ;
    VPB (Pres Sub Pl P1) => ro_ + "amos" ;
    VPB (Pres Sub Pl P2) => ro_ + "áis" ;
    VPB (Pres Sub Pl P3) => ro_ + "an" ;
    VPB (Impf Ind Sg P1) => ro_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => ro_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => ro_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => ro_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => ro_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => ro_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => ro_ + "yera" ; --# notpresent
    VPB (Impf Sub Sg P2) => ro_ + "yeras" ; --# notpresent
    VPB (Impf Sub Sg P3) => ro_ + "yera" ; --# notpresent
    VPB (Impf Sub Pl P1) => ro_ + "yéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => ro_ + "yerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => ro_ + "yeran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => ro_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => ro_ + "yeses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => ro_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => ro_ + "yésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => ro_ + "yeseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => ro_ + "yesen" ; --# notpresent
    VPB (Pret Sg P1) => ro_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => ro_ + "íste" ; --# notpresent
    VPB (Pret Sg P3) => ro_ + "yó" ; --# notpresent
    VPB (Pret Pl P1) => ro_ + "ímos" ; --# notpresent
    VPB (Pret Pl P2) => ro_ + "ísteis" ; --# notpresent
    VPB (Pret Pl P3) => ro_ + "yeron" ; --# notpresent
    VPB (Fut Ind Sg P1) => ro_ + "eré" ; --# notpresent
    VPB (Fut Ind Sg P2) => ro_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => ro_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => ro_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => ro_ + "eréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => ro_ + "erán" ; --# notpresent
    VPB (Fut Sub Sg P1) => ro_ + "yere" ; --# notpresent
    VPB (Fut Sub Sg P2) => ro_ + "yeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => ro_ + "yere" ; --# notpresent
    VPB (Fut Sub Pl P1) => ro_ + "yéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => ro_ + "yereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => ro_ + "yeren" ; --# notpresent
    VPB (Cond Sg P1) => ro_ + "ería" ; --# notpresent
    VPB (Cond Sg P2) => ro_ + "erías" ; --# notpresent
    VPB (Cond Sg P3) => ro_ + "ería" ; --# notpresent
    VPB (Cond Pl P1) => ro_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => ro_ + "eríais" ; --# notpresent
    VPB (Cond Pl P3) => ro_ + "erían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => ro_ + "e" ;
    VPB (Imper Sg P3) => ro_ + "a" ;
    VPB (Imper Pl P1) => ro_ + "amos" ;
    VPB (Imper Pl P2) => ro_ + "ed" ;
    VPB (Imper Pl P3) => ro_ + "an" ;
    VPB (Pass Sg Masc) => ro_ + "ído" ;
    VPB (Pass Sg Fem) => ro_ + "ída" ;
    VPB (Pass Pl Masc) => ro_ + "ídos" ;
    VPB (Pass Pl Fem) => ro_ + "ídas"
    }
  } ;
oper saber_71 : Str -> Verbum = \saber ->
  let s_ = Predef.tk 4 saber in
 {s = table {
    VI Infn => s_ + "aber" ;
    VI Ger => s_ + "abiendo" ;
    VI Part => s_ + "abido" ;
    VPB (Pres Ind Sg P1) => s_ + "é" ;
    VPB (Pres Ind Sg P2) => s_ + "abes" ;
    VPB (Pres Ind Sg P3) => s_ + "abe" ;
    VPB (Pres Ind Pl P1) => s_ + "abemos" ;
    VPB (Pres Ind Pl P2) => s_ + "abéis" ;
    VPB (Pres Ind Pl P3) => s_ + "aben" ;
    VPB (Pres Sub Sg P1) => s_ + "epa" ;
    VPB (Pres Sub Sg P2) => s_ + "epas" ;
    VPB (Pres Sub Sg P3) => s_ + "epa" ;
    VPB (Pres Sub Pl P1) => s_ + "epamos" ;
    VPB (Pres Sub Pl P2) => s_ + "epáis" ;
    VPB (Pres Sub Pl P3) => s_ + "epan" ;
    VPB (Impf Ind Sg P1) => s_ + "abía" ; --# notpresent
    VPB (Impf Ind Sg P2) => s_ + "abías" ; --# notpresent
    VPB (Impf Ind Sg P3) => s_ + "abía" ; --# notpresent
    VPB (Impf Ind Pl P1) => s_ + "abíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => s_ + "abíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => s_ + "abían" ; --# notpresent
    VPB (Impf Sub Sg P1) => s_ + "upiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => s_ + "upieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => s_ + "upiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => s_ + "upiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => s_ + "upierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => s_ + "upieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => s_ + "upiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => s_ + "upieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => s_ + "upiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => s_ + "upiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => s_ + "upieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => s_ + "upiesen" ; --# notpresent
    VPB (Pret Sg P1) => s_ + "upe" ; --# notpresent
    VPB (Pret Sg P2) => s_ + "upiste" ; --# notpresent
    VPB (Pret Sg P3) => s_ + "upo" ; --# notpresent
    VPB (Pret Pl P1) => s_ + "upimos" ; --# notpresent
    VPB (Pret Pl P2) => s_ + "upisteis" ; --# notpresent
    VPB (Pret Pl P3) => s_ + "upieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => s_ + "abré" ; --# notpresent
    VPB (Fut Ind Sg P2) => s_ + "abrás" ; --# notpresent
    VPB (Fut Ind Sg P3) => s_ + "abrá" ; --# notpresent
    VPB (Fut Ind Pl P1) => s_ + "abremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => s_ + "abréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => s_ + "abrán" ; --# notpresent
    VPB (Fut Sub Sg P1) => s_ + "upiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => s_ + "upieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => s_ + "upiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => s_ + "upiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => s_ + "upiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => s_ + "upieren" ; --# notpresent
    VPB (Cond Sg P1) => s_ + "abría" ; --# notpresent
    VPB (Cond Sg P2) => s_ + "abrías" ; --# notpresent
    VPB (Cond Sg P3) => s_ + "abría" ; --# notpresent
    VPB (Cond Pl P1) => s_ + "abríamos" ; --# notpresent
    VPB (Cond Pl P2) => s_ + "abríais" ; --# notpresent
    VPB (Cond Pl P3) => s_ + "abrían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => s_ + "abe" ;
    VPB (Imper Sg P3) => s_ + "epa" ;
    VPB (Imper Pl P1) => s_ + "epamos" ;
    VPB (Imper Pl P2) => s_ + "abed" ;
    VPB (Imper Pl P3) => s_ + "epan" ;
    VPB (Pass Sg Masc) => s_ + "abido" ;
    VPB (Pass Sg Fem) => s_ + "abida" ;
    VPB (Pass Pl Masc) => s_ + "abidos" ;
    VPB (Pass Pl Fem) => s_ + "abidas"
    }
  } ;
oper sacar_72 : Str -> Verbum = \sacar ->
  let sa_ = Predef.tk 3 sacar in
 {s = table {
    VI Infn => sa_ + "car" ;
    VI Ger => sa_ + "cando" ;
    VI Part => sa_ + "cado" ;
    VPB (Pres Ind Sg P1) => sa_ + "co" ;
    VPB (Pres Ind Sg P2) => sa_ + "cas" ;
    VPB (Pres Ind Sg P3) => sa_ + "ca" ;
    VPB (Pres Ind Pl P1) => sa_ + "camos" ;
    VPB (Pres Ind Pl P2) => sa_ + "cáis" ;
    VPB (Pres Ind Pl P3) => sa_ + "can" ;
    VPB (Pres Sub Sg P1) => sa_ + "que" ;
    VPB (Pres Sub Sg P2) => sa_ + "ques" ;
    VPB (Pres Sub Sg P3) => sa_ + "que" ;
    VPB (Pres Sub Pl P1) => sa_ + "quemos" ;
    VPB (Pres Sub Pl P2) => sa_ + "quéis" ;
    VPB (Pres Sub Pl P3) => sa_ + "quen" ;
    VPB (Impf Ind Sg P1) => sa_ + "caba" ; --# notpresent
    VPB (Impf Ind Sg P2) => sa_ + "cabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => sa_ + "caba" ; --# notpresent
    VPB (Impf Ind Pl P1) => sa_ + "cábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => sa_ + "cabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => sa_ + "caban" ; --# notpresent
    VPB (Impf Sub Sg P1) => sa_ + "cara" ; --# notpresent
    VPB (Impf Sub Sg P2) => sa_ + "caras" ; --# notpresent
    VPB (Impf Sub Sg P3) => sa_ + "cara" ; --# notpresent
    VPB (Impf Sub Pl P1) => sa_ + "cáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => sa_ + "carais" ; --# notpresent
    VPB (Impf Sub Pl P3) => sa_ + "caran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => sa_ + "case" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => sa_ + "cases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => sa_ + "case" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => sa_ + "cásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => sa_ + "caseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => sa_ + "casen" ; --# notpresent
    VPB (Pret Sg P1) => sa_ + "qué" ; --# notpresent
    VPB (Pret Sg P2) => sa_ + "caste" ; --# notpresent
    VPB (Pret Sg P3) => sa_ + "có" ; --# notpresent
    VPB (Pret Pl P1) => sa_ + "camos" ; --# notpresent
    VPB (Pret Pl P2) => sa_ + "casteis" ; --# notpresent
    VPB (Pret Pl P3) => sa_ + "caron" ; --# notpresent
    VPB (Fut Ind Sg P1) => sa_ + "caré" ; --# notpresent
    VPB (Fut Ind Sg P2) => sa_ + "carás" ; --# notpresent
    VPB (Fut Ind Sg P3) => sa_ + "cará" ; --# notpresent
    VPB (Fut Ind Pl P1) => sa_ + "caremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => sa_ + "caréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => sa_ + "carán" ; --# notpresent
    VPB (Fut Sub Sg P1) => sa_ + "care" ; --# notpresent
    VPB (Fut Sub Sg P2) => sa_ + "cares" ; --# notpresent
    VPB (Fut Sub Sg P3) => sa_ + "care" ; --# notpresent
    VPB (Fut Sub Pl P1) => sa_ + "cáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => sa_ + "careis" ; --# notpresent
    VPB (Fut Sub Pl P3) => sa_ + "caren" ; --# notpresent
    VPB (Cond Sg P1) => sa_ + "caría" ; --# notpresent
    VPB (Cond Sg P2) => sa_ + "carías" ; --# notpresent
    VPB (Cond Sg P3) => sa_ + "caría" ; --# notpresent
    VPB (Cond Pl P1) => sa_ + "caríamos" ; --# notpresent
    VPB (Cond Pl P2) => sa_ + "caríais" ; --# notpresent
    VPB (Cond Pl P3) => sa_ + "carían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => sa_ + "ca" ;
    VPB (Imper Sg P3) => sa_ + "que" ;
    VPB (Imper Pl P1) => sa_ + "quemos" ;
    VPB (Imper Pl P2) => sa_ + "cad" ;
    VPB (Imper Pl P3) => sa_ + "quen" ;
    VPB (Pass Sg Masc) => sa_ + "cado" ;
    VPB (Pass Sg Fem) => sa_ + "cada" ;
    VPB (Pass Pl Masc) => sa_ + "cados" ;
    VPB (Pass Pl Fem) => sa_ + "cadas"
    }
  } ;
oper salir_73 : Str -> Verbum = \salir ->
  let sal_ = Predef.tk 2 salir in
 {s = table {
    VI Infn => sal_ + "ir" ;
    VI Ger => sal_ + "iendo" ;
    VI Part => sal_ + "ido" ;
    VPB (Pres Ind Sg P1) => sal_ + "go" ;
    VPB (Pres Ind Sg P2) => sal_ + "es" ;
    VPB (Pres Ind Sg P3) => sal_ + "e" ;
    VPB (Pres Ind Pl P1) => sal_ + "imos" ;
    VPB (Pres Ind Pl P2) => sal_ + "ís" ;
    VPB (Pres Ind Pl P3) => sal_ + "en" ;
    VPB (Pres Sub Sg P1) => sal_ + "ga" ;
    VPB (Pres Sub Sg P2) => sal_ + "gas" ;
    VPB (Pres Sub Sg P3) => sal_ + "ga" ;
    VPB (Pres Sub Pl P1) => sal_ + "gamos" ;
    VPB (Pres Sub Pl P2) => sal_ + "gáis" ;
    VPB (Pres Sub Pl P3) => sal_ + "gan" ;
    VPB (Impf Ind Sg P1) => sal_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => sal_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => sal_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => sal_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => sal_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => sal_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => sal_ + "iera" ; --# notpresent
    VPB (Impf Sub Sg P2) => sal_ + "ieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => sal_ + "iera" ; --# notpresent
    VPB (Impf Sub Pl P1) => sal_ + "iéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => sal_ + "ierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => sal_ + "ieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => sal_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => sal_ + "ieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => sal_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => sal_ + "iésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => sal_ + "ieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => sal_ + "iesen" ; --# notpresent
    VPB (Pret Sg P1) => sal_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => sal_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => sal_ + "ió" ; --# notpresent
    VPB (Pret Pl P1) => sal_ + "imos" ; --# notpresent
    VPB (Pret Pl P2) => sal_ + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => sal_ + "ieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => sal_ + "dré" ; --# notpresent
    VPB (Fut Ind Sg P2) => sal_ + "drás" ; --# notpresent
    VPB (Fut Ind Sg P3) => sal_ + "drá" ; --# notpresent
    VPB (Fut Ind Pl P1) => sal_ + "dremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => sal_ + "dréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => sal_ + "drán" ; --# notpresent
    VPB (Fut Sub Sg P1) => sal_ + "iere" ; --# notpresent
    VPB (Fut Sub Sg P2) => sal_ + "ieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => sal_ + "iere" ; --# notpresent
    VPB (Fut Sub Pl P1) => sal_ + "iéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => sal_ + "iereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => sal_ + "ieren" ; --# notpresent
    VPB (Cond Sg P1) => sal_ + "dría" ; --# notpresent
    VPB (Cond Sg P2) => sal_ + "drías" ; --# notpresent
    VPB (Cond Sg P3) => sal_ + "dría" ; --# notpresent
    VPB (Cond Pl P1) => sal_ + "dríamos" ; --# notpresent
    VPB (Cond Pl P2) => sal_ + "dríais" ; --# notpresent
    VPB (Cond Pl P3) => sal_ + "drían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => sal_ + "" ;
    VPB (Imper Sg P3) => sal_ + "ga" ;
    VPB (Imper Pl P1) => sal_ + "gamos" ;
    VPB (Imper Pl P2) => sal_ + "id" ;
    VPB (Imper Pl P3) => sal_ + "gan" ;
    VPB (Pass Sg Masc) => sal_ + "ido" ;
    VPB (Pass Sg Fem) => sal_ + "ida" ;
    VPB (Pass Pl Masc) => sal_ + "idos" ;
    VPB (Pass Pl Fem) => sal_ + "idas"
    }
  } ;
oper satisfacer_74 : Str -> Verbum = \satisfacer ->
  let satisf_ = Predef.tk 4 satisfacer in
 {s = table {
    VI Infn => satisf_ + "acer" ;
    VI Ger => satisf_ + "aciendo" ;
    VI Part => satisf_ + "echo" ;
    VPB (Pres Ind Sg P1) => satisf_ + "ago" ;
    VPB (Pres Ind Sg P2) => satisf_ + "aces" ;
    VPB (Pres Ind Sg P3) => satisf_ + "ace" ;
    VPB (Pres Ind Pl P1) => satisf_ + "acemos" ;
    VPB (Pres Ind Pl P2) => satisf_ + "acéis" ;
    VPB (Pres Ind Pl P3) => satisf_ + "acen" ;
    VPB (Pres Sub Sg P1) => satisf_ + "aga" ;
    VPB (Pres Sub Sg P2) => satisf_ + "agas" ;
    VPB (Pres Sub Sg P3) => satisf_ + "aga" ;
    VPB (Pres Sub Pl P1) => satisf_ + "agamos" ;
    VPB (Pres Sub Pl P2) => satisf_ + "agáis" ;
    VPB (Pres Sub Pl P3) => satisf_ + "agan" ;
    VPB (Impf Ind Sg P1) => satisf_ + "acía" ; --# notpresent
    VPB (Impf Ind Sg P2) => satisf_ + "acías" ; --# notpresent
    VPB (Impf Ind Sg P3) => satisf_ + "acía" ; --# notpresent
    VPB (Impf Ind Pl P1) => satisf_ + "acíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => satisf_ + "acíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => satisf_ + "acían" ; --# notpresent
    VPB (Impf Sub Sg P1) => satisf_ + "iciera" ; --# notpresent
    VPB (Impf Sub Sg P2) => satisf_ + "icieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => satisf_ + "iciera" ; --# notpresent
    VPB (Impf Sub Pl P1) => satisf_ + "iciéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => satisf_ + "icierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => satisf_ + "icieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => satisf_ + "iciese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => satisf_ + "icieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => satisf_ + "iciese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => satisf_ + "iciésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => satisf_ + "icieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => satisf_ + "iciesen" ; --# notpresent
    VPB (Pret Sg P1) => satisf_ + "ice" ; --# notpresent
    VPB (Pret Sg P2) => satisf_ + "iciste" ; --# notpresent
    VPB (Pret Sg P3) => satisf_ + "izo" ; --# notpresent
    VPB (Pret Pl P1) => satisf_ + "icimos" ; --# notpresent
    VPB (Pret Pl P2) => satisf_ + "icisteis" ; --# notpresent
    VPB (Pret Pl P3) => satisf_ + "icieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => satisf_ + "aré" ; --# notpresent
    VPB (Fut Ind Sg P2) => satisf_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => satisf_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => satisf_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => satisf_ + "aréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => satisf_ + "arán" ; --# notpresent
    VPB (Fut Sub Sg P1) => satisf_ + "iciere" ; --# notpresent
    VPB (Fut Sub Sg P2) => satisf_ + "icieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => satisf_ + "iciere" ; --# notpresent
    VPB (Fut Sub Pl P1) => satisf_ + "iciéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => satisf_ + "iciereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => satisf_ + "icieren" ; --# notpresent
    VPB (Cond Sg P1) => satisf_ + "aría" ; --# notpresent
    VPB (Cond Sg P2) => satisf_ + "arías" ; --# notpresent
    VPB (Cond Sg P3) => satisf_ + "aría" ; --# notpresent
    VPB (Cond Pl P1) => satisf_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => satisf_ + "aríais" ; --# notpresent
    VPB (Cond Pl P3) => satisf_ + "arían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => variants {satisf_ + "az" ; satisf_ + "ace"} ;
    VPB (Imper Sg P3) => satisf_ + "aga" ;
    VPB (Imper Pl P1) => satisf_ + "agamos" ;
    VPB (Imper Pl P2) => satisf_ + "aced" ;
    VPB (Imper Pl P3) => satisf_ + "agan" ;
    VPB (Pass Sg Masc) => satisf_ + "echo" ;
    VPB (Pass Sg Fem) => satisf_ + "echa" ;
    VPB (Pass Pl Masc) => satisf_ + "echos" ;
    VPB (Pass Pl Fem) => satisf_ + "echas"
    }
  } ;
oper sentir_76 : Str -> Verbum = \sentir ->
  let s_ = Predef.tk 5 sentir in
 {s = table {
    VI Infn => s_ + "entir" ;
    VI Ger => s_ + "intiendo" ;
    VI Part => s_ + "entido" ;
    VPB (Pres Ind Sg P1) => s_ + "iento" ;
    VPB (Pres Ind Sg P2) => s_ + "ientes" ;
    VPB (Pres Ind Sg P3) => s_ + "iente" ;
    VPB (Pres Ind Pl P1) => s_ + "entimos" ;
    VPB (Pres Ind Pl P2) => s_ + "entís" ;
    VPB (Pres Ind Pl P3) => s_ + "ienten" ;
    VPB (Pres Sub Sg P1) => s_ + "ienta" ;
    VPB (Pres Sub Sg P2) => s_ + "ientas" ;
    VPB (Pres Sub Sg P3) => s_ + "ienta" ;
    VPB (Pres Sub Pl P1) => s_ + "intamos" ;
    VPB (Pres Sub Pl P2) => s_ + "intáis" ;
    VPB (Pres Sub Pl P3) => s_ + "ientan" ;
    VPB (Impf Ind Sg P1) => s_ + "entía" ; --# notpresent
    VPB (Impf Ind Sg P2) => s_ + "entías" ; --# notpresent
    VPB (Impf Ind Sg P3) => s_ + "entía" ; --# notpresent
    VPB (Impf Ind Pl P1) => s_ + "entíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => s_ + "entíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => s_ + "entían" ; --# notpresent
    VPB (Impf Sub Sg P1) => s_ + "intiera" ; --# notpresent
    VPB (Impf Sub Sg P2) => s_ + "intieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => s_ + "intiera" ; --# notpresent
    VPB (Impf Sub Pl P1) => s_ + "intiéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => s_ + "intierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => s_ + "intieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => s_ + "intiese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => s_ + "intieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => s_ + "intiese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => s_ + "intiésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => s_ + "intieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => s_ + "intiesen" ; --# notpresent
    VPB (Pret Sg P1) => s_ + "entí" ; --# notpresent
    VPB (Pret Sg P2) => s_ + "entiste" ; --# notpresent
    VPB (Pret Sg P3) => s_ + "intió" ; --# notpresent
    VPB (Pret Pl P1) => s_ + "entimos" ; --# notpresent
    VPB (Pret Pl P2) => s_ + "entisteis" ; --# notpresent
    VPB (Pret Pl P3) => s_ + "intieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => s_ + "entiré" ; --# notpresent
    VPB (Fut Ind Sg P2) => s_ + "entirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => s_ + "entirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => s_ + "entiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => s_ + "entiréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => s_ + "entirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => s_ + "intiere" ; --# notpresent
    VPB (Fut Sub Sg P2) => s_ + "intieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => s_ + "intiere" ; --# notpresent
    VPB (Fut Sub Pl P1) => s_ + "intiéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => s_ + "intiereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => s_ + "intieren" ; --# notpresent
    VPB (Cond Sg P1) => s_ + "entiría" ; --# notpresent
    VPB (Cond Sg P2) => s_ + "entirías" ; --# notpresent
    VPB (Cond Sg P3) => s_ + "entiría" ; --# notpresent
    VPB (Cond Pl P1) => s_ + "entiríamos" ; --# notpresent
    VPB (Cond Pl P2) => s_ + "entiríais" ; --# notpresent
    VPB (Cond Pl P3) => s_ + "entirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => s_ + "iente" ;
    VPB (Imper Sg P3) => s_ + "ienta" ;
    VPB (Imper Pl P1) => s_ + "intamos" ;
    VPB (Imper Pl P2) => s_ + "entid" ;
    VPB (Imper Pl P3) => s_ + "ientan" ;
    VPB (Pass Sg Masc) => s_ + "entido" ;
    VPB (Pass Sg Fem) => s_ + "entida" ;
    VPB (Pass Pl Masc) => s_ + "entidos" ;
    VPB (Pass Pl Fem) => s_ + "entidas"
    }
  } ;
oper soler_77 : Str -> Verbum = \soler ->
  let s_ = Predef.tk 4 soler in
 {s = table {
    VI Infn => s_ + "oler" ;
    VI Ger => variants {} ;
    VI Part => variants {} ;
    VPB (Pres Ind Sg P1) => s_ + "uelo" ;
    VPB (Pres Ind Sg P2) => s_ + "ueles" ;
    VPB (Pres Ind Sg P3) => s_ + "uele" ;
    VPB (Pres Ind Pl P1) => s_ + "olemos" ;
    VPB (Pres Ind Pl P2) => s_ + "oléis" ;
    VPB (Pres Ind Pl P3) => s_ + "uelen" ;
    VPB (Pres Sub Sg P1) => s_ + "uela" ;
    VPB (Pres Sub Sg P2) => s_ + "uelas" ;
    VPB (Pres Sub Sg P3) => s_ + "uela" ;
    VPB (Pres Sub Pl P1) => s_ + "olamos" ;
    VPB (Pres Sub Pl P2) => s_ + "oláis" ;
    VPB (Pres Sub Pl P3) => s_ + "uelan" ;
    VPB (Impf Ind Sg P1) => s_ + "olía" ; --# notpresent
    VPB (Impf Ind Sg P2) => s_ + "olías" ; --# notpresent
    VPB (Impf Ind Sg P3) => s_ + "olía" ; --# notpresent
    VPB (Impf Ind Pl P1) => s_ + "olíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => s_ + "olíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => s_ + "olían" ; --# notpresent
    VPB (Impf Sub Sg P1) => s_ + "oliera" ; --# notpresent
    VPB (Impf Sub Sg P2) => s_ + "olieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => s_ + "oliera" ; --# notpresent
    VPB (Impf Sub Pl P1) => s_ + "oliéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => s_ + "olierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => s_ + "olieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => s_ + "oliese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => s_ + "olieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => s_ + "oliese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => s_ + "oliésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => s_ + "olieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => s_ + "oliesen" ; --# notpresent
    VPB (Pret Sg P1) => s_ + "olí" ; --# notpresent
    VPB (Pret Sg P2) => s_ + "oliste" ; --# notpresent
    VPB (Pret Sg P3) => s_ + "olió" ; --# notpresent
    VPB (Pret Pl P1) => s_ + "olimos" ; --# notpresent
    VPB (Pret Pl P2) => s_ + "olisteis" ; --# notpresent
    VPB (Pret Pl P3) => s_ + "olieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => variants {} ; --# notpresent
    VPB (Fut Ind Sg P2) => variants {} ; --# notpresent
    VPB (Fut Ind Sg P3) => variants {} ; --# notpresent
    VPB (Fut Ind Pl P1) => variants {} ; --# notpresent
    VPB (Fut Ind Pl P2) => variants {} ; --# notpresent
    VPB (Fut Ind Pl P3) => variants {} ; --# notpresent
    VPB (Fut Sub Sg P1) => variants {} ; --# notpresent
    VPB (Fut Sub Sg P2) => variants {} ; --# notpresent
    VPB (Fut Sub Sg P3) => variants {} ; --# notpresent
    VPB (Fut Sub Pl P1) => variants {} ; --# notpresent
    VPB (Fut Sub Pl P2) => variants {} ; --# notpresent
    VPB (Fut Sub Pl P3) => variants {} ; --# notpresent
    VPB (Cond Sg P1) => variants {} ; --# notpresent
    VPB (Cond Sg P2) => variants {} ; --# notpresent
    VPB (Cond Sg P3) => variants {} ; --# notpresent
    VPB (Cond Pl P1) => variants {} ; --# notpresent
    VPB (Cond Pl P2) => variants {} ; --# notpresent
    VPB (Cond Pl P3) => variants {} ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => variants {} ;
    VPB (Imper Sg P3) => variants {} ;
    VPB (Imper Pl P1) => variants {} ;
    VPB (Imper Pl P2) => variants {} ;
    VPB (Imper Pl P3) => variants {} ;
    VPB (Pass Sg Masc) => variants {} ;
    VPB (Pass Sg Fem) => variants {} ;
    VPB (Pass Pl Masc) => variants {} ;
    VPB (Pass Pl Fem) => variants {}
    }
  } ;
oper tañer_78 : Str -> Verbum = \tañer ->
  let tañ_ = Predef.tk 2 tañer in
 {s = table {
    VI Infn => tañ_ + "er" ;
    VI Ger => tañ_ + "endo" ;
    VI Part => tañ_ + "ido" ;
    VPB (Pres Ind Sg P1) => tañ_ + "o" ;
    VPB (Pres Ind Sg P2) => tañ_ + "es" ;
    VPB (Pres Ind Sg P3) => tañ_ + "e" ;
    VPB (Pres Ind Pl P1) => tañ_ + "emos" ;
    VPB (Pres Ind Pl P2) => tañ_ + "éis" ;
    VPB (Pres Ind Pl P3) => tañ_ + "en" ;
    VPB (Pres Sub Sg P1) => tañ_ + "a" ;
    VPB (Pres Sub Sg P2) => tañ_ + "as" ;
    VPB (Pres Sub Sg P3) => tañ_ + "a" ;
    VPB (Pres Sub Pl P1) => tañ_ + "amos" ;
    VPB (Pres Sub Pl P2) => tañ_ + "áis" ;
    VPB (Pres Sub Pl P3) => tañ_ + "an" ;
    VPB (Impf Ind Sg P1) => tañ_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => tañ_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => tañ_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => tañ_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => tañ_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => tañ_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => tañ_ + "era" ; --# notpresent
    VPB (Impf Sub Sg P2) => tañ_ + "eras" ; --# notpresent
    VPB (Impf Sub Sg P3) => tañ_ + "era" ; --# notpresent
    VPB (Impf Sub Pl P1) => tañ_ + "éramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => tañ_ + "erais" ; --# notpresent
    VPB (Impf Sub Pl P3) => tañ_ + "eran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => tañ_ + "ese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => tañ_ + "eses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => tañ_ + "ese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => tañ_ + "ésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => tañ_ + "eseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => tañ_ + "esen" ; --# notpresent
    VPB (Pret Sg P1) => tañ_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => tañ_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => tañ_ + "ó" ; --# notpresent
    VPB (Pret Pl P1) => tañ_ + "imos" ; --# notpresent
    VPB (Pret Pl P2) => tañ_ + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => tañ_ + "eron" ; --# notpresent
    VPB (Fut Ind Sg P1) => tañ_ + "eré" ; --# notpresent
    VPB (Fut Ind Sg P2) => tañ_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => tañ_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => tañ_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => tañ_ + "eréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => tañ_ + "erán" ; --# notpresent
    VPB (Fut Sub Sg P1) => tañ_ + "ere" ; --# notpresent
    VPB (Fut Sub Sg P2) => tañ_ + "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => tañ_ + "ere" ; --# notpresent
    VPB (Fut Sub Pl P1) => tañ_ + "éremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => tañ_ + "ereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => tañ_ + "eren" ; --# notpresent
    VPB (Cond Sg P1) => tañ_ + "ería" ; --# notpresent
    VPB (Cond Sg P2) => tañ_ + "erías" ; --# notpresent
    VPB (Cond Sg P3) => tañ_ + "ería" ; --# notpresent
    VPB (Cond Pl P1) => tañ_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => tañ_ + "eríais" ; --# notpresent
    VPB (Cond Pl P3) => tañ_ + "erían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => tañ_ + "e" ;
    VPB (Imper Sg P3) => tañ_ + "a" ;
    VPB (Imper Pl P1) => tañ_ + "amos" ;
    VPB (Imper Pl P2) => tañ_ + "ed" ;
    VPB (Imper Pl P3) => tañ_ + "an" ;
    VPB (Pass Sg Masc) => tañ_ + "ido" ;
    VPB (Pass Sg Fem) => tañ_ + "ida" ;
    VPB (Pass Pl Masc) => tañ_ + "idos" ;
    VPB (Pass Pl Fem) => tañ_ + "idas"
    }
  } ;
oper traer_79 : Str -> Verbum = \traer ->
  let tra_ = Predef.tk 2 traer in
 {s = table {
    VI Infn => tra_ + "er" ;
    VI Ger => tra_ + "yendo" ;
    VI Part => tra_ + "ído" ;
    VPB (Pres Ind Sg P1) => tra_ + "o" ;
    VPB (Pres Ind Sg P2) => tra_ + "es" ;
    VPB (Pres Ind Sg P3) => tra_ + "e" ;
    VPB (Pres Ind Pl P1) => tra_ + "emos" ;
    VPB (Pres Ind Pl P2) => tra_ + "éis" ;
    VPB (Pres Ind Pl P3) => tra_ + "en" ;
    VPB (Pres Sub Sg P1) => tra_ + "a" ;
    VPB (Pres Sub Sg P2) => tra_ + "as" ;
    VPB (Pres Sub Sg P3) => tra_ + "a" ;
    VPB (Pres Sub Pl P1) => tra_ + "amos" ;
    VPB (Pres Sub Pl P2) => tra_ + "áis" ;
    VPB (Pres Sub Pl P3) => tra_ + "an" ;
    VPB (Impf Ind Sg P1) => tra_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => tra_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => tra_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => tra_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => tra_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => tra_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => tra_ + "yera" ; --# notpresent
    VPB (Impf Sub Sg P2) => tra_ + "yeras" ; --# notpresent
    VPB (Impf Sub Sg P3) => tra_ + "yera" ; --# notpresent
    VPB (Impf Sub Pl P1) => tra_ + "yéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => tra_ + "yerais" ; --# notpresent
    VPB (Impf Sub Pl P3) => tra_ + "yeran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => tra_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => tra_ + "yeses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => tra_ + "yese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => tra_ + "yésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => tra_ + "yeseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => tra_ + "yesen" ; --# notpresent
    VPB (Pret Sg P1) => tra_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => tra_ + "íste" ; --# notpresent
    VPB (Pret Sg P3) => tra_ + "yó" ; --# notpresent
    VPB (Pret Pl P1) => tra_ + "ímos" ; --# notpresent
    VPB (Pret Pl P2) => tra_ + "ísteis" ; --# notpresent
    VPB (Pret Pl P3) => tra_ + "yeron" ; --# notpresent
    VPB (Fut Ind Sg P1) => tra_ + "eré" ; --# notpresent
    VPB (Fut Ind Sg P2) => tra_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => tra_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => tra_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => tra_ + "eréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => tra_ + "erán" ; --# notpresent
    VPB (Fut Sub Sg P1) => tra_ + "yere" ; --# notpresent
    VPB (Fut Sub Sg P2) => tra_ + "yeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => tra_ + "yere" ; --# notpresent
    VPB (Fut Sub Pl P1) => tra_ + "yéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => tra_ + "yereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => tra_ + "yeren" ; --# notpresent
    VPB (Cond Sg P1) => tra_ + "ería" ; --# notpresent
    VPB (Cond Sg P2) => tra_ + "erías" ; --# notpresent
    VPB (Cond Sg P3) => tra_ + "ería" ; --# notpresent
    VPB (Cond Pl P1) => tra_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => tra_ + "eríais" ; --# notpresent
    VPB (Cond Pl P3) => tra_ + "erían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => tra_ + "e" ;
    VPB (Imper Sg P3) => tra_ + "a" ;
    VPB (Imper Pl P1) => tra_ + "amos" ;
    VPB (Imper Pl P2) => tra_ + "ed" ;
    VPB (Imper Pl P3) => tra_ + "an" ;
    VPB (Pass Sg Masc) => tra_ + "ído" ;
    VPB (Pass Sg Fem) => tra_ + "ída" ;
    VPB (Pass Pl Masc) => tra_ + "ídos" ;
    VPB (Pass Pl Fem) => tra_ + "ídas"
    }
  } ;
oper trocar_80 : Str -> Verbum = \trocar ->
  let tr_ = Predef.tk 4 trocar in
 {s = table {
    VI Infn => tr_ + "ocar" ;
    VI Ger => tr_ + "ocando" ;
    VI Part => tr_ + "ocado" ;
    VPB (Pres Ind Sg P1) => tr_ + "ueco" ;
    VPB (Pres Ind Sg P2) => tr_ + "uecas" ;
    VPB (Pres Ind Sg P3) => tr_ + "ueca" ;
    VPB (Pres Ind Pl P1) => tr_ + "ocamos" ;
    VPB (Pres Ind Pl P2) => tr_ + "ocáis" ;
    VPB (Pres Ind Pl P3) => tr_ + "uecan" ;
    VPB (Pres Sub Sg P1) => tr_ + "ueque" ;
    VPB (Pres Sub Sg P2) => tr_ + "ueques" ;
    VPB (Pres Sub Sg P3) => tr_ + "ueque" ;
    VPB (Pres Sub Pl P1) => tr_ + "oquemos" ;
    VPB (Pres Sub Pl P2) => tr_ + "oquéis" ;
    VPB (Pres Sub Pl P3) => tr_ + "uequen" ;
    VPB (Impf Ind Sg P1) => tr_ + "ocaba" ; --# notpresent
    VPB (Impf Ind Sg P2) => tr_ + "ocabas" ; --# notpresent
    VPB (Impf Ind Sg P3) => tr_ + "ocaba" ; --# notpresent
    VPB (Impf Ind Pl P1) => tr_ + "ocábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => tr_ + "ocabais" ; --# notpresent
    VPB (Impf Ind Pl P3) => tr_ + "ocaban" ; --# notpresent
    VPB (Impf Sub Sg P1) => tr_ + "ocara" ; --# notpresent
    VPB (Impf Sub Sg P2) => tr_ + "ocaras" ; --# notpresent
    VPB (Impf Sub Sg P3) => tr_ + "ocara" ; --# notpresent
    VPB (Impf Sub Pl P1) => tr_ + "ocáramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => tr_ + "ocarais" ; --# notpresent
    VPB (Impf Sub Pl P3) => tr_ + "ocaran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => tr_ + "ocase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => tr_ + "ocases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => tr_ + "ocase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => tr_ + "ocásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => tr_ + "ocaseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => tr_ + "ocasen" ; --# notpresent
    VPB (Pret Sg P1) => tr_ + "oqué" ; --# notpresent
    VPB (Pret Sg P2) => tr_ + "ocaste" ; --# notpresent
    VPB (Pret Sg P3) => tr_ + "ocó" ; --# notpresent
    VPB (Pret Pl P1) => tr_ + "ocamos" ; --# notpresent
    VPB (Pret Pl P2) => tr_ + "ocasteis" ; --# notpresent
    VPB (Pret Pl P3) => tr_ + "ocaron" ; --# notpresent
    VPB (Fut Ind Sg P1) => tr_ + "ocaré" ; --# notpresent
    VPB (Fut Ind Sg P2) => tr_ + "ocarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => tr_ + "ocará" ; --# notpresent
    VPB (Fut Ind Pl P1) => tr_ + "ocaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => tr_ + "ocaréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => tr_ + "ocarán" ; --# notpresent
    VPB (Fut Sub Sg P1) => tr_ + "ocare" ; --# notpresent
    VPB (Fut Sub Sg P2) => tr_ + "ocares" ; --# notpresent
    VPB (Fut Sub Sg P3) => tr_ + "ocare" ; --# notpresent
    VPB (Fut Sub Pl P1) => tr_ + "ocáremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => tr_ + "ocareis" ; --# notpresent
    VPB (Fut Sub Pl P3) => tr_ + "ocaren" ; --# notpresent
    VPB (Cond Sg P1) => tr_ + "ocaría" ; --# notpresent
    VPB (Cond Sg P2) => tr_ + "ocarías" ; --# notpresent
    VPB (Cond Sg P3) => tr_ + "ocaría" ; --# notpresent
    VPB (Cond Pl P1) => tr_ + "ocaríamos" ; --# notpresent
    VPB (Cond Pl P2) => tr_ + "ocaríais" ; --# notpresent
    VPB (Cond Pl P3) => tr_ + "ocarían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => tr_ + "ueca" ;
    VPB (Imper Sg P3) => tr_ + "ueque" ;
    VPB (Imper Pl P1) => tr_ + "oquemos" ;
    VPB (Imper Pl P2) => tr_ + "ocad" ;
    VPB (Imper Pl P3) => tr_ + "uequen" ;
    VPB (Pass Sg Masc) => tr_ + "ocado" ;
    VPB (Pass Sg Fem) => tr_ + "ocada" ;
    VPB (Pass Pl Masc) => tr_ + "ocados" ;
    VPB (Pass Pl Fem) => tr_ + "ocadas"
    }
  } ;
oper valer_81 : Str -> Verbum = \valer ->
  let val_ = Predef.tk 2 valer in
 {s = table {
    VI Infn => val_ + "er" ;
    VI Ger => val_ + "iendo" ;
    VI Part => val_ + "ido" ;
    VPB (Pres Ind Sg P1) => val_ + "go" ;
    VPB (Pres Ind Sg P2) => val_ + "es" ;
    VPB (Pres Ind Sg P3) => val_ + "e" ;
    VPB (Pres Ind Pl P1) => val_ + "emos" ;
    VPB (Pres Ind Pl P2) => val_ + "éis" ;
    VPB (Pres Ind Pl P3) => val_ + "en" ;
    VPB (Pres Sub Sg P1) => val_ + "ga" ;
    VPB (Pres Sub Sg P2) => val_ + "gas" ;
    VPB (Pres Sub Sg P3) => val_ + "ga" ;
    VPB (Pres Sub Pl P1) => val_ + "gamos" ;
    VPB (Pres Sub Pl P2) => val_ + "gáis" ;
    VPB (Pres Sub Pl P3) => val_ + "gan" ;
    VPB (Impf Ind Sg P1) => val_ + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => val_ + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => val_ + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => val_ + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => val_ + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => val_ + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => val_ + "iera" ; --# notpresent
    VPB (Impf Sub Sg P2) => val_ + "ieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => val_ + "iera" ; --# notpresent
    VPB (Impf Sub Pl P1) => val_ + "iéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => val_ + "ierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => val_ + "ieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => val_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => val_ + "ieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => val_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => val_ + "iésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => val_ + "ieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => val_ + "iesen" ; --# notpresent
    VPB (Pret Sg P1) => val_ + "í" ; --# notpresent
    VPB (Pret Sg P2) => val_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => val_ + "ió" ; --# notpresent
    VPB (Pret Pl P1) => val_ + "imos" ; --# notpresent
    VPB (Pret Pl P2) => val_ + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => val_ + "ieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => val_ + "dré" ; --# notpresent
    VPB (Fut Ind Sg P2) => val_ + "drás" ; --# notpresent
    VPB (Fut Ind Sg P3) => val_ + "drá" ; --# notpresent
    VPB (Fut Ind Pl P1) => val_ + "dremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => val_ + "dréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => val_ + "drán" ; --# notpresent
    VPB (Fut Sub Sg P1) => val_ + "iere" ; --# notpresent
    VPB (Fut Sub Sg P2) => val_ + "ieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => val_ + "iere" ; --# notpresent
    VPB (Fut Sub Pl P1) => val_ + "iéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => val_ + "iereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => val_ + "ieren" ; --# notpresent
    VPB (Cond Sg P1) => val_ + "dría" ; --# notpresent
    VPB (Cond Sg P2) => val_ + "drías" ; --# notpresent
    VPB (Cond Sg P3) => val_ + "dría" ; --# notpresent
    VPB (Cond Pl P1) => val_ + "dríamos" ; --# notpresent
    VPB (Cond Pl P2) => val_ + "dríais" ; --# notpresent
    VPB (Cond Pl P3) => val_ + "drían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => val_ + "e" ;
    VPB (Imper Sg P3) => val_ + "ga" ;
    VPB (Imper Pl P1) => val_ + "gamos" ;
    VPB (Imper Pl P2) => val_ + "ed" ;
    VPB (Imper Pl P3) => val_ + "gan" ;
    VPB (Pass Sg Masc) => val_ + "ido" ;
    VPB (Pass Sg Fem) => val_ + "ida" ;
    VPB (Pass Pl Masc) => val_ + "idos" ;
    VPB (Pass Pl Fem) => val_ + "idas"
    }
  } ;
oper venir_82 : Str -> Verbum = \venir ->
  let v_ = Predef.tk 4 venir in
 {s = table {
    VI Infn => v_ + "enir" ;
    VI Ger => v_ + "iniendo" ;
    VI Part => v_ + "enido" ;
    VPB (Pres Ind Sg P1) => v_ + "engo" ;
    VPB (Pres Ind Sg P2) => v_ + "ienes" ;
    VPB (Pres Ind Sg P3) => v_ + "iene" ;
    VPB (Pres Ind Pl P1) => v_ + "enimos" ;
    VPB (Pres Ind Pl P2) => v_ + "enís" ;
    VPB (Pres Ind Pl P3) => v_ + "ienen" ;
    VPB (Pres Sub Sg P1) => v_ + "enga" ;
    VPB (Pres Sub Sg P2) => v_ + "engas" ;
    VPB (Pres Sub Sg P3) => v_ + "enga" ;
    VPB (Pres Sub Pl P1) => v_ + "engamos" ;
    VPB (Pres Sub Pl P2) => v_ + "engáis" ;
    VPB (Pres Sub Pl P3) => v_ + "engan" ;
    VPB (Impf Ind Sg P1) => v_ + "enía" ; --# notpresent
    VPB (Impf Ind Sg P2) => v_ + "enías" ; --# notpresent
    VPB (Impf Ind Sg P3) => v_ + "enía" ; --# notpresent
    VPB (Impf Ind Pl P1) => v_ + "eníamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => v_ + "eníais" ; --# notpresent
    VPB (Impf Ind Pl P3) => v_ + "enían" ; --# notpresent
    VPB (Impf Sub Sg P1) => v_ + "iniera" ; --# notpresent
    VPB (Impf Sub Sg P2) => v_ + "inieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => v_ + "iniera" ; --# notpresent
    VPB (Impf Sub Pl P1) => v_ + "iniéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => v_ + "inierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => v_ + "inieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => v_ + "iniese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => v_ + "inieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => v_ + "iniese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => v_ + "iniésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => v_ + "inieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => v_ + "iniesen" ; --# notpresent
    VPB (Pret Sg P1) => v_ + "ine" ; --# notpresent
    VPB (Pret Sg P2) => v_ + "iniste" ; --# notpresent
    VPB (Pret Sg P3) => v_ + "ino" ; --# notpresent
    VPB (Pret Pl P1) => v_ + "inimos" ; --# notpresent
    VPB (Pret Pl P2) => v_ + "inisteis" ; --# notpresent
    VPB (Pret Pl P3) => v_ + "inieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => v_ + "endré" ; --# notpresent
    VPB (Fut Ind Sg P2) => v_ + "endrás" ; --# notpresent
    VPB (Fut Ind Sg P3) => v_ + "endrá" ; --# notpresent
    VPB (Fut Ind Pl P1) => v_ + "endremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => v_ + "endréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => v_ + "endrán" ; --# notpresent
    VPB (Fut Sub Sg P1) => v_ + "iniere" ; --# notpresent
    VPB (Fut Sub Sg P2) => v_ + "inieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => v_ + "iniere" ; --# notpresent
    VPB (Fut Sub Pl P1) => v_ + "iniéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => v_ + "iniereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => v_ + "inieren" ; --# notpresent
    VPB (Cond Sg P1) => v_ + "endría" ; --# notpresent
    VPB (Cond Sg P2) => v_ + "endrías" ; --# notpresent
    VPB (Cond Sg P3) => v_ + "endría" ; --# notpresent
    VPB (Cond Pl P1) => v_ + "endríamos" ; --# notpresent
    VPB (Cond Pl P2) => v_ + "endríais" ; --# notpresent
    VPB (Cond Pl P3) => v_ + "endrían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => v_ + "en" ;
    VPB (Imper Sg P3) => v_ + "enga" ;
    VPB (Imper Pl P1) => v_ + "engamos" ;
    VPB (Imper Pl P2) => v_ + "enid" ;
    VPB (Imper Pl P3) => v_ + "engan" ;
    VPB (Pass Sg Masc) => v_ + "enido" ;
    VPB (Pass Sg Fem) => v_ + "enida" ;
    VPB (Pass Pl Masc) => v_ + "enidos" ;
    VPB (Pass Pl Fem) => v_ + "enidas"
    }
  } ;
oper ver_83 : Str -> Verbum = \ver ->
  let v_ = Predef.tk 2 ver in
 {s = table {
    VI Infn => v_ + "er" ;
    VI Ger => v_ + "iendo" ;
    VI Part => v_ + "isto" ;
    VPB (Pres Ind Sg P1) => v_ + "eo" ;
    VPB (Pres Ind Sg P2) => v_ + "es" ;
    VPB (Pres Ind Sg P3) => v_ + "e" ;
    VPB (Pres Ind Pl P1) => v_ + "emos" ;
    VPB (Pres Ind Pl P2) => v_ + "eis" ;
    VPB (Pres Ind Pl P3) => v_ + "en" ;
    VPB (Pres Sub Sg P1) => v_ + "ea" ;
    VPB (Pres Sub Sg P2) => v_ + "eas" ;
    VPB (Pres Sub Sg P3) => v_ + "ea" ;
    VPB (Pres Sub Pl P1) => v_ + "eamos" ;
    VPB (Pres Sub Pl P2) => v_ + "eáis" ;
    VPB (Pres Sub Pl P3) => v_ + "ean" ;
    VPB (Impf Ind Sg P1) => v_ + "eía" ; --# notpresent
    VPB (Impf Ind Sg P2) => v_ + "eías" ; --# notpresent
    VPB (Impf Ind Sg P3) => v_ + "eía" ; --# notpresent
    VPB (Impf Ind Pl P1) => v_ + "eíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => v_ + "eíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => v_ + "eían" ; --# notpresent
    VPB (Impf Sub Sg P1) => v_ + "iera" ; --# notpresent
    VPB (Impf Sub Sg P2) => v_ + "ieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => v_ + "iera" ; --# notpresent
    VPB (Impf Sub Pl P1) => v_ + "iéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => v_ + "ierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => v_ + "ieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => v_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => v_ + "ieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => v_ + "iese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => v_ + "iésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => v_ + "ieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => v_ + "iesen" ; --# notpresent
    VPB (Pret Sg P1) => v_ + "i" ; --# notpresent
    VPB (Pret Sg P2) => v_ + "iste" ; --# notpresent
    VPB (Pret Sg P3) => v_ + "io" ; --# notpresent
    VPB (Pret Pl P1) => v_ + "imos" ; --# notpresent
    VPB (Pret Pl P2) => v_ + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => v_ + "ieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => v_ + "eré" ; --# notpresent
    VPB (Fut Ind Sg P2) => v_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => v_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => v_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => v_ + "eréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => v_ + "erán" ; --# notpresent
    VPB (Fut Sub Sg P1) => v_ + "iere" ; --# notpresent
    VPB (Fut Sub Sg P2) => v_ + "ieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => v_ + "iere" ; --# notpresent
    VPB (Fut Sub Pl P1) => v_ + "iéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => v_ + "iereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => v_ + "ieren" ; --# notpresent
    VPB (Cond Sg P1) => v_ + "ería" ; --# notpresent
    VPB (Cond Sg P2) => v_ + "erías" ; --# notpresent
    VPB (Cond Sg P3) => v_ + "ería" ; --# notpresent
    VPB (Cond Pl P1) => v_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => v_ + "eríais" ; --# notpresent
    VPB (Cond Pl P3) => v_ + "erían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => v_ + "e" ;
    VPB (Imper Sg P3) => v_ + "ea" ;
    VPB (Imper Pl P1) => v_ + "eamos" ;
    VPB (Imper Pl P2) => v_ + "ed" ;
    VPB (Imper Pl P3) => v_ + "ean" ;
    VPB (Pass Sg Masc) => v_ + "isto" ;
    VPB (Pass Sg Fem) => v_ + "ista" ;
    VPB (Pass Pl Masc) => v_ + "istos" ;
    VPB (Pass Pl Fem) => v_ + "istas"
    }
  } ;
oper volver_84 : Str -> Verbum = \volver ->
  let v_ = Predef.tk 5 volver in
 {s = table {
    VI Infn => v_ + "olver" ;
    VI Ger => v_ + "olviendo" ;
    VI Part => v_ + "uelto" ;
    VPB (Pres Ind Sg P1) => v_ + "uelvo" ;
    VPB (Pres Ind Sg P2) => v_ + "uelves" ;
    VPB (Pres Ind Sg P3) => v_ + "uelve" ;
    VPB (Pres Ind Pl P1) => v_ + "olvemos" ;
    VPB (Pres Ind Pl P2) => v_ + "olvéis" ;
    VPB (Pres Ind Pl P3) => v_ + "uelven" ;
    VPB (Pres Sub Sg P1) => v_ + "uelva" ;
    VPB (Pres Sub Sg P2) => v_ + "uelvas" ;
    VPB (Pres Sub Sg P3) => v_ + "uelva" ;
    VPB (Pres Sub Pl P1) => v_ + "olvamos" ;
    VPB (Pres Sub Pl P2) => v_ + "olváis" ;
    VPB (Pres Sub Pl P3) => v_ + "uelvan" ;
    VPB (Impf Ind Sg P1) => v_ + "olvía" ; --# notpresent
    VPB (Impf Ind Sg P2) => v_ + "olvías" ; --# notpresent
    VPB (Impf Ind Sg P3) => v_ + "olvía" ; --# notpresent
    VPB (Impf Ind Pl P1) => v_ + "olvíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => v_ + "olvíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => v_ + "olvían" ; --# notpresent
    VPB (Impf Sub Sg P1) => v_ + "olviera" ; --# notpresent
    VPB (Impf Sub Sg P2) => v_ + "olvieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => v_ + "olviera" ; --# notpresent
    VPB (Impf Sub Pl P1) => v_ + "olviéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => v_ + "olvierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => v_ + "olvieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => v_ + "olviese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => v_ + "olvieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => v_ + "olviese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => v_ + "olviésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => v_ + "olvieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => v_ + "olviesen" ; --# notpresent
    VPB (Pret Sg P1) => v_ + "olví" ; --# notpresent
    VPB (Pret Sg P2) => v_ + "olviste" ; --# notpresent
    VPB (Pret Sg P3) => v_ + "olvió" ; --# notpresent
    VPB (Pret Pl P1) => v_ + "olvimos" ; --# notpresent
    VPB (Pret Pl P2) => v_ + "olvisteis" ; --# notpresent
    VPB (Pret Pl P3) => v_ + "olvieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => v_ + "olveré" ; --# notpresent
    VPB (Fut Ind Sg P2) => v_ + "olverás" ; --# notpresent
    VPB (Fut Ind Sg P3) => v_ + "olverá" ; --# notpresent
    VPB (Fut Ind Pl P1) => v_ + "olveremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => v_ + "olveréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => v_ + "olverán" ; --# notpresent
    VPB (Fut Sub Sg P1) => v_ + "olviere" ; --# notpresent
    VPB (Fut Sub Sg P2) => v_ + "olvieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => v_ + "olviere" ; --# notpresent
    VPB (Fut Sub Pl P1) => v_ + "olviéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => v_ + "olviereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => v_ + "olvieren" ; --# notpresent
    VPB (Cond Sg P1) => v_ + "olvería" ; --# notpresent
    VPB (Cond Sg P2) => v_ + "olverías" ; --# notpresent
    VPB (Cond Sg P3) => v_ + "olvería" ; --# notpresent
    VPB (Cond Pl P1) => v_ + "olveríamos" ; --# notpresent
    VPB (Cond Pl P2) => v_ + "olveríais" ; --# notpresent
    VPB (Cond Pl P3) => v_ + "olverían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => v_ + "uelve" ;
    VPB (Imper Sg P3) => v_ + "uelva" ;
    VPB (Imper Pl P1) => v_ + "olvamos" ;
    VPB (Imper Pl P2) => v_ + "olved" ;
    VPB (Imper Pl P3) => v_ + "uelvan" ;
    VPB (Pass Sg Masc) => v_ + "uelto" ;
    VPB (Pass Sg Fem) => v_ + "uelta" ;
    VPB (Pass Pl Masc) => v_ + "ueltos" ;
    VPB (Pass Pl Fem) => v_ + "ueltas"
    }
  } ;
oper yacer_85 : Str -> Verbum = \yacer ->
  let ya_ = Predef.tk 3 yacer in
 {s = table {
    VI Infn => ya_ + "cer" ;
    VI Ger => ya_ + "ciendo" ;
    VI Part => ya_ + "cido" ;
    VPB (Pres Ind Sg P1) => ya_ + "zgo" ;
    VPB (Pres Ind Sg P2) => ya_ + "ces" ;
    VPB (Pres Ind Sg P3) => ya_ + "ce" ;
    VPB (Pres Ind Pl P1) => ya_ + "cemos" ;
    VPB (Pres Ind Pl P2) => ya_ + "céis" ;
    VPB (Pres Ind Pl P3) => ya_ + "cen" ;
    VPB (Pres Sub Sg P1) => ya_ + "zga" ;
    VPB (Pres Sub Sg P2) => ya_ + "zgas" ;
    VPB (Pres Sub Sg P3) => ya_ + "zga" ;
    VPB (Pres Sub Pl P1) => ya_ + "zgamos" ;
    VPB (Pres Sub Pl P2) => ya_ + "zgáis" ;
    VPB (Pres Sub Pl P3) => ya_ + "zgan" ;
    VPB (Impf Ind Sg P1) => ya_ + "cía" ; --# notpresent
    VPB (Impf Ind Sg P2) => ya_ + "cías" ; --# notpresent
    VPB (Impf Ind Sg P3) => ya_ + "cía" ; --# notpresent
    VPB (Impf Ind Pl P1) => ya_ + "cíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => ya_ + "cíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => ya_ + "cían" ; --# notpresent
    VPB (Impf Sub Sg P1) => ya_ + "ciera" ; --# notpresent
    VPB (Impf Sub Sg P2) => ya_ + "cieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => ya_ + "ciera" ; --# notpresent
    VPB (Impf Sub Pl P1) => ya_ + "ciéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => ya_ + "cierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => ya_ + "cieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => ya_ + "ciese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => ya_ + "cieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => ya_ + "ciese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => ya_ + "ciésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => ya_ + "cieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => ya_ + "ciesen" ; --# notpresent
    VPB (Pret Sg P1) => ya_ + "cí" ; --# notpresent
    VPB (Pret Sg P2) => ya_ + "ciste" ; --# notpresent
    VPB (Pret Sg P3) => ya_ + "ció" ; --# notpresent
    VPB (Pret Pl P1) => ya_ + "cimos" ; --# notpresent
    VPB (Pret Pl P2) => ya_ + "cisteis" ; --# notpresent
    VPB (Pret Pl P3) => ya_ + "cieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => ya_ + "ceré" ; --# notpresent
    VPB (Fut Ind Sg P2) => ya_ + "cerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => ya_ + "cerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => ya_ + "ceremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => ya_ + "ceréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => ya_ + "cerán" ; --# notpresent
    VPB (Fut Sub Sg P1) => ya_ + "ciere" ; --# notpresent
    VPB (Fut Sub Sg P2) => ya_ + "cieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => ya_ + "ciere" ; --# notpresent
    VPB (Fut Sub Pl P1) => ya_ + "ciéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => ya_ + "ciereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => ya_ + "cieren" ; --# notpresent
    VPB (Cond Sg P1) => ya_ + "cería" ; --# notpresent
    VPB (Cond Sg P2) => ya_ + "cerías" ; --# notpresent
    VPB (Cond Sg P3) => ya_ + "cería" ; --# notpresent
    VPB (Cond Pl P1) => ya_ + "ceríamos" ; --# notpresent
    VPB (Cond Pl P2) => ya_ + "ceríais" ; --# notpresent
    VPB (Cond Pl P3) => ya_ + "cerían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => ya_ + "ce" ;
    VPB (Imper Sg P3) => ya_ + "zga" ;
    VPB (Imper Pl P1) => ya_ + "zgamos" ;
    VPB (Imper Pl P2) => ya_ + "ced" ;
    VPB (Imper Pl P3) => ya_ + "zgan" ;
    VPB (Pass Sg Masc) => ya_ + "cido" ;
    VPB (Pass Sg Fem) => ya_ + "cida" ;
    VPB (Pass Pl Masc) => ya_ + "cidos" ;
    VPB (Pass Pl Fem) => ya_ + "cidas"
    }
  } ;
oper zurcir_86 : Str -> Verbum = \zurcir ->
  let zur_ = Predef.tk 3 zurcir in
 {s = table {
    VI Infn => zur_ + "cir" ;
    VI Ger => zur_ + "ciendo" ;
    VI Part => zur_ + "cido" ;
    VPB (Pres Ind Sg P1) => zur_ + "zo" ;
    VPB (Pres Ind Sg P2) => zur_ + "ces" ;
    VPB (Pres Ind Sg P3) => zur_ + "ce" ;
    VPB (Pres Ind Pl P1) => zur_ + "cimos" ;
    VPB (Pres Ind Pl P2) => zur_ + "cís" ;
    VPB (Pres Ind Pl P3) => zur_ + "cen" ;
    VPB (Pres Sub Sg P1) => zur_ + "za" ;
    VPB (Pres Sub Sg P2) => zur_ + "zas" ;
    VPB (Pres Sub Sg P3) => zur_ + "za" ;
    VPB (Pres Sub Pl P1) => zur_ + "zamos" ;
    VPB (Pres Sub Pl P2) => zur_ + "záis" ;
    VPB (Pres Sub Pl P3) => zur_ + "zan" ;
    VPB (Impf Ind Sg P1) => zur_ + "cía" ; --# notpresent
    VPB (Impf Ind Sg P2) => zur_ + "cías" ; --# notpresent
    VPB (Impf Ind Sg P3) => zur_ + "cía" ; --# notpresent
    VPB (Impf Ind Pl P1) => zur_ + "cíamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => zur_ + "cíais" ; --# notpresent
    VPB (Impf Ind Pl P3) => zur_ + "cían" ; --# notpresent
    VPB (Impf Sub Sg P1) => zur_ + "ciera" ; --# notpresent
    VPB (Impf Sub Sg P2) => zur_ + "cieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => zur_ + "ciera" ; --# notpresent
    VPB (Impf Sub Pl P1) => zur_ + "ciéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => zur_ + "cierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => zur_ + "cieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => zur_ + "ciese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => zur_ + "cieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => zur_ + "ciese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => zur_ + "ciésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => zur_ + "cieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => zur_ + "ciesen" ; --# notpresent
    VPB (Pret Sg P1) => zur_ + "cí" ; --# notpresent
    VPB (Pret Sg P2) => zur_ + "ciste" ; --# notpresent
    VPB (Pret Sg P3) => zur_ + "ció" ; --# notpresent
    VPB (Pret Pl P1) => zur_ + "cimos" ; --# notpresent
    VPB (Pret Pl P2) => zur_ + "cisteis" ; --# notpresent
    VPB (Pret Pl P3) => zur_ + "cieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => zur_ + "ciré" ; --# notpresent
    VPB (Fut Ind Sg P2) => zur_ + "cirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => zur_ + "cirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => zur_ + "ciremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => zur_ + "ciréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => zur_ + "cirán" ; --# notpresent
    VPB (Fut Sub Sg P1) => zur_ + "ciere" ; --# notpresent
    VPB (Fut Sub Sg P2) => zur_ + "cieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => zur_ + "ciere" ; --# notpresent
    VPB (Fut Sub Pl P1) => zur_ + "ciéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => zur_ + "ciereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => zur_ + "cieren" ; --# notpresent
    VPB (Cond Sg P1) => zur_ + "ciría" ; --# notpresent
    VPB (Cond Sg P2) => zur_ + "cirías" ; --# notpresent
    VPB (Cond Sg P3) => zur_ + "ciría" ; --# notpresent
    VPB (Cond Pl P1) => zur_ + "ciríamos" ; --# notpresent
    VPB (Cond Pl P2) => zur_ + "ciríais" ; --# notpresent
    VPB (Cond Pl P3) => zur_ + "cirían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => zur_ + "ce" ;
    VPB (Imper Sg P3) => zur_ + "za" ;
    VPB (Imper Pl P1) => zur_ + "zamos" ;
    VPB (Imper Pl P2) => zur_ + "cid" ;
    VPB (Imper Pl P3) => zur_ + "zan" ;
    VPB (Pass Sg Masc) => zur_ + "cido" ;
    VPB (Pass Sg Fem) => zur_ + "cida" ;
    VPB (Pass Pl Masc) => zur_ + "cidos" ;
    VPB (Pass Pl Fem) => zur_ + "cidas"
    }
  } ;
oper amar_87 : Str -> Verbum = \amar ->
  let am_ = Predef.tk 2 amar in
 {s = table {
    VI Infn => am_ + "ar" ;
    VI Ger => am_ + "ando" ;
    VI Part => am_ + "ado" ;
    VPB (Pres Ind Sg P1) => am_ + "o" ;
    VPB (Pres Ind Sg P2) => am_ + "as" ;
    VPB (Pres Ind Sg P3) => am_ + "a" ;
    VPB (Pres Ind Pl P1) => am_ + "amos" ;
    VPB (Pres Ind Pl P2) => am_ + "áis" ;
    VPB (Pres Ind Pl P3) => am_ + "an" ;
    VPB (Pres Sub Sg P1) => am_ + "e" ;
    VPB (Pres Sub Sg P2) => am_ + "es" ;
    VPB (Pres Sub Sg P3) => am_ + "e" ;
    VPB (Pres Sub Pl P1) => am_ + "emos" ;
    VPB (Pres Sub Pl P2) => am_ + "éis" ;
    VPB (Pres Sub Pl P3) => am_ + "en" ;
    VPB (Impf Ind Sg P1) => am_ + "aba" ; --# notpresent
    VPB (Impf Ind Sg P2) => am_ + "abas" ; --# notpresent
    VPB (Impf Ind Sg P3) => am_ + "aba" ; --# notpresent
    VPB (Impf Ind Pl P1) => am_ + "ábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => am_ + "abais" ; --# notpresent
    VPB (Impf Ind Pl P3) => am_ + "aban" ; --# notpresent
    VPB (Impf Sub Sg P1) => am_ + "ara" ; --# notpresent
    VPB (Impf Sub Sg P2) => am_ + "aras" ; --# notpresent
    VPB (Impf Sub Sg P3) => am_ + "ara" ; --# notpresent
    VPB (Impf Sub Pl P1) => am_ + "áramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => am_ + "arais" ; --# notpresent
    VPB (Impf Sub Pl P3) => am_ + "aran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => am_ + "ase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => am_ + "ases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => am_ + "ase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => am_ + "ásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => am_ + "aseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => am_ + "asen" ; --# notpresent
    VPB (Pret Sg P1) => am_ + "é" ; --# notpresent
    VPB (Pret Sg P2) => am_ + "aste" ; --# notpresent
    VPB (Pret Sg P3) => am_ + "ó" ; --# notpresent
    VPB (Pret Pl P1) => am_ + "amos" ; --# notpresent
    VPB (Pret Pl P2) => am_ + "asteis" ; --# notpresent
    VPB (Pret Pl P3) => am_ + "aron" ; --# notpresent
    VPB (Fut Ind Sg P1) => am_ + "aré" ; --# notpresent
    VPB (Fut Ind Sg P2) => am_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => am_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => am_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => am_ + "aréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => am_ + "arán" ; --# notpresent
    VPB (Fut Sub Sg P1) => am_ + "are" ; --# notpresent
    VPB (Fut Sub Sg P2) => am_ + "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => am_ + "are" ; --# notpresent
    VPB (Fut Sub Pl P1) => am_ + "áremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => am_ + "areis" ; --# notpresent
    VPB (Fut Sub Pl P3) => am_ + "aren" ; --# notpresent
    VPB (Cond Sg P1) => am_ + "aría" ; --# notpresent
    VPB (Cond Sg P2) => am_ + "arías" ; --# notpresent
    VPB (Cond Sg P3) => am_ + "aría" ; --# notpresent
    VPB (Cond Pl P1) => am_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => am_ + "aríais" ; --# notpresent
    VPB (Cond Pl P3) => am_ + "arían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => am_ + "a" ;
    VPB (Imper Sg P3) => am_ + "e" ;
    VPB (Imper Pl P1) => am_ + "emos" ;
    VPB (Imper Pl P2) => am_ + "ad" ;
    VPB (Imper Pl P3) => am_ + "en" ;
    VPB (Pass Sg Masc) => am_ + "ado" ;
    VPB (Pass Sg Fem) => am_ + "ada" ;
    VPB (Pass Pl Masc) => am_ + "ados" ;
    VPB (Pass Pl Fem) => am_ + "adas"
    }
  } ;
oper llover_89 : Str -> Verbum = \llover ->
  let ll_ = Predef.tk 4 llover in
 {s = table {
    VI Infn => ll_ + "over" ;
    VI Ger => ll_ + "oviendo" ;
    VI Part => ll_ + "ovido" ;
    VPB (Pres Ind Sg P1) => variants {} ;
    VPB (Pres Ind Sg P2) => variants {} ;
    VPB (Pres Ind Sg P3) => ll_ + "ueve" ;
    VPB (Pres Ind Pl P1) => variants {} ;
    VPB (Pres Ind Pl P2) => variants {} ;
    VPB (Pres Ind Pl P3) => variants {} ;
    VPB (Pres Sub Sg P1) => variants {} ;
    VPB (Pres Sub Sg P2) => variants {} ;
    VPB (Pres Sub Sg P3) => ll_ + "ueva" ;
    VPB (Pres Sub Pl P1) => variants {} ;
    VPB (Pres Sub Pl P2) => variants {} ;
    VPB (Pres Sub Pl P3) => variants {} ;
    VPB (Impf Ind Sg P1) => variants {} ; --# notpresent
    VPB (Impf Ind Sg P2) => variants {} ; --# notpresent
    VPB (Impf Ind Sg P3) => ll_ + "ovía" ; --# notpresent
    VPB (Impf Ind Pl P1) => variants {} ; --# notpresent
    VPB (Impf Ind Pl P2) => variants {} ; --# notpresent
    VPB (Impf Ind Pl P3) => variants {} ; --# notpresent
    VPB (Impf Sub Sg P1) => variants {} ; --# notpresent
    VPB (Impf Sub Sg P2) => variants {} ; --# notpresent
    VPB (Impf Sub Sg P3) => ll_ + "oviera" ; --# notpresent
    VPB (Impf Sub Pl P1) => variants {} ; --# notpresent
    VPB (Impf Sub Pl P2) => variants {} ; --# notpresent
    VPB (Impf Sub Pl P3) => variants {} ; --# notpresent
    VPB (ImpfSub2 Sg P1) => variants {} ; --# notpresent
    VPB (ImpfSub2 Sg P2) => variants {} ; --# notpresent
    VPB (ImpfSub2 Sg P3) => ll_ + "oviese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => variants {} ; --# notpresent
    VPB (ImpfSub2 Pl P2) => variants {} ; --# notpresent
    VPB (ImpfSub2 Pl P3) => variants {} ; --# notpresent
    VPB (Pret Sg P1) => variants {} ; --# notpresent
    VPB (Pret Sg P2) => variants {} ; --# notpresent
    VPB (Pret Sg P3) => ll_ + "ovió" ; --# notpresent
    VPB (Pret Pl P1) => variants {} ; --# notpresent
    VPB (Pret Pl P2) => variants {} ; --# notpresent
    VPB (Pret Pl P3) => variants {} ; --# notpresent
    VPB (Fut Ind Sg P1) => variants {} ; --# notpresent
    VPB (Fut Ind Sg P2) => variants {} ; --# notpresent
    VPB (Fut Ind Sg P3) => ll_ + "overá" ; --# notpresent
    VPB (Fut Ind Pl P1) => variants {} ; --# notpresent
    VPB (Fut Ind Pl P2) => variants {} ; --# notpresent
    VPB (Fut Ind Pl P3) => variants {} ; --# notpresent
    VPB (Fut Sub Sg P1) => variants {} ; --# notpresent
    VPB (Fut Sub Sg P2) => variants {} ; --# notpresent
    VPB (Fut Sub Sg P3) => ll_ + "oviere" ; --# notpresent
    VPB (Fut Sub Pl P1) => variants {} ; --# notpresent
    VPB (Fut Sub Pl P2) => variants {} ; --# notpresent
    VPB (Fut Sub Pl P3) => variants {} ; --# notpresent
    VPB (Cond Sg P1) => variants {} ; --# notpresent
    VPB (Cond Sg P2) => variants {} ; --# notpresent
    VPB (Cond Sg P3) => ll_ + "overía" ; --# notpresent
    VPB (Cond Pl P1) => variants {} ; --# notpresent
    VPB (Cond Pl P2) => variants {} ; --# notpresent
    VPB (Cond Pl P3) => variants {} ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => variants {} ;
    VPB (Imper Sg P3) => variants {} ;
    VPB (Imper Pl P1) => variants {} ;
    VPB (Imper Pl P2) => variants {} ;
    VPB (Imper Pl P3) => variants {} ;
    VPB (Pass Sg Masc) => variants {} ;
    VPB (Pass Sg Fem) => variants {} ;
    VPB (Pass Pl Masc) => variants {} ;
    VPB (Pass Pl Fem) => variants {}
    }
  } ;


-- Verbs: conversion from full verbs to present-tense verbs.

  verbBesch : {s : VFB => Str} -> {s : CommonRomance.VF => Str} = \amar -> 
  {-
   -- even imperatives should be modified this way, so let's postpone this
   -- AR 21/6/2006 
  let 
      amare = amar.s ! VI Infn ;
      a'r = case last (init amare) of {
        "i" => "ír" ;
        "e" => "ér" ;
        _   => "ár"
        } ;
      ama'r = Predef.tk 2 amare ++ a'r
    in
   -}
  {s = table { 
--    VInfin True                 => ama'r ;
    VInfin _ => amar.s ! VI Infn ;
    VFin (VPres   Indic) n p => amar.s ! VPB (Pres Ind  n p) ; 
    VFin (VPres   Conjunct) n p => amar.s ! VPB (Pres Sub n p) ;
    VFin (VImperf Indic) n p => amar.s ! VPB (Impf Ind  n p) ;  --# notpresent --# notpresent
    VFin (VImperf Conjunct) n p => amar.s ! VPB (Impf Sub n p) ; --# notpresent --# notpresent
    VFin VPasse n p        => amar.s ! VPB (Pret n p) ; --# notpresent --# notpresent
    VFin VFut n p          => amar.s ! VPB (Fut  Ind n p) ; --# notpresent --# notpresent
    VFin VCondit n p       => amar.s ! VPB (Cond n p) ; --# notpresent --# notpresent
    VImper SgP2            => amar.s ! VPB (Imper  Sg P2) ;
    VImper PlP1            => amar.s ! VPB (Imper  Pl P1) ;
    VImper PlP2            => amar.s ! VPB (Imper  Pl P2) ;
    VPart g n              => amar.s ! VPB (Pass n g) ;
    VGer | VPresPart       => amar.s ! VI Ger
    }
  } ;


-- The full conjunction is a table on $VForm$:

param
  VImpers =   
     Infn   
   | Ger   
   | Part
   ;
   
  Mode = Ind | Sub ;

  VPers =   
     Pres Mode Number Person   
   | Impf Mode Number Person    --# notpresent --# notpresent
   | ImpfSub2  Number Person    --# notpresent --# notpresent
   | Pret      Number Person    --# notpresent --# notpresent
   | Fut  Mode Number Person    --# notpresent --# notpresent
   | Cond      Number Person    --# notpresent --# notpresent
   | Imper       Number Person
   | Pass      Number Gender   
   ;
   
  VFB =   
     VI VImpers   
   | VPB VPers   
   ;

oper
  regAlternV : Str -> Str -> Verbum = 
  \mostrar, muestro -> 
    let 
      mostr  = Predef.tk 2 mostrar ;
      muestr = Predef.tk 1 muestro 
    in
   {s = table {
    VI Infn => mostr + "ar" ;
    VI Ger => mostr + "ando" ;
    VI Part => mostr + "ado" ;
    VPB (Pres Ind Sg P1) => muestr + "o" ;
    VPB (Pres Ind Sg P2) => muestr + "as" ;
    VPB (Pres Ind Sg P3) => muestr + "a" ;
    VPB (Pres Ind Pl P1) => mostr + "amos" ;
    VPB (Pres Ind Pl P2) => mostr + "áis" ;
    VPB (Pres Ind Pl P3) => muestr + "an" ;
    VPB (Pres Sub Sg P1) => muestr + "e" ;
    VPB (Pres Sub Sg P2) => muestr + "es" ;
    VPB (Pres Sub Sg P3) => muestr + "e" ;
    VPB (Pres Sub Pl P1) => mostr + "emos" ;
    VPB (Pres Sub Pl P2) => mostr + "éis" ;
    VPB (Pres Sub Pl P3) => muestr + "en" ;
    VPB (Impf Ind Sg P1) => mostr + "aba" ; --# notpresent
    VPB (Impf Ind Sg P2) => mostr + "abas" ; --# notpresent
    VPB (Impf Ind Sg P3) => mostr + "aba" ; --# notpresent
    VPB (Impf Ind Pl P1) => mostr + "ábamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => mostr + "abais" ; --# notpresent
    VPB (Impf Ind Pl P3) => mostr + "aban" ; --# notpresent
    VPB (Impf Sub Sg P1) => mostr + "ara" ; --# notpresent
    VPB (Impf Sub Sg P2) => mostr + "aras" ; --# notpresent
    VPB (Impf Sub Sg P3) => mostr + "ara" ; --# notpresent
    VPB (Impf Sub Pl P1) => mostr + "áramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => mostr + "arais" ; --# notpresent
    VPB (Impf Sub Pl P3) => mostr + "aran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => mostr + "ase" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => mostr + "ases" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => mostr + "ase" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => mostr + "ásemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => mostr + "aseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => mostr + "asen" ; --# notpresent
    VPB (Pret Sg P1) => mostr + "é" ; --# notpresent
    VPB (Pret Sg P2) => mostr + "aste" ; --# notpresent
    VPB (Pret Sg P3) => mostr + "ó" ; --# notpresent
    VPB (Pret Pl P1) => mostr + "amos" ; --# notpresent
    VPB (Pret Pl P2) => mostr + "asteis" ; --# notpresent
    VPB (Pret Pl P3) => mostr + "aron" ; --# notpresent
    VPB (Fut Ind Sg P1) => mostr + "aré" ; --# notpresent
    VPB (Fut Ind Sg P2) => mostr + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => mostr + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => mostr + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => mostr + "aréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => mostr + "arán" ; --# notpresent
    VPB (Fut Sub Sg P1) => mostr + "are" ; --# notpresent
    VPB (Fut Sub Sg P2) => mostr + "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => mostr + "are" ; --# notpresent
    VPB (Fut Sub Pl P1) => mostr + "áremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => mostr + "areis" ; --# notpresent
    VPB (Fut Sub Pl P3) => mostr + "aren" ; --# notpresent
    VPB (Cond Sg P1) => mostr + "aría" ; --# notpresent
    VPB (Cond Sg P2) => mostr + "arías" ; --# notpresent
    VPB (Cond Sg P3) => mostr + "aría" ; --# notpresent
    VPB (Cond Pl P1) => mostr + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => mostr + "aríais" ; --# notpresent
    VPB (Cond Pl P3) => mostr + "arían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => muestr + "a" ;
    VPB (Imper Sg P3) => muestr + "e" ;
    VPB (Imper Pl P1) => mostr + "emos" ;
    VPB (Imper Pl P2) => mostr + "ad" ;
    VPB (Imper Pl P3) => muestr + "en" ;
    VPB (Pass Sg Masc) => mostr + "ado" ;
    VPB (Pass Sg Fem) => mostr + "ada" ;
    VPB (Pass Pl Masc) => mostr + "ados" ;
    VPB (Pass Pl Fem) => mostr + "adas"
    }
  } ;
  
  regAlternVEr : Str -> Str -> Verbum = 
  \entender, entiendo -> 
    let 
      entend  = Predef.tk 2 entender ;
      entiend = Predef.tk 1 entiendo ;
    in
   {s = table {
    VI Infn => entender ;
    VI Ger => entend + "iendo" ;
    VI Part => entend + "ido" ;
    VPB (Pres Ind Sg P1) => entiend + "o" ;
    VPB (Pres Ind Sg P2) => entiend + "es" ;
    VPB (Pres Ind Sg P3) => entiend + "e" ;
    VPB (Pres Ind Pl P1) => entend + "emos" ;
    VPB (Pres Ind Pl P2) => entend + "éis" ;
    VPB (Pres Ind Pl P3) => entiend + "en" ;
    VPB (Pres Sub Sg P1) => entiend + "a" ;
    VPB (Pres Sub Sg P2) => entiend + "as" ;
    VPB (Pres Sub Sg P3) => entiend + "a" ;
    VPB (Pres Sub Pl P1) => entend + "amos" ;
    VPB (Pres Sub Pl P2) => entend + "áis" ;
    VPB (Pres Sub Pl P3) => entiend + "an" ;
    VPB (Impf Ind Sg P1) => entend + "ía" ; --# notpresent
    VPB (Impf Ind Sg P2) => entend + "ías" ; --# notpresent
    VPB (Impf Ind Sg P3) => entend + "ía" ; --# notpresent
    VPB (Impf Ind Pl P1) => entend + "íamos" ; --# notpresent
    VPB (Impf Ind Pl P2) => entend + "íais" ; --# notpresent
    VPB (Impf Ind Pl P3) => entend + "ían" ; --# notpresent
    VPB (Impf Sub Sg P1) => entend + "iera" ; --# notpresent
    VPB (Impf Sub Sg P2) => entend + "ieras" ; --# notpresent
    VPB (Impf Sub Sg P3) => entend + "iera" ; --# notpresent
    VPB (Impf Sub Pl P1) => entend + "iéramos" ; --# notpresent
    VPB (Impf Sub Pl P2) => entend + "ierais" ; --# notpresent
    VPB (Impf Sub Pl P3) => entend + "ieran" ; --# notpresent
    VPB (ImpfSub2 Sg P1) => entend + "iese" ; --# notpresent
    VPB (ImpfSub2 Sg P2) => entend + "ieses" ; --# notpresent
    VPB (ImpfSub2 Sg P3) => entend + "iese" ; --# notpresent
    VPB (ImpfSub2 Pl P1) => entend + "iésemos" ; --# notpresent
    VPB (ImpfSub2 Pl P2) => entend + "ieseis" ; --# notpresent
    VPB (ImpfSub2 Pl P3) => entend + "iesen" ; --# notpresent
    VPB (Pret Sg P1) => entend + "í" ; --# notpresent
    VPB (Pret Sg P2) => entend + "iste" ; --# notpresent
    VPB (Pret Sg P3) => entend + "ió" ; --# notpresent
    VPB (Pret Pl P1) => entend + "imos" ; --# notpresent
    VPB (Pret Pl P2) => entend + "isteis" ; --# notpresent
    VPB (Pret Pl P3) => entend + "ieron" ; --# notpresent
    VPB (Fut Ind Sg P1) => entend + "eré" ; --# notpresent
    VPB (Fut Ind Sg P2) => entend + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => entend + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => entend + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => entend + "eréis" ; --# notpresent
    VPB (Fut Ind Pl P3) => entend + "erán" ; --# notpresent
    VPB (Fut Sub Sg P1) => entend + "iere" ; --# notpresent
    VPB (Fut Sub Sg P2) => entend + "ieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => entend + "iere" ; --# notpresent
    VPB (Fut Sub Pl P1) => entend + "iéremos" ; --# notpresent
    VPB (Fut Sub Pl P2) => entend + "iereis" ; --# notpresent
    VPB (Fut Sub Pl P3) => entend + "ieren" ; --# notpresent
    VPB (Cond Sg P1) => entend + "ería" ; --# notpresent
    VPB (Cond Sg P2) => entend + "erías" ; --# notpresent
    VPB (Cond Sg P3) => entend + "ería" ; --# notpresent
    VPB (Cond Pl P1) => entend + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => entend + "eríais" ; --# notpresent
    VPB (Cond Pl P3) => entend + "erían" ; --# notpresent
    VPB (Imper Sg P1) => variants {} ;
    VPB (Imper Sg P2) => entiend + "e" ;
    VPB (Imper Sg P3) => entiend + "a" ;
    VPB (Imper Pl P1) => entend + "amos" ;
    VPB (Imper Pl P2) => entend + "ed" ;
    VPB (Imper Pl P3) => entiend + "an" ;
    VPB (Pass Sg Masc) => entend + "ido" ;
    VPB (Pass Sg Fem) => entend + "ida" ;
    VPB (Pass Pl Masc) => entend + "idos" ;
    VPB (Pass Pl Fem) => entend + "idas"
    }
  } ;

}
