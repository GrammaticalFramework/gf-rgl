Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePN john_PN) (ComplVV can_VV UseCopula))
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (DetNP somePl_Det) (ComplVV want_VV (UseComp (CompCN (AdvCN (UseN horse_N) (PrepNP to_Prep (CountNP somePl_Det (DetNP someSg_Det))))))))
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePron we_Pron) (AdVVP always_AdV (ComplVS know_VS (UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePron it_Pron) (AdVVP always_AdV (AdvVP (ComplVA become_VA (PositA good_A)) everywhere_Adv)))))))
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (PPartNP (RelNP (ExtAdvNP (UsePN john_PN) here_Adv) (UseRCl (TTAnt TPast ASimul) PNeg (RelCl (PredVP (AdvNP (DetNP few_Det) (PrepNP in_Prep (UsePron he_Pron))) (ComplVV can8know_VV (AdvVP UseCopula everywhere_Adv)))))) count_V2) (UseV walk_V))
LangEng: John , here , such that few in him couldn't be everywhere , counted won't have walked
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (MassNP (RelCN (UseN2 (Use2N3 distance_N3)) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP (AdvVP (ComplSlash (AdvVPSlash (SlashV2a close_V2) now_Adv) (MassNP (UseN2 father_N2))) now_Adv))))) (AdvVP (UseComp (CompAdv now_Adv)) now_Adv))
LangEng: distance that had closed now father now wouldn't have been now now
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (DetNP few_Det) UseCopula)
LangEng: few had been
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePron we_Pron) (ComplSlash (AdvVPSlash (AdVVPSlash always_AdV (SlashV2a count_V2)) now_Adv) (DetCN someSg_Det (ComplN2 (Use3N3 distance_N3) (RelNP (CountNP somePl_Det (MassNP (ApposCN (UseN house_N) (UsePN john_PN)))) (UseRCl (TTAnt TPres AAnter) PPos (RelCl (PredVP (UsePN paris_PN) (ComplVV can8know_VV UseCopula)))))))))
LangEng: we wouldn't always count now some distance to some of house John , such that Paris has been able to be
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (ExtAdvNP (RelNP (PPartNP (UsePN paris_PN) love_V2) (UseRCl (TTAnt TPast AAnter) PPos (RelSlash IdRP (SlashVP (UsePN paris_PN) (Slash3V3 send_V3 (DetNP every_Det)))))) everywhere_Adv) (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot3plus (pot2plus pot01 pot111) (pot2plus pot01 (pot1plus n8 pot01)))) red_A))))
LangEng: Paris loved , that Paris had sent to everything , everywhere , won't become one hundred and eleven thousand one hundred and eighty &+ - &+ first reddest
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (PredetNP most_Predet (AdvNP (UsePN paris_PN) (PrepNP in_Prep (PPartNP (CountNP many_Det (PPartNP (AdvNP (UsePN john_PN) here_Adv) fear_V2)) break_V2)))) UseCopula)
LangEng: most Paris in many of John here feared broken would be
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (DetCN every_Det (UseN cat_N)) (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PNeg (QuestSlash whoPl_IP (SlashVP (AdvNP (UsePron it_Pron) everywhere_Adv) (AdVVPSlash always_AdV (SlashVV want_VV (SlashV2a buy_V2)))))))))
LangEng: every cat had always known whom it everywhere wouldn't always want to buy
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePron it_Pron) (ComplVA become_VA (AdjOrd (OrdSuperl bad_A))))
LangEng: it didn't become worst
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (UsePron she_Pron) (AdvVP (ComplSlash (SlashV2a find_V2) (AdvNP (PPartNP (ExtAdvNP (RelNP (CountNP many_Det (UsePron she_Pron)) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP UseCopula))) here_Adv) fear_V2) (PrepNP on_Prep (MassNP (UseN2 (Use3N3 distance_N3)))))) now_Adv))
LangEng: she won't have found many of her , that will have been , here , feared on distance now
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (MassNP (AdjCN (AdjOrd (OrdNumeral (num (pot3plus (pot2 pot01) (pot2 (pot0 n4)))))) (AdjCN (PositA clean_A) (UseN2 (ComplN3 distance_N3 (ExtAdvNP (UsePN paris_PN) everywhere_Adv)))))) (ComplVV must_VV UseCopula))
LangEng: one hundred thousand four hundredth clean distance from Paris , everywhere , hasn't had to be
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePron i_Pron) (UseV travel_V))
LangEng: I wouldn't travel
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (PPartNP (PredetNP only_Predet (DetCN (DetQuantOrd no_Quant NumPl (OrdDigits (IIDig D_3 (IIDig D_4 (IDig D_4))))) (ApposCN (AdjCN (AdAP almost_AdA (PositA hot_A)) (AdjCN (PositA old_A) (UseN2 (Use2N3 distance_N3)))) (PPartNP (ExtAdvNP (CountNP somePl_Det (DetNP every_Det)) now_Adv) do_V2)))) wait_V2) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PPos (QuestIAdv how_IAdv (PredVP (DetNP someSg_Det) (ComplVS fear_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (DetNP somePl_Det) UseCopula))))))))
LangEng: only no 3 &+ 4 &+ 4th almost hot old distances some of everything , now , done waited had known how some would fear that some have been
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (PPartNP (MassNP (UseN animal_N)) find_V2) (ComplVS say_VS (UseCl (TTAnt TPast ASimul) PNeg (PredVP (RelNP (PredetNP only_Predet (RelNP (PPartNP (DetNP somePl_Det) find_V2) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP UseCopula)))) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (UseComp (CompAdv here_Adv))))) (AdVVP always_AdV (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_0)))))))))
LangEng: animal found has said that only some found , that weren't , that will be here , didn't always become 0th
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (DetCN somePl_Det (UseN2 (ComplN3 distance_N3 (ExtAdvNP (DetCN many_Det (ComplN2 father_N2 (DetNP few_Det))) everywhere_Adv)))) (UseV play_V))
LangEng: some distances from many fathers of few , everywhere , will have played
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (CountNP every_Det (DetCN someSg_Det (ApposCN (PartNP (PartNP (RelCN (PartNP (UseN wine_N) (UsePN john_PN)) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP UseCopula))) (DetNP someSg_Det)) (DetNP (DetQuantOrd no_Quant NumSg (OrdSuperl young_A)))) (UsePron youSg_Pron)))) (ComplSlash (Slash3V3 send_V3 (RelNP (CountNP (DetQuant that_Quant (NumCard (NumDigits (IDig D_5)))) (ExtAdvNP (PPartNP (CountNP somePl_Det (UsePN john_PN)) drink_V2) (PrepNP under_Prep (PPartNP (UsePron youPl_Pron) wait_V2)))) (UseRCl (TTAnt TCond ASimul) PNeg (RelCl (PredVP (DetNP many_Det) (ComplSlash (SlashV2a fear_V2) (UsePron it_Pron))))))) (MassNP (RelCN (ComplN2 (Use3N3 distance_N3) (ExtAdvNP (PPartNP (PPartNP (DetNP somePl_Det) teach_V2) count_V2) everywhere_Adv)) (UseRCl (TTAnt TFut ASimul) PPos (RelCl (PredVP (UsePN john_PN) (UseComp (CompAdv now_Adv)))))))))
LangEng: everything of some wine of John that hasn't been of some of no youngest you won't have sent distance to some taught counted , everywhere , such that John will be now to those 5 of some of John drunk , under you waited , such that many wouldn't fear it
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (MassNP (UseN2 (Use3N3 distance_N3))) (ComplSlash (AdvVPSlash (Slash3V3 send_V3 (PPartNP (CountNP someSg_Det (AdvNP (PPartNP (UsePN paris_PN) see_V2) (PrepNP with_Prep (DetNP somePl_Det)))) find_V2)) everywhere_Adv) (ExtAdvNP (MassNP (PartNP (ApposCN (ApposCN (PossNP (UseN train_N) (UsePN john_PN)) (MassNP (UseN2 father_N2))) (AdvNP (MassNP (UseN dog_N)) (PrepNP behind_Prep (UsePN john_PN)))) (DetCN few_Det (ApposCN (PossNP (UseN2 father_N2) (DetNP someSg_Det)) (AdvNP (DetNP somePl_Det) everywhere_Adv))))) now_Adv)))
LangEng: distance had sent train of John father dog behind John of few fathers of some some everywhere , now , to some of Paris seen with some found everywhere
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (DetCN somePl_Det (RelCN (PossNP (AdvCN (AdvCN (ApposCN (UseN2 (Use2N3 distance_N3)) (PredetNP not_Predet (UsePN paris_PN))) (PrepNP from_Prep (PPartNP (UsePN john_PN) bite_V2))) here_Adv) (CountNP every_Det (UsePron she_Pron))) (UseRCl (TTAnt TCond AAnter) PPos (RelSlash IdRP (SlashVP (CountNP few_Det (DetCN many_Det (UseN cow_N))) (SlashVV must_VV (Slash3V3 sell_V3 (DetNP somePl_Det)))))))) (ComplVV can8know_VV (AdVVP always_AdV (UseV play_V))))
LangEng: some distances not Paris from John bitten here of everything of her that few of many cows would have had to sell to some could always play
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (DetNP many_Det) (ComplSlash (AdvVPSlash (AdvVPSlash (AdVVPSlash always_AdV (SlashV2a eat_V2)) now_Adv) everywhere_Adv) (AdvNP (PPartNP (UsePN john_PN) drink_V2) here_Adv)))
LangEng: many will always have eaten now everywhere John drunk here
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (ExtAdvNP (UsePron she_Pron) (PrepNP after_Prep (MassNP (RelCN (PossNP (AdvCN (ComplN2 father_N2 (UsePron it_Pron)) everywhere_Adv) (DetCN every_Det (UseN2 father_N2))) (UseRCl (TTAnt TFut ASimul) PNeg (RelSlash IdRP (SlashVP (DetNP somePl_Det) (SlashV2a read_V2)))))))) (AdvVP (ComplSlash (Slash2V3 give_V3 (PPartNP (UsePN john_PN) bite_V2)) (PredetNP all_Predet (DetNP (DetQuantOrd DefArt (NumCard (NumDigits (IDig D_5))) (OrdDigits (IDig D_4)))))) here_Adv))
LangEng: she , after father of it everywhere of every father that some won't read , won't have given John bitten all the 5 4th here
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (PredetNP not_Predet (MassNP (ApposCN (AdjCN (PositA black_A) (AdvCN (PartNP (AdjCN (UseComparA black_A) (UseN cow_N)) (AdvNP (UsePron youPl_Pron) here_Adv)) here_Adv)) (AdvNP (PredetNP all_Predet (AdvNP (CountNP few_Det (DetNP many_Det)) now_Adv)) everywhere_Adv)))) (AdVVP always_AdV (UseV live_V)))
LangEng: not black blacker cow of you here here all few of many now everywhere had always lived
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (CountNP somePl_Det (RelNP (ExtAdvNP (UsePN paris_PN) (PrepNP after_Prep (ExtAdvNP (RelNP (CountNP somePl_Det (UsePN john_PN)) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP UseCopula))) now_Adv))) (UseRCl (TTAnt TCond ASimul) PNeg (RelSlash IdRP (SlashVP (AdvNP (MassNP (UseN2 father_N2)) everywhere_Adv) (SlashV2a read_V2)))))) (ComplVS hope_VS (UseCl (TTAnt TFut AAnter) PNeg (PredVP (CountNP many_Det (UsePN john_PN)) (UseV play_V)))))
LangEng: some of Paris , after some of John , that would be , now , that father everywhere wouldn't read , wouldn't have hoped that many of John won't have played
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (RelNP (PPartNP (PredetNP most_Predet (ExtAdvNP (DetCN (DetQuant no_Quant NumPl) (ApposCN (AdjCN (PositA ready_A) (UseN2 father_N2)) (DetCN someSg_Det (UseN river_N)))) (PrepNP after_Prep (ExtAdvNP (DetCN (DetQuant this_Quant NumSg) (UseN star_N)) everywhere_Adv)))) have_V2) (UseRCl (TTAnt TPres ASimul) PNeg (RelCl (PredVP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (UseV sleep_V)))) UseCopula)))) (ComplVV want_VV (AdvVP (ComplVV can_VV (AdVVP always_AdV (ComplVV must_VV (AdvVP (AdVVP always_AdV UseCopula) everywhere_Adv)))) now_Adv)))
LangEng: most no ready fathers some river , after this star , everywhere , had , such that Paris , that has slept , isn't , would want to be able to always have to always be everywhere now
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePron it_Pron) (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PNeg (QuestIComp (CompIP whatSg_IP) (PredetNP most_Predet (DetCN every_Det (AdjCN (AdjOrd (OrdSuperl new_A)) (PartNP (UseN apple_N) (DetNP few_Det)))))))))
LangEng: it hasn't known what most every newest apple of few isn't
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (PPartNP (DetNP every_Det) buy_V2) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestSlash whoSg_IP (SlashVP (ExtAdvNP (UsePron youPl_Pron) (PrepNP on_Prep (PredetNP not_Predet (UsePN john_PN)))) (Slash3V3 give_V3 (UsePN john_PN)))))))
LangEng: everything bought wouldn't know whom you , on not John , gave John
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePron youPl_Pron) (AdVVP always_AdV (AdvVP (AdVVP always_AdV (ComplSlash (SlashV2a count_V2) (DetCN few_Det (UseN fish_N)))) everywhere_Adv)))
LangEng: you had always always counted few fish everywhere
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (CountNP every_Det (UsePN john_PN)) (UseV jump_V))
LangEng: everything of John jumped
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PPartNP (UsePN paris_PN) wait_V2) (ComplVS say_VS (UseCl (TTAnt TPast AAnter) PPos (PredVP (AdvNP (ExtAdvNP (UsePron i_Pron) here_Adv) here_Adv) (ComplSlash (AdVVPSlash always_AdV (Slash3V3 send_V3 (DetCN somePl_Det (UseN ship_N)))) (PredetNP most_Predet (UsePron we_Pron)))))))
LangEng: Paris waited wouldn't have said that I , here , here had always sent most us to some ships
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (PPartNP (DetCN someSg_Det (RelCN (AdjCN (UseComparA red_A) (RelCN (UseN2 father_N2) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP UseCopula)))) (UseRCl (TTAnt TCond AAnter) PNeg (RelCl (PredVP (CountNP many_Det (UsePN john_PN)) (AdvVP (UseV play_V) here_Adv)))))) break_V2) (AdvVP (AdvVP (ComplSlash (SlashVV want_VV (AdVVPSlash always_AdV (AdVVPSlash always_AdV (AdVVPSlash always_AdV (SlashV2a cut_V2))))) (DetCN someSg_Det (PartNP (ComplN2 (Use2N3 distance_N3) (UsePron she_Pron)) (MassNP (UseN grammar_N))))) here_Adv) (PrepNP after_Prep (MassNP (PartNP (ComplN2 father_N2 (PPartNP (UsePron we_Pron) drink_V2)) (UsePN john_PN))))))
LangEng: some redder father that hadn't been such that many of John wouldn't have played here broken hasn't wanted to always always always cut some distance from her of grammar here after father of us drunk of John
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (PPartNP (PredetNP only_Predet (PPartNP (DetCN many_Det (AdjCN (AdjOrd (OrdDigits (IDig D_9))) (AdvCN (UseN2 (Use3N3 distance_N3)) everywhere_Adv))) close_V2)) bite_V2) (ComplSlash (Slash3V3 send_V3 (UsePN john_PN)) (PredetNP all_Predet (PPartNP (UsePN john_PN) count_V2))))
LangEng: only many 9th distances everywhere closed bitten would send all John counted to John
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (PredetNP only_Predet (PredetNP all_Predet (RelNP (AdvNP (MassNP (AdjCN (PositA hot_A) (AdvCN (UseN2 father_N2) everywhere_Adv))) everywhere_Adv) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PNeg (QuestVP whoPl_IP UseCopula)))))))) (ComplVA become_VA (AdAP very_AdA (PositA blue_A))))
LangEng: only all hot father everywhere everywhere , that wouldn't know who won't be , became very blue
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (ExtAdvNP (AdvNP (DetCN somePl_Det (UseN2 (Use3N3 distance_N3))) (PrepNP to_Prep (UsePN john_PN))) everywhere_Adv) UseCopula)
LangEng: some distances to John , everywhere , will have been
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (ExtAdvNP (RelNP (UsePN john_PN) (UseRCl (TTAnt TFut AAnter) PNeg (RelSlash IdRP (SlashVP (UsePron it_Pron) (Slash2V3 talk_V3 (UsePron youSg_Pron)))))) everywhere_Adv) (UseComp (CompAP (UseComparA green_A))))
LangEng: John , that it won't have talked to you about , everywhere , wouldn't be greener
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (DetCN (DetQuantOrd IndefArt NumPl (OrdDigits (IDig D_2))) (ApposCN (UseN computer_N) (RelNP (ExtAdvNP (ExtAdvNP (DetNP someSg_Det) (PrepNP behind_Prep (AdvNP (UsePron youPl_Pron) here_Adv))) (PrepNP from_Prep (MassNP (AdvCN (UseN2 father_N2) now_Adv)))) (UseRCl (TTAnt TPres ASimul) PPos (RelSlash IdRP (SlashVP (AdvNP (UsePron we_Pron) now_Adv) (Slash2V3 send_V3 (UsePN paris_PN)))))))) (AdVVP always_AdV (UseV jump_V)))
LangEng: 2nd computers some , behind you here , from father now , that we now send Paris to , always jump
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (RelNP (DetNP many_Det) (UseRCl (TTAnt TPres AAnter) PNeg (RelCl (PredVP (AdvNP (DetCN few_Det (PossNP (UseN2 father_N2) (DetNP somePl_Det))) everywhere_Adv) (ComplVV can8know_VV (UseComp (CompAdv here_Adv))))))) (UseComp (CompAP (PositA yellow_A))))
LangEng: many , such that few fathers of some everywhere haven't been able to be here , wouldn't be yellow
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePron we_Pron) (UseComp (CompCN (PossNP (ApposCN (UseN2 (Use3N3 distance_N3)) (AdvNP (PredetNP all_Predet (UsePron we_Pron)) everywhere_Adv)) (UsePN john_PN)))))
LangEng: we had been distances all we everywhere of John
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (RelNP (RelNP (AdvNP (CountNP few_Det (PPartNP (UsePron youPl_Pron) bite_V2)) everywhere_Adv) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (AdvVP (UseComp (CompAdv everywhere_Adv)) everywhere_Adv)))) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (AdvVP (AdvVP (AdvVP (ComplVV want_VV (UseV travel_V)) (PrepNP under_Prep (UsePN john_PN))) now_Adv) now_Adv)))) (AdvVP (AdvVP (AdVVP always_AdV (UseV sleep_V)) now_Adv) (PrepNP between_Prep (AdvNP (PredetNP all_Predet (UsePN john_PN)) here_Adv))))
LangEng: few of you bitten everywhere , that wouldn't be everywhere everywhere , that have wanted to travel under John now now , don't always sleep now between all John here
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (MassNP (RelCN (AdjCN (UseComparA black_A) (ComplN2 (ComplN3 distance_N3 (ExtAdvNP (ExtAdvNP (UsePN paris_PN) everywhere_Adv) everywhere_Adv)) (CountNP somePl_Det (UsePN john_PN)))) (UseRCl (TTAnt TFut ASimul) PPos (RelCl (PredVP (CountNP every_Det (MassNP (UseN2 father_N2))) (UseV run_V)))))) UseCopula)
LangEng: blacker distance from Paris , everywhere , everywhere , to some of John such that everything of father will run hadn't been
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetNP few_Det) (UseComp (CompNP (ExtAdvNP (ExtAdvNP (MassNP (AdjCN (AdAP so_AdA (PositA young_A)) (UseN apple_N))) here_Adv) now_Adv))))
LangEng: few won't be so young apple , here , now
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (UsePN paris_PN) UseCopula)
LangEng: Paris would have been
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (DetNP (DetQuantOrd (PossPron she_Pron) NumPl (OrdNumeral (num (pot3 (pot2 pot01)))))) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestVP whatPl_IP (AdVVP always_AdV (UseV walk_V))))))
LangEng: her one hundred thousandth knew what always walked
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PPartNP (MassNP (AdvCN (UseN girl_N) everywhere_Adv)) eat_V2) UseCopula)
LangEng: girl everywhere eaten wouldn't have been
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (CountNP every_Det (UsePN john_PN)) (AdVVP always_AdV UseCopula))
LangEng: everything of John hadn't always been
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetCN few_Det (ComplN2 (ComplN3 distance_N3 (UsePron i_Pron)) (PredetNP not_Predet (DetNP every_Det)))) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PNeg (QuestSlash (IdetIP how8many_IDet) (SlashVP (DetNP many_Det) (AdvVPSlash (AdvVPSlash (AdVVPSlash always_AdV (SlashV2a eat_V2)) here_Adv) here_Adv))))))
LangEng: few distances from me to not everything haven't known how many many wouldn't always eat here here
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (AdvNP (UsePron she_Pron) (PrepNP on_Prep (UsePN paris_PN))) UseCopula)
LangEng: she on Paris will have been
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetNP every_Det) (UseComp (CompCN (PossNP (UseN train_N) (CountNP somePl_Det (CountNP every_Det (MassNP (ComplN2 (Use3N3 distance_N3) (UsePron it_Pron)))))))))
LangEng: everything wasn't a train of some of everything of distance to it
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (AdvNP (MassNP (ApposCN (ComplN2 (ComplN3 distance_N3 (UsePN john_PN)) (DetNP every_Det)) (DetCN every_Det (UseN2 (Use3N3 distance_N3))))) (PrepNP in8front_Prep (AdvNP (DetCN (DetQuant (PossPron i_Pron) NumSg) (AdvCN (AdvCN (AdvCN (UseN2 father_N2) now_Adv) now_Adv) everywhere_Adv)) here_Adv))) (ComplVV can_VV (ComplVV can_VV (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_7)))))))
LangEng: distance from John to everything every distance in front of my father now now everywhere here couldn't be able to become 7th
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePN john_PN) (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestVP whatSg_IP (ComplVV want_VV (ComplVA become_VA (PositA cold_A)))))) here_Adv))
LangEng: John will have known here what won't have wanted to become cold
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (RelNP (CountNP few_Det (MassNP (AdjCN (AdjOrd (OrdSuperl small_A)) (AdvCN (ApposCN (ComplN2 father_N2 (UsePron youSg_Pron)) (PredetNP not_Predet (UsePron he_Pron))) here_Adv)))) (UseRCl (TTAnt TCond AAnter) PPos (RelCl (PredVP (UsePron youPl_Pron) (AdVVP always_AdV (ComplVA become_VA (PositA young_A))))))) (ComplVA become_VA (UseComparA blue_A)))
LangEng: few of smallest father of you not he here , such that you would always have become young , had become bluer
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (ExtAdvNP (ExtAdvNP (UsePron he_Pron) now_Adv) now_Adv) UseCopula)
LangEng: he , now , now , hasn't been
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PredetNP only_Predet (UsePN john_PN)) (AdVVP always_AdV (AdvVP (ComplVV can8know_VV (UseV go_V)) now_Adv)))
LangEng: only John wouldn't always have been able to go now
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (AdvNP (UsePron we_Pron) (PrepNP on_Prep (PPartNP (UsePron youSg_Pron) understand_V2))) (ComplVV can_VV (UseV run_V)))
LangEng: we on you understood would have been able to run
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePN john_PN) (AdVVP always_AdV (AdvVP (ComplSlash (AdvVPSlash (Slash3V3 send_V3 (DetNP (DetQuantOrd this_Quant NumSg (OrdSuperl new_A)))) everywhere_Adv) (UsePN john_PN)) now_Adv)))
LangEng: John would always send John to this newest everywhere now
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePN paris_PN) UseCopula)
LangEng: Paris hasn't been
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetNP (DetQuant no_Quant NumSg)) (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PNeg (QuestIAdv why_IAdv (PredVP (CountNP (DetQuantOrd that_Quant NumSg (OrdSuperl white_A)) (UsePron she_Pron)) (AdVVP always_AdV (AdVVP always_AdV (ComplVV must_VV UseCopula)))))))))
LangEng: none hasn't always known why that whitest of her wouldn't always always have to be
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (UsePron i_Pron) (ComplSlash (Slash2V3 send_V3 (CountNP (DetQuantOrd DefArt NumSg (OrdNumeral (num (pot3plus (pot1as2 pot110) (pot1as2 pot111))))) (DetCN (DetQuantOrd (PossPron youSg_Pron) NumPl (OrdDigits (IDig D_2))) (PartNP (RelCN (PossNP (UseN tree_N) (DetNP someSg_Det)) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP UseCopula))) (CountNP (DetQuantOrd that_Quant NumSg (OrdSuperl new_A)) (UsePN paris_PN)))))) (DetNP someSg_Det)))
LangEng: I won't have sent the ten thousand eleventh of your 2nd trees of some that would have been of that newest of Paris to some
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePron we_Pron) (ComplSlash (AdvVPSlash (Slash3V3 give_V3 (PredetNP most_Predet (MassNP (PartNP (AdjCN (PositA clean_A) (UseN sea_N)) (PredetNP all_Predet (UsePN paris_PN)))))) here_Adv) (MassNP (UseN2 (ComplN3 distance_N3 (DetCN few_Det (PossNP (ApposCN (UseN2 father_N2) (DetNP somePl_Det)) (UsePron she_Pron))))))))
LangEng: we don't give distance from few fathers some of hers most clean sea of all Paris here
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePron he_Pron) (UseComp (CompAdv now_Adv)))
LangEng: he had been now
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (MassNP (ComplN2 (ComplN3 distance_N3 (PredetNP not_Predet (CountNP few_Det (AdvNP (AdvNP (UsePron it_Pron) everywhere_Adv) now_Adv)))) (CountNP (DetQuant this_Quant (NumCard (AdNum at_least_AdN (NumDigits (IDig D_1))))) (DetCN (DetQuant (PossPron i_Pron) (NumCard (NumDigits (IDig D_5)))) (AdvCN (RelCN (PossNP (UseN sea_N) (DetNP somePl_Det)) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP UseCopula))) (PrepNP under_Prep (AdvNP (UsePN john_PN) here_Adv))))))) (AdvVP (ComplVA become_VA (PositA warm_A)) here_Adv))
LangEng: distance from not few of it everywhere now to this at least 1 of my 5 seas of some that won't have been under John here had become warm here
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (ExtAdvNP (AdvNP (RelNP (AdvNP (UsePN paris_PN) everywhere_Adv) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (AdVVP always_AdV UseCopula)))) here_Adv) (PrepNP under_Prep (UsePN paris_PN))) UseCopula)
LangEng: Paris everywhere , that would always have been , here , under Paris , wouldn't have been
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetNP (DetQuantOrd no_Quant NumPl (OrdSuperl yellow_A))) UseCopula)
LangEng: no most yellow won't be
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (CountNP (DetQuantOrd DefArt NumPl (OrdDigits (IIDig D_1 (IDig D_0)))) (UsePron youPl_Pron)) (UseComp (CompNP (DetNP someSg_Det))))
LangEng: the 1 &+ 0th of you won't have been some
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetCN few_Det (UseN grammar_N)) (AdvVP UseCopula here_Adv))
LangEng: few grammars won't be here
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePN john_PN) (UseV sleep_V))
LangEng: John would sleep
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (ExtAdvNP (DetCN many_Det (AdjCN (PositA hot_A) (AdjCN (AdjOrd (OrdDigits (IDig D_6))) (AdvCN (PartNP (ApposCN (UseN animal_N) (UsePN john_PN)) (DetCN somePl_Det (UseN2 father_N2))) everywhere_Adv)))) now_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestVP (IdetIP how8many_IDet) UseCopula))))
LangEng: many hot 6th animals John of some fathers everywhere , now , will know how many haven't been
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (DetCN many_Det (RelCN (AdjCN (AdjOrd (OrdNumeralSuperl (num (pot3plus (pot1as2 pot111) (pot2 pot01))) warm_A)) (ApposCN (ApposCN (PartNP (AdvCN (UseN2 father_N2) here_Adv) (AdvNP (DetNP every_Det) now_Adv)) (RelNP (DetCN few_Det (UseN2 father_N2)) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula)))) (CountNP (DetQuant (PossPron she_Pron) NumSg) (CountNP few_Det (DetCN (DetQuant IndefArt NumSg) (UseN tree_N)))))) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (UseV swim_V))))) (UseV walk_V))
LangEng: many eleven thousand one hundredth warmest fathers here of everything now few fathers , that are , hers of few of a tree that have swum walk
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetCN every_Det (PartNP (PartNP (ComplN2 father_N2 (ExtAdvNP (DetCN (DetQuant (PossPron youSg_Pron) NumPl) (ComplN2 (Use2N3 distance_N3) (UsePN john_PN))) (PrepNP under_Prep (ExtAdvNP (UsePron it_Pron) now_Adv)))) (CountNP every_Det (CountNP few_Det (AdvNP (MassNP (UseN train_N)) (PrepNP with_Prep (UsePN paris_PN)))))) (DetNP somePl_Det))) (UseComp (CompNP (ExtAdvNP (CountNP many_Det (RelNP (PPartNP (MassNP (UseN tree_N)) love_V2) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP (AdVVP always_AdV UseCopula))))) everywhere_Adv))))
LangEng: every father of your distances from John , under it , now , of everything of few of train with Paris of some hasn't been many of tree loved , that wouldn't always have been , everywhere
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePN paris_PN) (UseComp (CompCN (AdvCN (UseN2 (Use3N3 distance_N3)) everywhere_Adv))))
LangEng: Paris hasn't been a distance everywhere
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (RelNP (MassNP (PossNP (PossNP (AdvCN (ComplN2 (Use3N3 distance_N3) (UsePron it_Pron)) now_Adv) (DetCN (DetQuantOrd this_Quant NumPl (OrdSuperl clean_A)) (PartNP (ComplN2 (Use3N3 distance_N3) (UsePN john_PN)) (CountNP many_Det (UsePN paris_PN))))) (AdvNP (UsePN paris_PN) everywhere_Adv))) (UseRCl (TTAnt TPres AAnter) PNeg (RelCl (PredVP (CountNP (DetQuant (PossPron she_Pron) NumSg) (DetCN somePl_Det (ApposCN (UseN2 father_N2) (UsePron youPl_Pron)))) (ComplSlash (SlashVV can8know_VV (SlashVV can_VV (SlashV2a kill_V2))) (UsePN john_PN)))))) (AdvVP (UseComp (CompNP (ExtAdvNP (AdvNP (DetCN many_Det (PossNP (UseN language_N) (DetNP many_Det))) here_Adv) (PrepNP after_Prep (AdvNP (PPartNP (UsePN john_PN) fear_V2) here_Adv))))) (PrepNP on_Prep (DetCN few_Det (UseN2 (Use2N3 distance_N3))))))
LangEng: distance to it now of these cleanest distances to John of many of Paris of Paris everywhere , such that hers of some fathers you hasn't been able to be able to kill John , will be many languages of many here , after John feared here , on few distances
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (AdvNP (UsePron youPl_Pron) here_Adv) (ComplVV can_VV (AdVVP always_AdV (ComplSlash (AdvVPSlash (SlashVV want_VV (Slash2V3 add_V3 (CountNP (DetQuant DefArt NumPl) (UsePN paris_PN)))) everywhere_Adv) (UsePN paris_PN)))))
LangEng: you here have been able to always want to add them of Paris everywhere to Paris
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (UsePN paris_PN) (ComplVV can_VV (ComplVV can8know_VV (ComplVV can_VV (ComplVV can_VV (ComplVV can8know_VV (ComplVA become_VA (UseComparA big_A))))))))
LangEng: Paris has been able to be able to be able to be able to be able to become bigger
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (CountNP every_Det (ExtAdvNP (MassNP (AdjCN (AdjOrd (OrdSuperl young_A)) (AdvCN (ApposCN (ComplN2 father_N2 (UsePron she_Pron)) (ExtAdvNP (UsePron youSg_Pron) now_Adv)) now_Adv))) (PrepNP between_Prep (UsePron he_Pron)))) (ComplVS fear_VS (UseCl (TTAnt TPast ASimul) PPos (PredVP (RelNP (RelNP (RelNP (DetCN few_Det (UseN2 father_N2)) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP UseCopula))) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP (ComplVV want_VV UseCopula)))) (UseRCl (TTAnt TPres ASimul) PNeg (RelSlash IdRP (SlashVP (DetNP many_Det) (SlashV2a cut_V2))))) (ComplVS fear_VS (UseCl (TTAnt TFut AAnter) PNeg (PredVP (UsePN john_PN) (UseComp (CompAdv now_Adv)))))))))
LangEng: everything of youngest father of her you , now , now , between him , will have feared that few fathers , that wouldn't have been , that want to be , that many don't cut , feared that John won't have been now
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (AdvNP (CountNP (DetQuantOrd this_Quant NumSg (OrdNumeral (num (pot3 (pot1as2 (pot1 n2)))))) (DetCN someSg_Det (RelCN (PossNP (UseN fire_N) (PredetNP most_Predet (MassNP (UseN book_N)))) (UseRCl (TTAnt TPast AAnter) PPos (RelCl (PredVP (DetNP few_Det) (AdvVP UseCopula everywhere_Adv))))))) now_Adv) (ComplVA become_VA (AdAP so_AdA (AdjOrd (OrdNumeral (num (pot3plus (pot2 pot01) (pot2 pot01))))))))
LangEng: this twenty thousandth of some fire of most book such that few had been everywhere now hadn't become so one hundred thousand one hundredth
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (ExtAdvNP (RelNP (RelNP (AdvNP (UsePN john_PN) here_Adv) (UseRCl (TTAnt TCond AAnter) PNeg (RelCl (PredVP (PPartNP (UsePN john_PN) kill_V2) (ComplSlash (SlashV2a count_V2) (UsePron youSg_Pron)))))) (UseRCl (TTAnt TFut ASimul) PPos (RelCl (PredVP (PPartNP (UsePN john_PN) wait_V2) UseCopula)))) here_Adv) (UseComp (CompAP (AdjOrd (OrdNumeralSuperl (num (pot3 (pot2 (pot0 n3)))) ready_A)))))
LangEng: John here , such that John killed wouldn't have counted you , such that John waited will be , here , hasn't been three hundred thousandth readiest
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetNP (DetQuantOrd that_Quant NumPl (OrdDigits (IDig D_0)))) (ComplVS know_VS (UseCl (TTAnt TCond AAnter) PPos (PredVP (DetCN somePl_Det (PartNP (RelCN (ApposCN (UseN man_N) (DetNP few_Det)) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP UseCopula))) (AdvNP (ExtAdvNP (DetNP every_Det) everywhere_Adv) (PrepNP after_Prep (UsePN john_PN))))) UseCopula))))
LangEng: those 0th didn't know that some men few that hadn't been of everything , everywhere , after John would have been
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PredetNP not_Predet (UsePron she_Pron)) (AdvVP (ComplSlash (AdvVPSlash (SlashVV must_VV (Slash3V3 sell_V3 (MassNP (AdvCN (UseN2 father_N2) here_Adv)))) now_Adv) (PredetNP only_Predet (AdvNP (DetCN many_Det (PartNP (ApposCN (UseN friend_N) (UsePron i_Pron)) (AdvNP (UsePron he_Pron) here_Adv))) here_Adv))) everywhere_Adv))
LangEng: not she hadn't had to only many friends I of him here here sell to father here now everywhere
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TCond ASimul) PPos (RelCl (PredVP (DetNP many_Det) (UseV live_V))))) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PNeg (QuestVP whatPl_IP (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PNeg (QuestVP (IdetIP how8many_IDet) (ComplVA become_VA (UseComparA red_A)))))))))
LangEng: Paris , such that many would live , hadn't known what didn't know how many won't become redder
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (PredetNP most_Predet (CountNP someSg_Det (UsePN paris_PN))) (ComplVS say_VS (UseCl (TTAnt TPres ASimul) PNeg (PredVP (RelNP (UsePron we_Pron) (UseRCl (TTAnt TPres AAnter) PNeg (RelSlash IdRP (SlashVP (DetNP someSg_Det) (SlashV2a buy_V2))))) (UseComp (CompCN (AdvCN (PossNP (UseN city_N) (UsePron we_Pron)) now_Adv)))))))
LangEng: most some of Paris says that we , that some hasn't bought , aren't cities of ours now
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (MassNP (ComplN2 father_N2 (UsePron he_Pron))) (ComplVV can8know_VV (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PNeg (QuestSlash whoPl_IP (SlashVP (DetNP many_Det) (Slash2V3 talk_V3 (DetNP few_Det))))))))
LangEng: father of him won't be able to know whom many didn't talk to few about
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (DetNP someSg_Det) (ComplVV can8know_VV (UseV play_V)))
LangEng: some had been able to play
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (DetNP somePl_Det) (UseComp (CompCN (UseN tree_N))))
LangEng: some aren't trees
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (RelNP (DetNP many_Det) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP UseCopula))) (UseComp (CompCN (PartNP (PossNP (AdjCN (AdAP very_AdA (UseComparA heavy_A)) (AdjCN (PositA ready_A) (PartNP (UseN cow_N) (UsePN john_PN)))) (CountNP every_Det (PPartNP (UsePron youPl_Pron) cut_V2))) (PPartNP (PredetNP not_Predet (PredetNP most_Predet (DetCN every_Det (UseN2 father_N2)))) read_V2)))))
LangEng: many , that haven't been , had been very heavier ready cows of John of everything of you cut of not most every father read
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (RelNP (PredetNP not_Predet (UsePN john_PN)) (UseRCl (TTAnt TPast AAnter) PNeg (RelCl (PredVP (ExtAdvNP (AdvNP (MassNP (UseN2 father_N2)) everywhere_Adv) (PrepNP in_Prep (UsePN john_PN))) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PPos (QuestIComp (CompIAdv why_IAdv) (UsePN paris_PN)))))))) (UseComp (CompCN (UseN2 (Use2N3 distance_N3)))))
LangEng: not John , such that father everywhere , in John , hadn't known why Paris would have been , hasn't been a distance
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetCN few_Det (UseN2 father_N2)) UseCopula)
LangEng: few fathers weren't
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (CountNP (DetQuant DefArt NumSg) (UsePN john_PN)) (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot3plus (pot2 pot01) (pot2 (pot0 n3)))) small_A))))
LangEng: it of John would become one hundred thousand three hundredth smallest
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (AdvNP (PPartNP (PredetNP not_Predet (DetCN every_Det (UseN2 (Use3N3 distance_N3)))) understand_V2) here_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestSlash whatPl_IP (SlashVP (AdvNP (RelNP (PredetNP only_Predet (DetNP someSg_Det)) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP UseCopula))) (PrepNP in8front_Prep (UsePron he_Pron))) (SlashVV can8know_VV (AdVVPSlash always_AdV (AdVVPSlash always_AdV (SlashV2a read_V2)))))))))
LangEng: not every distance understood here has known what only some , that wasn't , in front of him could always always read
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetNP many_Det) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestVP (IdetIP how8many_IDet) UseCopula))))
LangEng: many won't know how many won't have been
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetNP few_Det) (AdVVP always_AdV (ComplVS fear_VS (UseCl (TTAnt TPast ASimul) PNeg (PredVP (ExtAdvNP (UsePN paris_PN) (PrepNP from_Prep (CountNP (DetQuant no_Quant NumSg) (UsePron she_Pron)))) (ComplVV can_VV (UseV go_V)))))))
LangEng: few would always have feared that Paris , from none of her , couldn't go
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (ExtAdvNP (RelNP (PredetNP not_Predet (ExtAdvNP (DetNP (DetQuantOrd (PossPron youPl_Pron) NumPl (OrdSuperl green_A))) now_Adv)) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (UseV sleep_V)))) everywhere_Adv) (UseV jump_V))
LangEng: not your greenest , now , that wouldn't sleep , everywhere , hadn't jumped
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePron i_Pron) (AdVVP always_AdV UseCopula))
LangEng: I wouldn't always be
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetCN few_Det (UseN2 (ComplN3 distance_N3 (AdvNP (CountNP many_Det (CountNP somePl_Det (UsePN john_PN))) (PrepNP to_Prep (DetCN (DetQuantOrd no_Quant NumPl (OrdSuperl red_A)) (AdvCN (UseN2 father_N2) here_Adv))))))) (UseV play_V))
LangEng: few distances from many of some of John to no reddest fathers here won't play
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (AdvNP (RelNP (CountNP someSg_Det (DetNP (DetQuant no_Quant NumPl))) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (AdvVP (UseComp (CompNP (DetNP few_Det))) now_Adv)))) everywhere_Adv) (ComplVS fear_VS (UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePron youPl_Pron) (AdvVP (ComplVA become_VA (AdjOrd (OrdSuperl new_A))) here_Adv)))))
LangEng: some of none , that would be few now , everywhere had feared that you had become newest here
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePron youPl_Pron) (UseV play_V))
LangEng: you wouldn't have played
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (PredetNP most_Predet (CountNP someSg_Det (DetCN someSg_Det (AdvCN (ComplN2 (Use2N3 distance_N3) (ExtAdvNP (PredetNP not_Predet (UsePron youSg_Pron)) everywhere_Adv)) now_Adv)))) (ComplVA become_VA (AdjOrd (OrdDigits (IIDig D_1 (IIDig D_1 (IDig D_0)))))))
LangEng: most some of some distance from not you , everywhere , now would become 1 &+ 1 &+ 0th
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (MassNP (AdvCN (UseN bike_N) (PrepNP with_Prep (DetCN few_Det (PartNP (AdjCN (AdAP almost_AdA (UseComparA old_A)) (PossNP (UseN book_N) (DetNP every_Det))) (UsePN paris_PN)))))) (AdvVP (AdvVP UseCopula everywhere_Adv) here_Adv))
LangEng: bike with few almost older books of everything of Paris hadn't been everywhere here
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePron we_Pron) (AdvVP (AdVVP always_AdV (ComplVV want_VV (ComplVV can8know_VV (AdvVP (ComplVA become_VA (AdAP very_AdA (PositA heavy_A))) everywhere_Adv)))) (PrepNP with_Prep (RelNP (DetNP somePl_Det) (UseRCl (TTAnt TPres ASimul) PNeg (RelCl (PredVP (DetNP many_Det) (UseComp (CompAdv now_Adv)))))))))
LangEng: we will always have wanted to be able to become very heavy everywhere with some , such that many aren't now
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (AdvNP (MassNP (ComplN2 (ComplN3 distance_N3 (MassNP (ComplN2 father_N2 (ExtAdvNP (DetNP many_Det) now_Adv)))) (PPartNP (UsePN john_PN) find_V2))) now_Adv) (ComplSlash (AdVVPSlash always_AdV (AdvVPSlash (AdVVPSlash always_AdV (SlashVV must_VV (SlashV2a bite_V2))) now_Adv)) (UsePron i_Pron)))
LangEng: distance from father of many , now , to John found now must always always bite now me
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (ExtAdvNP (UsePron it_Pron) (PrepNP behind_Prep (AdvNP (PredetNP only_Predet (MassNP (UseN2 (ComplN3 distance_N3 (DetNP someSg_Det))))) (PrepNP on_Prep (DetCN few_Det (AdvCN (UseN water_N) here_Adv)))))) (AdVVP always_AdV (AdvVP (ComplVS hope_VS (UseCl (TTAnt TPast ASimul) PPos (PredVP (DetCN someSg_Det (UseN2 (Use2N3 distance_N3))) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PNeg (QuestVP whoPl_IP UseCopula)))))) now_Adv)))
LangEng: it , behind only distance from some on few waters here , would always have hoped now that some distance knew who weren't
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetNP somePl_Det) (AdVVP always_AdV UseCopula))
LangEng: some would always have been
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PPartNP (PredetNP only_Predet (CountNP many_Det (DetCN every_Det (ApposCN (ApposCN (UseN2 (Use2N3 distance_N3)) (PPartNP (UsePron we_Pron) do_V2)) (MassNP (PossNP (UseN2 father_N2) (DetNP every_Det))))))) read_V2) (UseComp (CompAP (UseComparA heavy_A))))
LangEng: only many of every distance we done father of everything read hadn't been heavier
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (ComplN2 (Use3N3 distance_N3) (DetNP (DetQuant (PossPron he_Pron) NumPl)))) (AdVVP always_AdV (ComplSlash (Slash2V3 add_V3 (MassNP (PossNP (AdvCN (ComplN2 father_N2 (UsePN paris_PN)) everywhere_Adv) (ExtAdvNP (UsePN paris_PN) everywhere_Adv)))) (DetCN few_Det (RelCN (AdjCN (UseComparA hot_A) (PossNP (AdjCN (PositA new_A) (UseN2 father_N2)) (AdvNP (DetNP many_Det) now_Adv))) (UseRCl (TTAnt TPast AAnter) PPos (RelCl (PredVP (DetNP many_Det) UseCopula))))))))
LangEng: distance to his wouldn't always add father of Paris everywhere of Paris , everywhere , to few hotter new fathers of many now such that many had been
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePron youPl_Pron) (ComplSlash (AdVVPSlash always_AdV (SlashV2a wait_V2)) (PredetNP not_Predet (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TCond ASimul) PNeg (RelCl (PredVP (UsePN john_PN) (ComplVV must_VV UseCopula))))))))
LangEng: you wouldn't always have waited for not you , such that John wouldn't have to be
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetNP (DetQuantOrd IndefArt NumSg (OrdNumeral (num (pot2as3 (pot2 (pot0 n4))))))) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestVP whatPl_IP (UseComp (CompAdv everywhere_Adv))))))
LangEng: a four hundredth hasn't known what won't have been everywhere
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (ExtAdvNP (RelNP (CountNP many_Det (DetNP (DetQuantOrd IndefArt NumPl (OrdSuperl black_A)))) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP (AdvVP (ComplSlash (Slash3V3 add_V3 (DetNP somePl_Det)) (ExtAdvNP (UsePron i_Pron) everywhere_Adv)) (PrepNP from_Prep (UsePron i_Pron)))))) everywhere_Adv) (AdvVP (UseComp (CompNP (UsePron youPl_Pron))) here_Adv))
LangEng: many of blackest , that don't add me , everywhere , to some from me , everywhere , wouldn't be you here
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetNP someSg_Det) (UseComp (CompNP (AdvNP (DetNP someSg_Det) everywhere_Adv))))
LangEng: some won't be some everywhere
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (DetNP many_Det) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PPos (QuestIComp (CompIP (IdetCN how8many_IDet (AdvCN (ComplN2 father_N2 (UsePron i_Pron)) here_Adv))) (UsePron it_Pron)))))
LangEng: many hadn't known how many fathers of me here it has been
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetNP (DetQuantOrd this_Quant NumSg (OrdNumeralSuperl (num (pot2as3 (pot1as2 (pot1 n5)))) clean_A))) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PPos (QuestIAdv when_IAdv (PredVP (UsePron youSg_Pron) (ComplVV can_VV (ComplSlash (AdVVPSlash always_AdV (SlashV2a love_V2)) (AdvNP (UsePron it_Pron) everywhere_Adv))))))))
LangEng: this fiftieth cleanest hasn't known when you have been able to always love it everywhere
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePron she_Pron) (UseV sleep_V))
LangEng: she doesn't sleep
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (CountNP somePl_Det (RelNP (PredetNP most_Predet (AdvNP (DetNP every_Det) (PrepNP with_Prep (ExtAdvNP (ExtAdvNP (UsePN john_PN) now_Adv) (PrepNP to_Prep (UsePron youSg_Pron)))))) (UseRCl (TTAnt TFut ASimul) PNeg (RelSlash IdRP (SlashVP (UsePN john_PN) (SlashV2a close_V2)))))) UseCopula)
LangEng: some of most everything with John , now , to you , that John won't close , will have been
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (CountNP someSg_Det (ExtAdvNP (DetCN someSg_Det (UseN bike_N)) here_Adv)) (ComplVV can_VV (ComplVS know_VS (UseCl (TTAnt TFut ASimul) PNeg (PredVP (MassNP (UseN fish_N)) (ComplSlash (SlashVV must_VV (Slash3V3 send_V3 (DetNP few_Det))) (MassNP (AdjCN (PositA cold_A) (UseN cloud_N)))))))))
LangEng: some of some bike , here , won't be able to know that fish won't have to cold cloud send to few
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (UsePron we_Pron) (AdVVP always_AdV (AdvVP (ComplVA become_VA (UseComparA old_A)) everywhere_Adv)))
LangEng: we always became older everywhere
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (RelNP (CountNP someSg_Det (CountNP few_Det (CountNP many_Det (UsePron youPl_Pron)))) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP (ComplVV can_VV (UseV play_V))))) (ComplVV must_VV (ComplVS fear_VS (UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePron i_Pron) (ComplVS fear_VS (UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePN paris_PN) (UseV live_V)))))))))
LangEng: some of few of many of you , that will have been able to play , will have to fear that I fear that Paris would live
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetNP few_Det) (ComplSlash (SlashV2a cut_V2) (ExtAdvNP (CountNP every_Det (UsePN paris_PN)) here_Adv)))
LangEng: few haven't cut everything of Paris , here
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (MassNP (RelCN (AdvCN (AdjCN (UseComparA clean_A) (PossNP (AdjCN (PositA warm_A) (UseN boat_N)) (AdvNP (ExtAdvNP (DetNP every_Det) everywhere_Adv) everywhere_Adv))) everywhere_Adv) (UseRCl (TTAnt TPast AAnter) PNeg (RelCl (PredVP (ExtAdvNP (AdvNP (UsePron i_Pron) here_Adv) now_Adv) (UseComp (CompCN (UseN train_N)))))))) (UseV come_V))
LangEng: cleaner warm boat of everything , everywhere , everywhere everywhere such that I here , now , hadn't been a train doesn't come
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (MassNP (ApposCN (RelCN (PartNP (PossNP (UseN2 father_N2) (UsePron she_Pron)) (AdvNP (PredetNP most_Predet (UsePN paris_PN)) here_Adv)) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP (UseComp (CompNP (DetNP many_Det)))))) (DetCN (DetQuant IndefArt NumPl) (ApposCN (PartNP (UseN2 father_N2) (RelNP (MassNP (UseN tree_N)) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP UseCopula)))) (UsePron youPl_Pron))))) (AdVVP always_AdV (AdVVP always_AdV (ComplVS fear_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (DetCN few_Det (ComplN2 (Use3N3 distance_N3) (DetNP few_Det))) (AdvVP (ComplSlash (SlashV2a close_V2) (DetNP few_Det)) here_Adv)))))))
LangEng: father of hers of most Paris here that hasn't been many fathers of tree , that wouldn't be , you had always always feared that few distances to few have closed few here
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (DetNP (DetQuantOrd DefArt NumPl (OrdSuperl yellow_A))) (ComplVA become_VA (AdjOrd (OrdSuperl cold_A))))
LangEng: the most yellow wouldn't become coldest
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (AdvNP (UsePN john_PN) now_Adv) (UseComp (CompNP (DetCN every_Det (ApposCN (AdjCN (UseComparA bad_A) (UseN girl_N)) (UsePN paris_PN))))))
LangEng: John now hadn't been every worse girl Paris
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (AdvNP (AdvNP (ExtAdvNP (UsePN john_PN) here_Adv) (PrepNP after_Prep (DetCN someSg_Det (UseN man_N)))) everywhere_Adv) (AdVVP always_AdV (AdVVP always_AdV (ComplVV can_VV (ComplSlash (AdVVPSlash always_AdV (Slash3V3 sell_V3 (DetNP many_Det))) (RelNP (DetNP few_Det) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP (UseV go_V)))))))))
LangEng: John , here , after some man everywhere can't always always always sell few , that don't go , to many
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (PPartNP (CountNP (DetQuant IndefArt NumPl) (PredetNP most_Predet (PredetNP only_Predet (PPartNP (PredetNP only_Predet (PPartNP (UsePN john_PN) cut_V2)) understand_V2)))) bite_V2) (ComplSlash (AdVVPSlash always_AdV (AdVVPSlash always_AdV (Slash2V3 sell_V3 (ExtAdvNP (DetCN few_Det (AdvCN (UseN cat_N) everywhere_Adv)) now_Adv)))) (ExtAdvNP (RelNP (DetNP (DetQuant that_Quant NumSg)) (UseRCl (TTAnt TPres AAnter) PNeg (RelCl (PredVP (DetCN many_Det (UseN2 father_N2)) (UseV run_V))))) here_Adv)))
LangEng: ones of most only only John cut understood bitten won't always always have sold few cats everywhere , now , to that , such that many fathers haven't run , here
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (PredetNP only_Predet (ExtAdvNP (CountNP few_Det (UsePron he_Pron)) everywhere_Adv)) (UseComp (CompAdv now_Adv)))
LangEng: only few of him , everywhere , were now
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (ExtAdvNP (RelNP (CountNP someSg_Det (CountNP few_Det (UsePN john_PN))) (UseRCl (TTAnt TCond AAnter) PNeg (RelSlash IdRP (SlashVP (AdvNP (MassNP (UseN ship_N)) everywhere_Adv) (Slash2V3 add_V3 (CountNP every_Det (UsePN paris_PN))))))) (PrepNP from_Prep (DetNP (DetQuant that_Quant (NumCard (NumDigits (IIDig D_1 (IDig D_2)))))))) (AdvVP (ComplVV can_VV (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestVP whoSg_IP (ComplVA become_VA (AdAP almost_AdA (PositA blue_A))))))) here_Adv))
LangEng: some of few of John , that ship everywhere wouldn't have added everything of Paris to , from those 1 &+ 2 , won't have been able to know who hasn't become almost blue here
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePN john_PN) (ComplSlash (SlashVV can_VV (AdVVPSlash always_AdV (AdvVPSlash (SlashV2a bite_V2) now_Adv))) (CountNP (DetQuant (PossPron she_Pron) NumSg) (RelNP (DetNP somePl_Det) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (ComplVA become_VA (AdAP too_AdA (UseComparA white_A)))))))))
LangEng: John hasn't been able to always bite now hers of some , that won't become too whiter
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (CountNP (DetQuant this_Quant (NumCard (NumDigits (IDig D_3)))) (AdvNP (CountNP (DetQuant (PossPron he_Pron) (NumCard (NumDigits (IDig D_3)))) (ExtAdvNP (UsePN paris_PN) here_Adv)) everywhere_Adv)) (ComplVS know_VS (UseCl (TTAnt TPres ASimul) PPos (PredVP (PPartNP (DetNP every_Det) read_V2) (ComplVV must_VV (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestVP whatPl_IP (UseV play_V)))))))))
LangEng: these 3 of his 3 of Paris , here , everywhere would know that everything read must know what won't have played
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (MassNP (PartNP (PartNP (RelCN (AdvCN (PossNP (ApposCN (UseN book_N) (UsePN john_PN)) (UsePron we_Pron)) now_Adv) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP (AdvVP UseCopula everywhere_Adv)))) (DetCN many_Det (AdjCN (PositA red_A) (ApposCN (PartNP (UseN car_N) (DetNP somePl_Det)) (DetCN few_Det (UseN2 father_N2)))))) (DetCN (DetQuant that_Quant NumPl) (UseN book_N)))) (ComplVV want_VV (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestIAdv where_IAdv (PredVP (PPartNP (UsePN paris_PN) buy_V2) (ComplVV can_VV (ComplVV can8know_VV UseCopula))))))))
LangEng: book John of ours now that hadn't been everywhere of many red cars of some few fathers of those books will want to know where Paris bought hasn't been able to be able to be
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (DetCN (DetQuantOrd (PossPron youSg_Pron) NumSg (OrdSuperl red_A)) (PartNP (ComplN2 (Use2N3 distance_N3) (MassNP (ComplN2 (Use2N3 distance_N3) (PPartNP (MassNP (UseN2 father_N2)) teach_V2)))) (CountNP (DetQuant DefArt (NumCard (AdNum almost_AdN (NumDigits (IDig D_3))))) (RelNP (UsePron youSg_Pron) (UseRCl (TTAnt TPast ASimul) PPos (RelCl (PredVP (DetNP many_Det) (UseV jump_V)))))))) (ComplSlash (Slash3V3 send_V3 (DetNP somePl_Det)) (ExtAdvNP (RelNP (ExtAdvNP (UsePron it_Pron) here_Adv) (UseRCl (TTAnt TCond AAnter) PPos (RelCl (PredVP (PredetNP most_Predet (DetNP every_Det)) (ComplSlash (SlashV2a break_V2) (UsePN john_PN)))))) here_Adv)))
LangEng: your reddest distance from distance from father taught of the almost 3 of you , such that many jumped , will send it , here , such that most everything would have broken John , here , to some
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (RelNP (PPartNP (DetCN every_Det (UseN2 (ComplN3 distance_N3 (PredetNP all_Predet (UsePron it_Pron))))) fear_V2) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP (ComplVA become_VA (AdjOrd (OrdDigits (IIDig D_9 (IDig D_0)))))))) (AdVVP always_AdV (ComplVA become_VA (AdjOrd (OrdSuperl hot_A)))))
LangEng: every distance from all it feared , that hasn't become 9 &+ 0th , wouldn't always have become hottest
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (PPartNP (UsePN paris_PN) understand_V2) (ComplSlash (Slash3V3 add_V3 (AdvNP (DetNP (DetQuant DefArt NumPl)) (PrepNP on_Prep (PredetNP most_Predet (ExtAdvNP (DetCN every_Det (UseN2 father_N2)) here_Adv))))) (UsePN john_PN)))
LangEng: Paris understood didn't add John to them on most every father , here
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePN john_PN) (ComplVV must_VV (ComplVV can_VV (ComplVA become_VA (UseComparA small_A)))))
LangEng: John mustn't be able to become smaller
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPres ASimul) PNeg (RelCl (PredVP (MassNP (AdvCN (PossNP (UseN2 father_N2) (UsePN paris_PN)) (PrepNP after_Prep (UsePron he_Pron)))) (AdvVP (UseV run_V) (PrepNP from_Prep (MassNP (UseN house_N)))))))) (ComplSlash (Slash3V3 add_V3 (RelNP (UsePN john_PN) (UseRCl (TTAnt TPres ASimul) PNeg (RelCl (PredVP (PredetNP not_Predet (UsePN paris_PN)) (AdVVP always_AdV (AdVVP always_AdV UseCopula))))))) (PredetNP only_Predet (PredetNP all_Predet (AdvNP (DetNP somePl_Det) here_Adv)))))
LangEng: Paris , such that father of Paris after him doesn't run from house , would have added only all some here to John , such that not Paris isn't always always
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (MassNP (AdjCN (AdjOrd (OrdNumeral (num (pot3plus (pot1as2 (pot1to19 n2)) (pot2 (pot0 n3)))))) (PossNP (PartNP (ComplN2 (Use3N3 distance_N3) (RelNP (UsePN john_PN) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP UseCopula)))) (UsePron i_Pron)) (CountNP (DetQuantOrd (PossPron we_Pron) (NumCard (NumDigits (IDig D_5))) (OrdSuperl yellow_A)) (UsePron she_Pron))))) (ComplSlash (AdvVPSlash (AdVVPSlash always_AdV (Slash2V3 add_V3 (DetCN someSg_Det (PartNP (ApposCN (UseN2 father_N2) (UsePN john_PN)) (DetCN few_Det (UseN2 father_N2)))))) here_Adv) (DetNP (DetQuant IndefArt (NumCard (AdNum at_least_AdN (AdNum almost_AdN (NumDigits (IDig D_3)))))))))
LangEng: twelve thousand three hundredth distance to John , that won't have been , of me of our 5 most yellow of her didn't always add some father John of few fathers here to at least almost 3
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (MassNP (RelCN (PossNP (PossNP (ApposCN (PossNP (UseN bread_N) (MassNP (UseN2 father_N2))) (DetCN someSg_Det (ApposCN (UseN house_N) (DetNP few_Det)))) (DetNP (DetQuantOrd this_Quant NumSg (OrdDigits (IDig D_4))))) (AdvNP (ExtAdvNP (PPartNP (PPartNP (UsePN paris_PN) buy_V2) kill_V2) (PrepNP behind_Prep (DetCN few_Det (UseN tree_N)))) (PrepNP to_Prep (DetCN few_Det (PossNP (UseN2 father_N2) (UsePron youPl_Pron)))))) (UseRCl (TTAnt TCond ASimul) PNeg (RelSlash IdRP (SlashVP (PPartNP (MassNP (UseN computer_N)) read_V2) (AdVVPSlash always_AdV (SlashV2a fear_V2))))))) (UseComp (CompAdv everywhere_Adv)))
LangEng: bread of father some house few of this 4th of Paris bought killed , behind few trees , to few fathers of yours that computer read wouldn't always fear won't be everywhere
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (PartNP (RelCN (UseN2 (Use3N3 distance_N3)) (UseRCl (TTAnt TPres ASimul) PPos (RelSlash IdRP (SlashVP (UsePron it_Pron) (AdVVPSlash always_AdV (SlashV2a kill_V2)))))) (PredetNP only_Predet (DetNP someSg_Det)))) (AdvVP (ComplVA become_VA (UseComparA small_A)) everywhere_Adv))
LangEng: distance that it always kills of only some wouldn't become smaller everywhere
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (CountNP many_Det (UsePron it_Pron)) (ComplVV can_VV (ComplVV want_VV UseCopula)))
LangEng: many of it would have been able to want to be
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (DetCN many_Det (AdjCN (AdjOrd (OrdNumeral (num (pot2as3 (pot1as2 (pot0as1 pot01)))))) (AdjCN (AdAP very_AdA (UseComparA white_A)) (ApposCN (ComplN2 father_N2 (CountNP few_Det (AdvNP (UsePron we_Pron) here_Adv))) (AdvNP (UsePron we_Pron) here_Adv))))) (AdvVP (UseV travel_V) everywhere_Adv))
LangEng: many first very whiter fathers of few of us here we here wouldn't travel everywhere
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PPartNP (ExtAdvNP (DetCN someSg_Det (ApposCN (RelCN (AdvCN (ApposCN (UseN animal_N) (DetNP somePl_Det)) everywhere_Adv) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP (AdvVP UseCopula everywhere_Adv)))) (DetNP every_Det))) (PrepNP from_Prep (UsePN john_PN))) cut_V2) (AdvVP (UseV run_V) here_Adv))
LangEng: some animal some everywhere that wouldn't have been everywhere everything , from John , cut doesn't run here
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (CountNP (DetQuantOrd (PossPron he_Pron) NumPl (OrdNumeral (num (pot2as3 (pot1as2 (pot1 n9)))))) (RelNP (PredetNP not_Predet (PredetNP only_Predet (CountNP someSg_Det (AdvNP (UsePN paris_PN) now_Adv)))) (UseRCl (TTAnt TFut ASimul) PNeg (RelSlash IdRP (SlashVP (PPartNP (UsePron he_Pron) understand_V2) (SlashV2a eat_V2)))))) (ComplVS hope_VS (UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePron youSg_Pron) (ComplVS say_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (DetCN few_Det (UseN horse_N)) (ComplVV want_VV (UseV live_V)))))))))
LangEng: his ninetieth of not only some of Paris now , that he understood won't eat , haven't hoped that you say that few horses have wanted to live
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (PredetNP all_Predet (DetCN somePl_Det (ComplN2 (Use2N3 distance_N3) (AdvNP (MassNP (RelCN (AdjCN (UseComparA green_A) (UseN friend_N)) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP UseCopula)))) everywhere_Adv)))) (UseV come_V))
LangEng: all some distances from greener friend that had been everywhere would come
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePN paris_PN) (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PNeg (QuestCl (PredVP (DetCN (DetQuantOrd no_Quant NumPl (OrdSuperl cold_A)) (UseN2 (ComplN3 distance_N3 (DetNP someSg_Det)))) (ComplSlash (Slash2V3 add_V3 (PPartNP (UsePN paris_PN) break_V2)) (DetCN (DetQuant that_Quant NumSg) (PossNP (UseN star_N) (DetNP every_Det)))))))))
LangEng: Paris wouldn't have known if no coldest distances from some hadn't added Paris broken to that star of everything
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetCN somePl_Det (ComplN2 father_N2 (DetCN (DetQuantOrd no_Quant NumPl (OrdSuperl ready_A)) (ApposCN (AdvCN (AdvCN (PossNP (UseN2 father_N2) (DetNP somePl_Det)) everywhere_Adv) now_Adv) (CountNP (DetQuant no_Quant NumPl) (RelNP (UsePron i_Pron) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP UseCopula)))))))) (UseV live_V))
LangEng: some fathers of no readiest fathers of some everywhere now none of me , that will be , won't live
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PPartNP (DetCN (DetQuant DefArt (NumCard (AdNum at_least_AdN (NumDigits (IIDig D_5 (IDig D_1)))))) (UseN river_N)) find_V2) (UseV swim_V))
LangEng: the at least 5 &+ 1 rivers found would have swum
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (RelNP (CountNP many_Det (DetNP somePl_Det)) (UseRCl (TTAnt TFut AAnter) PNeg (RelCl (PredVP (PredetNP not_Predet (AdvNP (MassNP (UseN2 father_N2)) (PrepNP in8front_Prep (DetNP few_Det)))) UseCopula)))) (ComplVA become_VA (PositA yellow_A)))
LangEng: many of some , such that not father in front of few won't have been , won't become yellow
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetCN somePl_Det (PossNP (UseN2 (ComplN3 distance_N3 (PPartNP (PredetNP most_Predet (UsePron we_Pron)) fear_V2))) (UsePron it_Pron))) (AdVVP always_AdV (UseV live_V)))
LangEng: some distances from most us feared of its didn't always live
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (CountNP someSg_Det (MassNP (UseN2 (ComplN3 distance_N3 (UsePN paris_PN))))) (ComplSlash (SlashV2a bite_V2) (PredetNP most_Predet (DetCN many_Det (AdvCN (AdjCN (AdjOrd (OrdDigits (IDig D_8))) (AdjCN (AdjOrd (OrdSuperl white_A)) (AdjCN (UseComparA warm_A) (UseN2 father_N2)))) now_Adv)))))
LangEng: some of distance from Paris wouldn't bite most many 8th whitest warmer fathers now
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (MassNP (ComplN2 (Use3N3 distance_N3) (UsePron youSg_Pron))) (UseComp (CompAdv here_Adv)))
LangEng: distance to you had been here
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PPartNP (UsePron he_Pron) buy_V2) (ComplVA become_VA (AdAP too_AdA (AdAP so_AdA (AdAP almost_AdA (AdjOrd (OrdSuperl small_A)))))))
LangEng: he bought hadn't become too so almost smallest
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetNP few_Det) UseCopula)
LangEng: few won't be
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetCN (DetQuantOrd IndefArt NumSg (OrdDigits (IIDig D_2 (IDig D_3)))) (ApposCN (RelCN (ApposCN (ApposCN (AdjCN (PositA ready_A) (ComplN2 (Use2N3 distance_N3) (DetNP someSg_Det))) (UsePron he_Pron)) (CountNP (DetQuant this_Quant NumSg) (MassNP (ApposCN (UseN animal_N) (UsePN paris_PN))))) (UseRCl (TTAnt TCond ASimul) PPos (RelSlash IdRP (SlashVP (UsePN paris_PN) (SlashVV must_VV (SlashV2a love_V2)))))) (UsePron we_Pron))) (AdVVP always_AdV UseCopula))
LangEng: a 2 &+ 3rd ready distance from some he this of animal Paris that Paris would have to love we would always have been
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (DetCN every_Det (PossNP (PartNP (UseN star_N) (MassNP (ComplN2 (Use3N3 distance_N3) (PPartNP (CountNP somePl_Det (UsePN paris_PN)) cut_V2)))) (UsePN paris_PN))) (ComplVS hope_VS (UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePron it_Pron) (ComplSlash (SlashV2a eat_V2) (ExtAdvNP (DetCN (DetQuantOrd (PossPron he_Pron) NumSg (OrdSuperl bad_A)) (PartNP (UseN2 father_N2) (UsePN paris_PN))) now_Adv))))))
LangEng: every star of distance to some of Paris cut of Paris wouldn't have hoped that it will eat his worst father of Paris , now
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetNP somePl_Det) (ComplVA become_VA (PositA heavy_A)))
LangEng: some would have become heavy
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PPartNP (UsePron youSg_Pron) cut_V2) (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PPos (QuestIComp (CompIP (IdetCN how8many_IDet (ComplN2 father_N2 (UsePN paris_PN)))) (ExtAdvNP (UsePN john_PN) now_Adv))))))
LangEng: you cut don't always know how many fathers of Paris John , now , would have been
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (CountNP someSg_Det (DetCN (DetQuantOrd this_Quant NumSg (OrdSuperl cold_A)) (ApposCN (PartNP (RelCN (UseN2 father_N2) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (ComplVV can_VV UseCopula)))) (PPartNP (AdvNP (DetNP every_Det) now_Adv) have_V2)) (PPartNP (DetCN someSg_Det (PossNP (ApposCN (UseN friend_N) (UsePN paris_PN)) (ExtAdvNP (DetNP many_Det) now_Adv))) count_V2)))) (UseComp (CompAP (PositA young_A))))
LangEng: some of this coldest father that won't be able to be of everything now had some friend Paris of many , now , counted was young
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (CountNP every_Det (RelNP (AdvNP (PPartNP (UsePN john_PN) buy_V2) now_Adv) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP (ComplVV can8know_VV (UseComp (CompCN (UseN friend_N)))))))) (ComplVA become_VA (AdAP too_AdA (AdjOrd (OrdSuperl ready_A)))))
LangEng: everything of John bought now , that will have been able to be a friend , will have become too readiest
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PredetNP not_Predet (PPartNP (MassNP (AdjCN (PositA yellow_A) (AdvCN (PartNP (AdjCN (UseComparA hot_A) (UseN train_N)) (PredetNP not_Predet (UsePron he_Pron))) (PrepNP under_Prep (UsePN john_PN))))) wait_V2)) (AdvVP UseCopula everywhere_Adv))
LangEng: not yellow hotter train of not him under John waited wouldn't have been everywhere
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (CountNP few_Det (DetNP few_Det)) UseCopula)
LangEng: few of few would be
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (AdvNP (PredetNP only_Predet (CountNP (DetQuant (PossPron i_Pron) NumPl) (UsePron it_Pron))) here_Adv) (ComplVV must_VV (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PNeg (QuestCl (PredVP (DetNP every_Det) (AdVVP always_AdV (UseComp (CompAdv now_Adv)))))))))
LangEng: only mine of it here will have had to know if everything hadn't always been now
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePN john_PN) (ComplSlash (SlashV2a teach_V2) (PredetNP most_Predet (UsePN john_PN))))
LangEng: John will teach most John
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetCN many_Det (UseN2 (Use3N3 distance_N3))) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PNeg (QuestVP (IdetCN how8many_IDet (UseN2 (Use3N3 distance_N3))) (ComplVA become_VA (PositA bad_A))))))
LangEng: many distances haven't known how many distances didn't become bad
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePN paris_PN) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PPos (QuestSlash whoSg_IP (SlashVP (RelNP (DetCN every_Det (UseN2 (Use3N3 distance_N3))) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP UseCopula))) (Slash2V3 send_V3 (AdvNP (PredetNP most_Predet (UsePron youSg_Pron)) here_Adv)))))))
LangEng: Paris would know whom every distance , that would have been , would send most you here to
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePron youPl_Pron) (UseComp (CompCN (UseN2 (Use3N3 distance_N3)))))
LangEng: you will be distances
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (RelNP (DetNP every_Det) (UseRCl (TTAnt TCond AAnter) PPos (RelSlash IdRP (SlashVP (AdvNP (UsePN paris_PN) (PrepNP after_Prep (MassNP (UseN child_N)))) (AdvVPSlash (SlashV2a drink_V2) now_Adv))))) UseCopula)
LangEng: everything , that Paris after child would have drunk now , isn't
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (PPartNP (ExtAdvNP (ExtAdvNP (PPartNP (CountNP (DetQuantOrd this_Quant NumSg (OrdSuperl old_A)) (DetCN many_Det (AdjCN (UseComparA good_A) (UseN train_N)))) close_V2) now_Adv) (PrepNP in_Prep (CountNP somePl_Det (MassNP (AdjCN (AdAP almost_AdA (PositA big_A)) (UseN2 (Use2N3 distance_N3))))))) kill_V2) UseCopula)
LangEng: this oldest of many better trains closed , now , in some of almost big distance , killed will have been
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (UsePron it_Pron) (AdVVP always_AdV UseCopula))
LangEng: it would always have been
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePN paris_PN) (UseComp (CompCN (PossNP (ApposCN (ApposCN (ApposCN (ComplN2 father_N2 (UsePN john_PN)) (PredetNP most_Predet (UsePN paris_PN))) (DetNP (DetQuantOrd (PossPron we_Pron) NumSg (OrdSuperl good_A)))) (UsePron she_Pron)) (MassNP (UseN man_N))))))
LangEng: Paris will have been a father of John most Paris our best she of man
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (ExtAdvNP (ExtAdvNP (PPartNP (DetNP many_Det) find_V2) here_Adv) now_Adv) (AdVVP always_AdV (AdvVP (AdVVP always_AdV (UseV live_V)) everywhere_Adv)))
LangEng: many found , here , now , always always lived everywhere
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (UsePron we_Pron) (ComplVV can8know_VV (ComplVV can8know_VV UseCopula)))
LangEng: we have been able to be able to be
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (PredetNP all_Predet (DetNP somePl_Det)) (ComplVV want_VV (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestVP whoPl_IP UseCopula))))))
LangEng: all some didn't want to always know who wouldn't have been
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePron she_Pron) (ComplVV want_VV (UseV swim_V)))
LangEng: she wouldn't have wanted to swim
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (PredetNP most_Predet (CountNP (DetQuant no_Quant NumPl) (DetNP few_Det))) (AdvVP UseCopula everywhere_Adv))
LangEng: most none of few won't be everywhere
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (MassNP (PossNP (RelCN (AdvCN (ComplN2 (ComplN3 distance_N3 (PredetNP not_Predet (DetNP somePl_Det))) (UsePN paris_PN)) now_Adv) (UseRCl (TTAnt TPast AAnter) PPos (RelCl (PredVP (MassNP (UseN music_N)) (UseComp (CompAdv now_Adv)))))) (RelNP (UsePron youSg_Pron) (UseRCl (TTAnt TPres ASimul) PPos (RelSlash IdRP (SlashVP (DetCN few_Det (UseN2 father_N2)) (AdVVPSlash always_AdV (SlashV2a wait_V2)))))))) (UseV swim_V))
LangEng: distance from not some to Paris now such that music had been now of yours , that few fathers always wait for , wouldn't have swum
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (MassNP (PossNP (PossNP (PartNP (AdvCN (PartNP (AdvCN (UseN dog_N) now_Adv) (PredetNP most_Predet (UsePN john_PN))) (PrepNP between_Prep (UsePN paris_PN))) (ExtAdvNP (DetNP many_Det) here_Adv)) (DetNP few_Det)) (PredetNP most_Predet (RelNP (DetNP few_Det) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (UseComp (CompAdv now_Adv)))))))) (UseComp (CompNP (ExtAdvNP (CountNP (DetQuantOrd (PossPron we_Pron) (NumCard (NumDigits (IDig D_8))) (OrdSuperl big_A)) (DetCN somePl_Det (PossNP (AdvCN (UseN2 father_N2) everywhere_Adv) (PPartNP (UsePron we_Pron) wait_V2)))) everywhere_Adv))))
LangEng: dog now of most John between Paris of many , here , of few of most few , that wouldn't be now , won't have been our 8 biggest of some fathers everywhere of ours waited , everywhere
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (RelNP (RelNP (MassNP (AdvCN (UseN2 (Use2N3 distance_N3)) now_Adv)) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP (ComplVV can_VV (ComplVV can_VV UseCopula))))) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP (ComplSlash (SlashV2a see_V2) (RelNP (RelNP (DetCN every_Det (UseN2 father_N2)) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula))) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP (UseV jump_V)))))))) (AdvVP (UseComp (CompAdv (PrepNP with_Prep (AdvNP (UsePN john_PN) now_Adv)))) everywhere_Adv))
LangEng: distance now , that won't have been able to be able to be , that had seen every father , that is , that won't have jumped , hasn't been with John now everywhere
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (AdjCN (AdjOrd (OrdDigits (IIDig D_2 (IDig D_0)))) (PartNP (UseN city_N) (AdvNP (UsePron we_Pron) everywhere_Adv)))) (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot3 (pot2plus (pot0 n7) (pot1 n2)))) good_A))))
LangEng: 2 &+ 0th city of us everywhere wouldn't become seven hundred and twenty thousandth best
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (AdvNP (MassNP (PartNP (UseN2 (ComplN3 distance_N3 (DetCN (DetQuant IndefArt NumPl) (UseN flower_N)))) (DetCN many_Det (AdvCN (ApposCN (PossNP (UseN2 father_N2) (UsePN john_PN)) (ExtAdvNP (DetNP every_Det) here_Adv)) here_Adv)))) everywhere_Adv) (ComplSlash (Slash3V3 add_V3 (PPartNP (AdvNP (UsePron we_Pron) here_Adv) bite_V2)) (DetNP every_Det)))
LangEng: distance from flowers of many fathers of John everything , here , here everywhere will add everything to us here bitten
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (PredetNP all_Predet (UsePron youPl_Pron)) (UseV sleep_V))
LangEng: all you will have slept
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (ExtAdvNP (PredetNP not_Predet (PPartNP (RelNP (PPartNP (DetCN every_Det (UseN2 (Use3N3 distance_N3))) buy_V2) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP UseCopula))) find_V2)) (PrepNP between_Prep (DetCN few_Det (PartNP (AdvCN (PartNP (AdjCN (UseComparA red_A) (UseN tree_N)) (CountNP every_Det (DetNP many_Det))) here_Adv) (DetNP someSg_Det))))) (ComplVV can8know_VV (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PPos (QuestCl (PredVP (AdvNP (UsePron i_Pron) now_Adv) (UseV come_V)))))))
LangEng: not every distance bought , that hasn't been , found , between few redder trees of everything of many here of some , hadn't been able to know if I now will have come
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (ExtAdvNP (ExtAdvNP (DetNP someSg_Det) now_Adv) now_Adv) (ComplVA become_VA (AdjOrd (OrdDigits (IIDig D_2 (IIDig D_4 (IIDig D_8 (IIDig D_3 (IDig D_1)))))))))
LangEng: some , now , now , hadn't become 2 &+ 4 &+ , &+ 8 &+ 3 &+ 1st
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (ExtAdvNP (PPartNP (UsePN paris_PN) cut_V2) (PrepNP in_Prep (ExtAdvNP (DetCN somePl_Det (RelCN (AdvCN (AdvCN (UseN water_N) everywhere_Adv) (PrepNP with_Prep (DetNP few_Det))) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (AdvVP UseCopula now_Adv))))) here_Adv))) (AdVVP always_AdV (UseComp (CompAdv now_Adv))))
LangEng: Paris cut , in some waters everywhere with few that wouldn't be now , here , hadn't always been now
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (MassNP (UseN fish_N)) (UseComp (CompAP (UseComparA young_A))))
LangEng: fish isn't younger
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (RelNP (DetCN many_Det (UseN2 (Use3N3 distance_N3))) (UseRCl (TTAnt TCond AAnter) PPos (RelSlash IdRP (SlashVP (PredetNP all_Predet (UsePN paris_PN)) (Slash3V3 add_V3 (ExtAdvNP (DetCN many_Det (UseN2 father_N2)) (PrepNP behind_Prep (DetNP few_Det)))))))) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestCl (PredVP (CountNP every_Det (UsePron he_Pron)) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PPos (QuestIComp (CompIAdv when_IAdv) (UsePron we_Pron)))))))))
LangEng: many distances , that all Paris would have added to many fathers , behind few , had known if everything of him hasn't known when we would be
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (ExtAdvNP (MassNP (PartNP (ComplN2 (Use3N3 distance_N3) (ExtAdvNP (UsePN paris_PN) (PrepNP behind_Prep (UsePron he_Pron)))) (UsePron i_Pron))) now_Adv) (ComplVV want_VV (ComplVV must_VV (UseV travel_V))))
LangEng: distance to Paris , behind him , of me , now , has wanted to have to travel
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (CountNP somePl_Det (CountNP every_Det (MassNP (AdjCN (AdAP so_AdA (PositA clean_A)) (UseN2 father_N2))))) (ComplVV must_VV (UseV run_V)))
LangEng: some of everything of so clean father wouldn't have had to run
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePron we_Pron) (AdVVP always_AdV (ComplSlash (AdvVPSlash (Slash3V3 give_V3 (MassNP (AdjCN (PositA ready_A) (ComplN2 (Use3N3 distance_N3) (UsePron i_Pron))))) now_Adv) (MassNP (AdvCN (ApposCN (PossNP (AdjCN (PositA young_A) (UseN2 father_N2)) (ExtAdvNP (DetNP few_Det) everywhere_Adv)) (RelNP (PPartNP (DetNP somePl_Det) see_V2) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP UseCopula)))) now_Adv)))))
LangEng: we hadn't always given young father of few , everywhere , some seen , that have been , now ready distance to me now
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (RelNP (AdvNP (DetNP (DetQuant this_Quant NumPl)) everywhere_Adv) (UseRCl (TTAnt TPast ASimul) PPos (RelCl (PredVP (UsePron she_Pron) (ComplSlash (AdvVPSlash (AdVVPSlash always_AdV (SlashV2a bite_V2)) now_Adv) (MassNP (PossNP (UseN2 father_N2) (DetNP few_Det)))))))) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PNeg (QuestIComp (CompIAdv where_IAdv) (UsePron we_Pron)))))
LangEng: these everywhere , such that she always bit now father of few , will know where we wouldn't be
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (MassNP (ComplN2 (ComplN3 distance_N3 (UsePN paris_PN)) (UsePron i_Pron))) (UseV play_V))
LangEng: distance from Paris to me didn't play
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePN paris_PN) (ComplSlash (Slash3V3 talk_V3 (PredetNP all_Predet (UsePron she_Pron))) (DetNP someSg_Det)))
LangEng: Paris had talked to some about all her
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (RelNP (UsePN john_PN) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP (UseComp (CompCN (UseN2 (ComplN3 distance_N3 (DetNP someSg_Det)))))))) (UseComp (CompCN (ApposCN (ComplN2 father_N2 (MassNP (AdvCN (AdvCN (UseN sea_N) everywhere_Adv) here_Adv))) (UsePN paris_PN)))))
LangEng: John , that hasn't been a distance from some , was a father of sea everywhere here Paris
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (MassNP (ApposCN (UseN2 (Use2N3 distance_N3)) (CountNP every_Det (UsePron it_Pron)))) (AdvVP (UseV play_V) here_Adv))
LangEng: distance everything of it plays here
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (PredetNP all_Predet (MassNP (PossNP (PartNP (RelCN (AdvCN (AdvCN (UseN2 father_N2) now_Adv) now_Adv) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (UseV walk_V)))) (CountNP (DetQuant DefArt NumPl) (UsePN paris_PN))) (PPartNP (DetCN (DetQuantOrd DefArt NumPl (OrdDigits (IDig D_6))) (ApposCN (AdvCN (UseN2 father_N2) everywhere_Adv) (PPartNP (UsePN john_PN) see_V2))) break_V2)))) (UseV go_V))
LangEng: all father now now that has walked of them of Paris of the 6th fathers everywhere John seen broken won't have gone
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (AdvNP (UsePN john_PN) now_Adv) (ComplVV can_VV (ComplVV can_VV (UseV live_V))))
LangEng: John now can't be able to live
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePron i_Pron) (UseComp (CompAdv now_Adv)))
LangEng: I won't be now
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (DetNP every_Det) (UseComp (CompAdv here_Adv)))
LangEng: everything wouldn't have been here
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (MassNP (PossNP (UseN2 (Use3N3 distance_N3)) (DetCN (DetQuantOrd no_Quant NumSg (OrdNumeral (num (pot3plus (pot2plus pot01 pot111) (pot2 pot01))))) (PossNP (UseN city_N) (AdvNP (CountNP few_Det (PPartNP (UsePron it_Pron) fear_V2)) now_Adv))))) (ComplVS know_VS (UseCl (TTAnt TPres AAnter) PNeg (PredVP (PPartNP (CountNP someSg_Det (UsePN john_PN)) eat_V2) (AdvVP (UseComp (CompAP (UseComparA blue_A))) here_Adv)))))
LangEng: distance of no one hundred and eleven thousand one hundredth city of few of it feared now won't know that some of John eaten hasn't been bluer here
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetNP (DetQuant this_Quant NumSg)) (UseComp (CompCN (PossNP (UseN tree_N) (RelNP (PPartNP (AdvNP (ExtAdvNP (UsePN paris_PN) now_Adv) (PrepNP behind_Prep (UsePN paris_PN))) wait_V2) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP (AdVVP always_AdV UseCopula))))))))
LangEng: this wasn't a tree of Paris , now , behind Paris waited , that won't always have been
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePron we_Pron) UseCopula)
LangEng: we are
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PredetNP most_Predet (UsePN john_PN)) (AdvVP (ComplSlash (SlashVV want_VV (AdVVPSlash always_AdV (SlashV2a fear_V2))) (PredetNP not_Predet (UsePron she_Pron))) (PrepNP with_Prep (DetCN someSg_Det (AdjCN (UseComparA clean_A) (PartNP (UseN horse_N) (MassNP (ComplN2 father_N2 (UsePN paris_PN)))))))))
LangEng: most John would have wanted to always fear not her with some cleaner horse of father of Paris
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (PPartNP (DetCN someSg_Det (UseN2 (Use2N3 distance_N3))) count_V2) (ComplVV can_VV (ComplVA become_VA (AdAP too_AdA (PositA green_A)))))
LangEng: some distance counted will be able to become too green
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PredetNP not_Predet (MassNP (ComplN2 (Use2N3 distance_N3) (DetNP few_Det)))) (AdVVP always_AdV (ComplVV can8know_VV (ComplVV can8know_VV (UseV walk_V)))))
LangEng: not distance from few would always have been able to be able to walk
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (AdvNP (MassNP (AdjCN (AdjOrd (OrdDigits (IIDig D_7 (IDig D_0)))) (PartNP (PossNP (ApposCN (UseN milk_N) (PredetNP all_Predet (UsePN john_PN))) (DetNP many_Det)) (CountNP few_Det (UsePN john_PN))))) here_Adv) (ComplSlash (AdVVPSlash always_AdV (Slash3V3 give_V3 (UsePN paris_PN))) (UsePN paris_PN)))
LangEng: 7 &+ 0th milk all John of many of few of John here hadn't always given Paris Paris
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (DetCN (DetQuantOrd (PossPron youPl_Pron) (NumCard (NumDigits (IIDig D_3 (IDig D_5)))) (OrdSuperl clean_A)) (AdvCN (AdjCN (PositA young_A) (AdjCN (AdAP too_AdA (AdjOrd (OrdDigits (IDig D_3)))) (PossNP (ApposCN (PossNP (UseN2 father_N2) (UsePron she_Pron)) (DetNP few_Det)) (MassNP (AdjCN (UseComparA cold_A) (UseN2 father_N2)))))) now_Adv)) (ComplSlash (Slash3V3 add_V3 (MassNP (PartNP (PartNP (RelCN (PossNP (UseN2 father_N2) (UsePN paris_PN)) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula))) (MassNP (PossNP (UseN2 father_N2) (UsePron youSg_Pron)))) (MassNP (RelCN (UseN child_N) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula))))))) (ExtAdvNP (AdvNP (PredetNP most_Predet (UsePN paris_PN)) everywhere_Adv) (PrepNP from_Prep (ExtAdvNP (PPartNP (DetCN somePl_Det (ComplN2 (Use3N3 distance_N3) (UsePron he_Pron))) see_V2) here_Adv)))))
LangEng: your 3 &+ 5 cleanest young too 3rd fathers of hers few of colder father now don't add most Paris everywhere , from some distances to him seen , here , to father of Paris that is of father of yours of child that is
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (DetCN every_Det (PossNP (UseN blood_N) (UsePron she_Pron))) UseCopula)
LangEng: every blood of hers won't have been
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (ExtAdvNP (PPartNP (ExtAdvNP (PredetNP not_Predet (UsePN paris_PN)) here_Adv) read_V2) everywhere_Adv) (ComplVA become_VA (PositA white_A)))
LangEng: not Paris , here , read , everywhere , wouldn't have become white
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (PredetNP not_Predet (PPartNP (PredetNP most_Predet (DetCN somePl_Det (ComplN2 (Use2N3 distance_N3) (UsePron she_Pron)))) wait_V2)) (ComplVV can_VV (UseComp (CompAP (PositA cold_A)))))
LangEng: not most some distances from her waited could be cold
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetNP few_Det) (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PNeg (QuestIComp (CompIP (IdetCN how8many_IDet (PartNP (ComplN2 (Use2N3 distance_N3) (UsePron youSg_Pron)) (ExtAdvNP (UsePron youSg_Pron) everywhere_Adv)))) (UsePron we_Pron)))))
LangEng: few won't know how many distances from you of you , everywhere , we won't be
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (AdvNP (AdvNP (AdvNP (DetCN someSg_Det (ApposCN (ApposCN (PossNP (UseN bread_N) (DetNP somePl_Det)) (DetCN every_Det (UseN bike_N))) (UsePron it_Pron))) here_Adv) (PrepNP on_Prep (RelNP (PredetNP not_Predet (PredetNP all_Predet (ExtAdvNP (UsePN paris_PN) now_Adv))) (UseRCl (TTAnt TCond ASimul) PNeg (RelCl (PredVP (DetNP every_Det) (UseV come_V))))))) here_Adv) UseCopula)
LangEng: some bread of some every bike it here on not all Paris , now , such that everything wouldn't come , here would be
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (MassNP (UseN ship_N)) (AdvVP (ComplSlash (SlashVV can8know_VV (AdVVPSlash always_AdV (SlashVV can8know_VV (AdVVPSlash always_AdV (SlashV2a kill_V2))))) (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPast ASimul) PPos (RelSlash IdRP (SlashVP (AdvNP (DetNP someSg_Det) now_Adv) (AdVVPSlash always_AdV (SlashV2a cut_V2))))))) here_Adv))
LangEng: ship won't have been able to always be able to always kill Paris , that some now always cut , here
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePN john_PN) (ComplVV want_VV (UseComp (CompNP (RelNP (PPartNP (ExtAdvNP (MassNP (UseN2 father_N2)) here_Adv) eat_V2) (UseRCl (TTAnt TCond ASimul) PNeg (RelCl (PredVP (UsePron it_Pron) (UseV go_V)))))))))
LangEng: John had wanted to be father , here , eaten , such that it wouldn't go
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePN paris_PN) (UseV swim_V))
LangEng: Paris didn't swim
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (CountNP (DetQuant no_Quant (NumCard (AdNum at_least_AdN (NumDigits (IIDig D_2 (IDig D_9)))))) (CountNP someSg_Det (DetNP (DetQuant no_Quant (NumCard (AdNum almost_AdN (NumDigits (IDig D_1)))))))) (ComplSlash (SlashV2a teach_V2) (DetNP somePl_Det)))
LangEng: no at least 2 &+ 9 of some of no almost 1 would teach some
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (CountNP few_Det (AdvNP (RelNP (CountNP someSg_Det (AdvNP (AdvNP (PPartNP (DetNP many_Det) understand_V2) now_Adv) (PrepNP in8front_Prep (MassNP (UseN2 father_N2))))) (UseRCl (TTAnt TPast AAnter) PNeg (RelSlash IdRP (SlashVP (UsePron she_Pron) (AdVVPSlash always_AdV (SlashV2a kill_V2)))))) (PrepNP in8front_Prep (UsePN john_PN)))) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestSlash whatSg_IP (SlashVP (PredetNP most_Predet (MassNP (AdjCN (PositA old_A) (UseN2 father_N2)))) (AdvVPSlash (AdvVPSlash (Slash2V3 talk_V3 (UsePN john_PN)) now_Adv) now_Adv))))))
LangEng: few of some of many understood now in front of father , that she hadn't always killed , in front of John had known what most old father wouldn't have talked to John now now about
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePron she_Pron) (UseComp (CompAdv here_Adv)))
LangEng: she will be here
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePN paris_PN) (AdVVP always_AdV (AdVVP always_AdV (ComplVV can_VV (UseComp (CompNP (UsePron we_Pron)))))))
LangEng: Paris would always always be able to be us
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePN paris_PN) (ComplVA become_VA (AdAP too_AdA (UseComparA new_A))))
LangEng: Paris didn't become too newer
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (DetCN every_Det (UseN music_N)) (ComplVS know_VS (UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePN paris_PN) (UseV come_V)))))
LangEng: every music will have known that Paris hasn't come
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (AdvNP (DetCN every_Det (ApposCN (RelCN (AdvCN (RelCN (ApposCN (UseN2 father_N2) (UsePron we_Pron)) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP UseCopula))) now_Adv) (UseRCl (TTAnt TFut ASimul) PPos (RelSlash IdRP (SlashVP (DetNP someSg_Det) (SlashV2a wait_V2))))) (AdvNP (MassNP (PartNP (ApposCN (UseN language_N) (DetNP someSg_Det)) (ExtAdvNP (UsePN paris_PN) here_Adv))) now_Adv))) everywhere_Adv) (UseComp (CompAdv everywhere_Adv)))
LangEng: every father we that hadn't been now that some will wait for language some of Paris , here , now everywhere wouldn't have been everywhere
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PredetNP all_Predet (DetNP few_Det)) UseCopula)
LangEng: all few would have been
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (PPartNP (DetNP few_Det) bite_V2) (UseV walk_V))
LangEng: few bitten will walk
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePron she_Pron) UseCopula)
LangEng: she won't be
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (ExtAdvNP (CountNP somePl_Det (ExtAdvNP (ExtAdvNP (MassNP (UseN2 (ComplN3 distance_N3 (UsePron i_Pron)))) now_Adv) everywhere_Adv)) now_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PPos (QuestVP (IdetIP how8many_IDet) (ComplVA become_VA (UseComparA big_A))))))
LangEng: some of distance from me , now , everywhere , now , wouldn't have known how many have become bigger
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (AdvNP (AdvNP (CountNP many_Det (DetNP few_Det)) now_Adv) now_Adv) (UseComp (CompCN (PartNP (PossNP (ApposCN (ComplN2 (Use3N3 distance_N3) (CountNP (DetQuant this_Quant NumSg) (DetNP somePl_Det))) (PredetNP not_Predet (CountNP someSg_Det (UsePN paris_PN)))) (PPartNP (MassNP (AdvCN (UseN cloud_N) now_Adv)) find_V2)) (DetCN many_Det (UseN cloud_N))))))
LangEng: many of few now now hadn't been distances to this of some not some of Paris of cloud now found of many clouds
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (PredetNP all_Predet (CountNP (DetQuantOrd DefArt NumPl (OrdNumeralSuperl (num (pot3plus (pot2 pot01) (pot2plus pot01 (pot1to19 n9)))) heavy_A)) (RelNP (RelNP (DetNP few_Det) (UseRCl (TTAnt TCond AAnter) PPos (RelCl (PredVP (UsePN paris_PN) (ComplVV want_VV UseCopula))))) (UseRCl (TTAnt TPres ASimul) PPos (RelCl (PredVP (AdvNP (DetNP someSg_Det) now_Adv) (ComplVA become_VA (PositA cold_A)))))))) (UseComp (CompNP (PredetNP most_Predet (PPartNP (MassNP (AdvCN (ApposCN (UseN animal_N) (UsePron youSg_Pron)) now_Adv)) eat_V2)))))
LangEng: all the one hundred thousand one hundred and nineteenth heaviest of few , such that Paris would have wanted to be , such that some now becomes cold , won't be most animal you now eaten
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (RelNP (PPartNP (CountNP (DetQuant this_Quant NumSg) (MassNP (ApposCN (ComplN2 (ComplN3 distance_N3 (UsePN paris_PN)) (MassNP (UseN wine_N))) (MassNP (AdvCN (UseN2 father_N2) here_Adv))))) do_V2) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (AdvVP (ComplSlash (SlashVV can_VV (SlashVV can_VV (SlashV2a close_V2))) (DetCN somePl_Det (ApposCN (UseN2 father_N2) (DetNP somePl_Det)))) (PrepNP to_Prep (ExtAdvNP (CountNP somePl_Det (UsePron i_Pron)) here_Adv)))))) (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PNeg (QuestCl (PredVP (PPartNP (CountNP (DetQuant this_Quant NumSg) (DetNP every_Det)) see_V2) UseCopula))))))
LangEng: this of distance from Paris to wine father here done , that would be able to be able to close some fathers some to some of me , here , hasn't always known if this of everything seen hadn't been
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (CountNP many_Det (AdvNP (CountNP somePl_Det (MassNP (ComplN2 (Use2N3 distance_N3) (PredetNP not_Predet (ExtAdvNP (DetNP many_Det) here_Adv))))) (PrepNP under_Prep (DetCN many_Det (AdvCN (ApposCN (AdjCN (UseComparA hot_A) (UseN music_N)) (UsePron we_Pron)) everywhere_Adv))))) (ComplSlash (Slash3V3 sell_V3 (CountNP few_Det (MassNP (PossNP (AdvCN (PossNP (UseN2 father_N2) (UsePN john_PN)) now_Adv) (ExtAdvNP (MassNP (UseN woman_N)) (PrepNP on_Prep (UsePron she_Pron))))))) (RelNP (DetCN few_Det (PartNP (RelCN (UseN2 (ComplN3 distance_N3 (UsePN paris_PN))) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (AdVVP always_AdV UseCopula)))) (DetCN many_Det (UseN2 (ComplN3 distance_N3 (DetNP somePl_Det)))))) (UseRCl (TTAnt TCond ASimul) PPos (RelSlash IdRP (SlashVP (UsePron i_Pron) (SlashVV can_VV (Slash3V3 sell_V3 (UsePron it_Pron)))))))))
LangEng: many of some of distance from not many , here , under many hotter musics we everywhere would have sold few distances from Paris that will always be of many distances from some , that I would be able to sell to it , to few of father of John now of woman , on her
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (PredetNP most_Predet (ExtAdvNP (UsePron youSg_Pron) here_Adv)) (ComplVV can8know_VV (AdVVP always_AdV (UseComp (CompCN (UseN2 (Use3N3 distance_N3)))))))
LangEng: most you , here , couldn't always be a distance
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP only_Predet (CountNP somePl_Det (ExtAdvNP (AdvNP (AdvNP (MassNP (AdvCN (UseN2 father_N2) here_Adv)) here_Adv) here_Adv) now_Adv))) UseCopula)
LangEng: only some of father here here here , now , aren't
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetCN few_Det (UseN2 father_N2)) (UseV play_V))
LangEng: few fathers haven't played
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (ExtAdvNP (PPartNP (PPartNP (UsePron i_Pron) count_V2) count_V2) here_Adv) (ComplVV can8know_VV (ComplVA become_VA (AdAP very_AdA (PositA yellow_A)))))
LangEng: I counted counted , here , wouldn't have been able to become very yellow
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (MassNP (AdjCN (AdAP too_AdA (PositA big_A)) (RelCN (PartNP (RelCN (RelCN (ApposCN (UseN2 father_N2) (DetNP few_Det)) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP UseCopula))) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (UseV travel_V)))) (PredetNP most_Predet (RelNP (UsePN john_PN) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP UseCopula))))) (UseRCl (TTAnt TFut ASimul) PNeg (RelCl (PredVP (PredetNP most_Predet (UsePron youSg_Pron)) (AdvVP (ComplVV want_VV UseCopula) here_Adv))))))) (ComplVV want_VV UseCopula))
LangEng: too big father few that would have been that would travel of most John , that isn't , such that most you won't want to be here would have wanted to be
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PPartNP (MassNP (UseN2 (ComplN3 distance_N3 (RelNP (MassNP (PossNP (UseN2 father_N2) (UsePron i_Pron))) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (AdVVP always_AdV UseCopula))))))) read_V2) (ComplVA become_VA (UseComparA good_A)))
LangEng: distance from father of mine , that will always be , read hadn't become better
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (CountNP somePl_Det (UsePron it_Pron)) (UseComp (CompAdv (PrepNP in8front_Prep (UsePN paris_PN)))))
LangEng: some of it won't have been in front of Paris
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (UsePron he_Pron) (ComplSlash (SlashV2a have_V2) (DetNP (DetQuantOrd (PossPron i_Pron) NumPl (OrdSuperl hot_A)))))
LangEng: he won't have had my hottest
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (UsePron she_Pron) (ComplVV can_VV (ComplVA become_VA (PositA heavy_A))))
LangEng: she won't have been able to become heavy
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (PredetNP all_Predet (PredetNP all_Predet (UsePN paris_PN))) (ComplVS fear_VS (UseCl (TTAnt TPast ASimul) PPos (PredVP (DetCN someSg_Det (AdjCN (AdjOrd (OrdSuperl red_A)) (PartNP (AdjCN (PositA yellow_A) (UseN2 father_N2)) (MassNP (UseN tree_N))))) (UseV go_V)))))
LangEng: all all Paris had feared that some reddest yellow father of tree went
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (AdjCN (UseComparA black_A) (UseN cat_N))) (ComplVS fear_VS (UseCl (TTAnt TCond ASimul) PNeg (PredVP (PPartNP (RelNP (PredetNP most_Predet (AdvNP (UsePN john_PN) everywhere_Adv)) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (AdvVP UseCopula now_Adv)))) read_V2) (AdVVP always_AdV (AdVVP always_AdV (AdVVP always_AdV (ComplVV want_VV (UseV sleep_V)))))))))
LangEng: blacker cat wouldn't fear that most John everywhere , that has been now , read wouldn't always always always want to sleep
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (ExtAdvNP (CountNP (DetQuantOrd this_Quant (NumCard (AdNum at_least_AdN (NumDigits (IDig D_9)))) (OrdNumeralSuperl (num (pot2as3 (pot2plus pot01 pot111))) green_A)) (UsePron youSg_Pron)) (PrepNP with_Prep (PredetNP not_Predet (CountNP (DetQuant no_Quant NumSg) (MassNP (AdvCN (AdvCN (UseN bird_N) here_Adv) (PrepNP to_Prep (UsePN john_PN)))))))) (AdVVP always_AdV UseCopula))
LangEng: these at least 9 one hundred and eleventh greenest of you , with not none of bird here to John , would always be
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (MassNP (UseN2 father_N2)) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestIComp (CompIP whatPl_IP) (ExtAdvNP (DetNP someSg_Det) (PrepNP after_Prep (DetNP many_Det)))))))
LangEng: father would have known what some , after many , wouldn't have been
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePron youPl_Pron) (ComplVS know_VS (UseCl (TTAnt TPres ASimul) PNeg (PredVP (MassNP (PartNP (ComplN2 (Use3N3 distance_N3) (DetNP many_Det)) (UsePN john_PN))) (ComplVV must_VV (ComplVS say_VS (UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePN john_PN) (AdVVP always_AdV UseCopula)))))))))
LangEng: you had known that distance to many of John mustn't say that John hadn't always been
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (MassNP (RelCN (AdvCN (UseN music_N) now_Adv) (UseRCl (TTAnt TPres AAnter) PNeg (RelCl (PredVP (PPartNP (PredetNP only_Predet (UsePN john_PN)) kill_V2) (AdvVP UseCopula here_Adv)))))) UseCopula)
LangEng: music now such that only John killed hasn't been here wasn't
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (RelNP (AdvNP (MassNP (AdvCN (ApposCN (AdjCN (AdAP very_AdA (PositA bad_A)) (UseN fish_N)) (ExtAdvNP (UsePN paris_PN) now_Adv)) (PrepNP in8front_Prep (DetCN someSg_Det (UseN2 (Use2N3 distance_N3)))))) here_Adv) (UseRCl (TTAnt TFut AAnter) PNeg (RelCl (PredVP (DetNP (DetQuant (PossPron youSg_Pron) NumSg)) (ComplVV can8know_VV (ComplVV want_VV (UseComp (CompAdv everywhere_Adv)))))))) (UseComp (CompAdv here_Adv)))
LangEng: very bad fish Paris , now , in front of some distance here , such that yours won't have been able to want to be everywhere , wouldn't be here
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (AdvNP (ExtAdvNP (DetNP somePl_Det) now_Adv) now_Adv) (UseComp (CompNP (PredetNP all_Predet (AdvNP (DetNP many_Det) (PrepNP under_Prep (DetCN every_Det (ComplN2 (Use2N3 distance_N3) (UsePron he_Pron)))))))))
LangEng: some , now , now haven't been all many under every distance from him
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (PPartNP (PredetNP most_Predet (PredetNP not_Predet (CountNP every_Det (CountNP every_Det (PredetNP all_Predet (PredetNP only_Predet (UsePN john_PN))))))) bite_V2) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestIComp (CompIAdv where_IAdv) (ExtAdvNP (UsePN john_PN) here_Adv)))))
LangEng: most not everything of everything of all only John bitten will know where John , here , won't have been
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (DetNP many_Det) (ComplVS fear_VS (UseCl (TTAnt TFut ASimul) PPos (PredVP (ExtAdvNP (DetCN every_Det (PossNP (AdvCN (UseN2 father_N2) here_Adv) (DetCN many_Det (UseN2 father_N2)))) everywhere_Adv) (UseV travel_V)))))
LangEng: many won't have feared that every father here of many fathers , everywhere , will travel
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (DetCN (DetQuantOrd this_Quant NumSg (OrdNumeralSuperl (num (pot3 (pot2 (pot0 n7)))) white_A)) (PartNP (UseN2 (Use3N3 distance_N3)) (UsePron i_Pron))) (AdVVP always_AdV (ComplVA become_VA (PositA blue_A))))
LangEng: this seven hundred thousandth whitest distance of me had always become blue
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePN paris_PN) (ComplVV must_VV (UseV play_V)))
LangEng: Paris would have to play
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (ExtAdvNP (RelNP (UsePron he_Pron) (UseRCl (TTAnt TFut ASimul) PNeg (RelCl (PredVP (AdvNP (UsePron she_Pron) everywhere_Adv) (AdvVP (ComplVV want_VV (ComplVV want_VV UseCopula)) everywhere_Adv))))) (PrepNP to_Prep (DetCN few_Det (UseN bread_N)))) UseCopula)
LangEng: he , such that she everywhere won't want to want to be everywhere , to few breads , won't have been
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (ExtAdvNP (RelNP (DetNP somePl_Det) (UseRCl (TTAnt TFut AAnter) PNeg (RelSlash IdRP (SlashVP (UsePN john_PN) (Slash2V3 talk_V3 (DetCN few_Det (UseN baby_N))))))) here_Adv) (AdVVP always_AdV (ComplVA become_VA (AdAP so_AdA (AdjOrd (OrdNumeral (num (pot2as3 (pot1as2 pot110)))))))))
LangEng: some , that John won't have talked to few babies about , here , hadn't always become so tenth
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (PredetNP all_Predet (UsePron i_Pron)) (ComplSlash (Slash2V3 add_V3 (PPartNP (DetCN many_Det (UseN bread_N)) close_V2)) (PredetNP all_Predet (UsePron we_Pron))))
LangEng: all I would add many breads closed to all us
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePron he_Pron) (AdVVP always_AdV (UseComp (CompCN (ApposCN (UseN bike_N) (UsePN paris_PN))))))
LangEng: he hadn't always been a bike Paris
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (MassNP (AdvCN (RelCN (PartNP (ComplN2 (ComplN3 distance_N3 (PPartNP (DetNP somePl_Det) buy_V2)) (DetCN (DetQuantOrd this_Quant NumSg (OrdSuperl black_A)) (PossNP (UseN grammar_N) (UsePN john_PN)))) (DetCN many_Det (AdvCN (UseN computer_N) everywhere_Adv))) (UseRCl (TTAnt TPres AAnter) PPos (RelCl (PredVP (DetCN every_Det (UseN2 father_N2)) (ComplVV must_VV (AdVVP always_AdV UseCopula)))))) now_Adv)) (ComplSlash (Slash3V3 sell_V3 (PredetNP most_Predet (UsePN paris_PN))) (MassNP (RelCN (ComplN2 father_N2 (RelNP (AdvNP (UsePron she_Pron) (PrepNP with_Prep (DetNP somePl_Det))) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP (UseV travel_V))))) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP (UseV swim_V)))))))
LangEng: distance from some bought to this blackest grammar of John of many computers everywhere such that every father has had to always be now hadn't sold father of her with some , that travels , that hadn't swum to most Paris
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (DetNP few_Det) UseCopula)
LangEng: few hadn't been
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (RelNP (DetCN somePl_Det (ApposCN (ComplN2 father_N2 (PredetNP only_Predet (CountNP many_Det (AdvNP (UsePron youSg_Pron) everywhere_Adv)))) (CountNP few_Det (PPartNP (PPartNP (DetNP (DetQuant that_Quant NumPl)) wait_V2) teach_V2)))) (UseRCl (TTAnt TCond AAnter) PPos (RelSlash IdRP (SlashVP (PredetNP not_Predet (DetNP many_Det)) (AdvVPSlash (AdVVPSlash always_AdV (AdvVPSlash (SlashV2a break_V2) now_Adv)) everywhere_Adv))))) (UseV jump_V))
LangEng: some fathers of only many of you everywhere few of those waited taught , that not many would always have broken now everywhere , wouldn't jump
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (DetNP few_Det) (ComplVV want_VV (UseV come_V)))
LangEng: few would want to come
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (AdvNP (ExtAdvNP (PredetNP only_Predet (UsePron youPl_Pron)) everywhere_Adv) everywhere_Adv) (ComplVA become_VA (PositA young_A)))
LangEng: only you , everywhere , everywhere haven't become young
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetNP someSg_Det) (AdVVP always_AdV (UseComp (CompCN (ApposCN (AdvCN (AdvCN (UseN2 (Use2N3 distance_N3)) now_Adv) here_Adv) (AdvNP (UsePN paris_PN) (PrepNP with_Prep (AdvNP (DetNP somePl_Det) now_Adv))))))))
LangEng: some would always have been a distance now here Paris with some now
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (CountNP few_Det (MassNP (RelCN (UseN2 (ComplN3 distance_N3 (PPartNP (CountNP many_Det (UsePron it_Pron)) kill_V2))) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (AdVVP always_AdV (ComplVA become_VA (PositA red_A)))))))) (UseComp (CompNP (CountNP every_Det (RelNP (CountNP somePl_Det (DetCN many_Det (UseN2 father_N2))) (UseRCl (TTAnt TCond ASimul) PPos (RelSlash IdRP (SlashVP (UsePron it_Pron) (SlashV2a do_V2)))))))))
LangEng: few of distance from many of it killed that would always have become red were everything of some of many fathers , that it would do
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (MassNP (AdvCN (ApposCN (UseN music_N) (ExtAdvNP (CountNP someSg_Det (DetCN many_Det (AdvCN (UseN2 father_N2) everywhere_Adv))) everywhere_Adv)) (PrepNP in8front_Prep (RelNP (ExtAdvNP (AdvNP (UsePN paris_PN) now_Adv) here_Adv) (UseRCl (TTAnt TFut ASimul) PNeg (RelSlash IdRP (SlashVP (DetNP many_Det) (SlashV2a read_V2)))))))) (UseComp (CompCN (UseN bread_N))))
LangEng: music some of many fathers everywhere , everywhere , in front of Paris now , here , that many won't read , is a bread
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (MassNP (ApposCN (ApposCN (RelCN (RelCN (RelCN (UseN2 (Use3N3 distance_N3)) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP UseCopula))) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (ComplVV can_VV UseCopula)))) (UseRCl (TTAnt TPast ASimul) PNeg (RelCl (PredVP (DetNP every_Det) (AdvVP UseCopula everywhere_Adv))))) (ExtAdvNP (DetCN every_Det (ComplN2 (ComplN3 distance_N3 (UsePron it_Pron)) (MassNP (UseN2 father_N2)))) here_Adv)) (PredetNP all_Predet (PPartNP (DetCN someSg_Det (ApposCN (PossNP (UseN sea_N) (UsePron youSg_Pron)) (CountNP few_Det (UsePron it_Pron)))) understand_V2)))) (UseComp (CompNP (UsePN john_PN))))
LangEng: distance that had been that will be able to be such that everything wasn't everywhere every distance from it to father , here , all some sea of yours few of it understood had been John
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PPartNP (DetNP many_Det) bite_V2) (AdVVP always_AdV (ComplVS fear_VS (UseCl (TTAnt TPres AAnter) PNeg (PredVP (ExtAdvNP (CountNP (DetQuantOrd IndefArt NumSg (OrdSuperl yellow_A)) (DetNP many_Det)) everywhere_Adv) (ComplVA become_VA (PositA cold_A)))))))
LangEng: many bitten would always have feared that a most yellow of many , everywhere , hasn't become cold
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (RelNP (RelNP (PPartNP (UsePN john_PN) have_V2) (UseRCl (TTAnt TPres AAnter) PNeg (RelCl (PredVP (PPartNP (AdvNP (UsePN john_PN) everywhere_Adv) drink_V2) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestVP whatSg_IP UseCopula))))))) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP (ComplSlash (AdvVPSlash (AdVVPSlash always_AdV (SlashV2a eat_V2)) (PrepNP under_Prep (MassNP (UseN apple_N)))) (DetNP few_Det))))) (AdvVP (UseComp (CompAP (UseComparA hot_A))) (PrepNP with_Prep (DetNP few_Det))))
LangEng: John had , such that John everywhere drunk hasn't known what was , that always eats under apple few , is hotter with few
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetCN every_Det (AdvCN (UseN river_N) now_Adv)) (UseComp (CompAP (AdAP too_AdA (PositA ready_A)))))
LangEng: every river now wasn't too ready
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePN john_PN) (ComplSlash (AdvVPSlash (Slash2V3 add_V3 (PredetNP most_Predet (MassNP (UseN2 (ComplN3 distance_N3 (DetNP somePl_Det)))))) now_Adv) (DetCN (DetQuantOrd (PossPron she_Pron) NumSg (OrdSuperl bad_A)) (RelCN (RelCN (UseN train_N) (UseRCl (TTAnt TCond AAnter) PPos (RelSlash IdRP (SlashVP (UsePron she_Pron) (SlashV2a fear_V2))))) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP (ComplVV can_VV (ComplVA become_VA (PositA red_A)))))))))
LangEng: John didn't add most distance from some now to her worst train that she would have feared that will have been able to become red
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (RelNP (AdvNP (UsePN paris_PN) here_Adv) (UseRCl (TTAnt TPres AAnter) PNeg (RelSlash IdRP (SlashVP (UsePN john_PN) (SlashVV must_VV (SlashVV must_VV (Slash2V3 give_V3 (UsePron youSg_Pron)))))))) (AdVVP always_AdV (ComplVV can8know_VV (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PPos (QuestVP (IdetCN how8many_IDet (ComplN2 (Use3N3 distance_N3) (DetNP many_Det))) (ComplSlash (Slash2V3 send_V3 (UsePron youPl_Pron)) (DetCN many_Det (UseN bike_N)))))))))
LangEng: Paris here , that John hasn't had to have to give you , hasn't always been able to know how many distances to many send you to many bikes
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePN john_PN) (ComplVV can8know_VV (AdVVP always_AdV (UseV come_V))))
LangEng: John hasn't been able to always come
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (ExtAdvNP (AdvNP (UsePN paris_PN) (PrepNP on_Prep (ExtAdvNP (CountNP somePl_Det (AdvNP (ExtAdvNP (UsePron he_Pron) now_Adv) (PrepNP to_Prep (UsePN john_PN)))) (PrepNP with_Prep (UsePron she_Pron))))) now_Adv) UseCopula)
LangEng: Paris on some of him , now , to John , with her , now , has been
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (MassNP (ComplN2 (ComplN3 distance_N3 (CountNP (DetQuantOrd this_Quant NumSg (OrdDigits (IIDig D_4 (IDig D_5)))) (AdvNP (UsePron youPl_Pron) now_Adv))) (MassNP (AdvCN (AdjCN (AdAP too_AdA (PositA cold_A)) (UseN tree_N)) everywhere_Adv)))) (AdvVP (UseV run_V) here_Adv))
LangEng: distance from this 4 &+ 5th of you now to too cold tree everywhere wouldn't have run here
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (DetCN somePl_Det (ApposCN (PossNP (ComplN2 father_N2 (DetCN someSg_Det (UseN2 (Use3N3 distance_N3)))) (ExtAdvNP (ExtAdvNP (PPartNP (MassNP (UseN apple_N)) teach_V2) (PrepNP from_Prep (UsePron youSg_Pron))) here_Adv)) (UsePron youSg_Pron))) (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PNeg (QuestIComp (CompIAdv why_IAdv) (ExtAdvNP (UsePron she_Pron) here_Adv))))))
LangEng: some fathers of some distance of apple taught , from you , here , you don't always know why she , here , won't be
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (MassNP (RelCN (RelCN (RelCN (UseN star_N) (UseRCl (TTAnt TCond AAnter) PNeg (RelSlash IdRP (SlashVP (UsePN paris_PN) (SlashV2a find_V2))))) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (AdvVP (AdVVP always_AdV (ComplVV want_VV UseCopula)) now_Adv)))) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (ComplVA become_VA (AdAP too_AdA (UseComparA cold_A))))))) (ComplVV must_VV (UseComp (CompAP (AdAP too_AdA (AdjOrd (OrdDigits (IDig D_3))))))))
LangEng: star that Paris wouldn't have found that would always have wanted to be now that would become too colder wouldn't have had to be too 3rd
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (DetCN few_Det (UseN ship_N)) (ComplVA become_VA (AdjOrd (OrdNumeral (num (pot3plus (pot2plus (pot0 n2) (pot1 n4)) (pot1as2 (pot1 n4))))))))
LangEng: few ships wouldn't have become two hundred and forty thousand fortieth
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (CountNP every_Det (CountNP (DetQuant DefArt NumSg) (PPartNP (ExtAdvNP (CountNP every_Det (DetNP few_Det)) everywhere_Adv) see_V2))) (ComplVV must_VV (ComplVS fear_VS (UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP only_Predet (MassNP (ComplN2 (Use2N3 distance_N3) (UsePron he_Pron)))) (AdVVP always_AdV (AdVVP always_AdV (AdvVP UseCopula now_Adv))))))))
LangEng: everything of it of everything of few , everywhere , seen had had to fear that only distance from him isn't always always now
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (MassNP (PossNP (AdjCN (PositA big_A) (PartNP (PartNP (ComplN2 (Use3N3 distance_N3) (CountNP many_Det (UsePN paris_PN))) (UsePN john_PN)) (DetNP someSg_Det))) (AdvNP (MassNP (ComplN2 father_N2 (CountNP somePl_Det (MassNP (UseN music_N))))) everywhere_Adv))) (ComplVA become_VA (UseComparA small_A)))
LangEng: big distance to many of Paris of John of some of father of some of music everywhere would have become smaller
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePN john_PN) (UseV jump_V))
LangEng: John didn't jump
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (DetCN (DetQuantOrd this_Quant (NumCard (NumNumeral (num (pot3 (pot2plus (pot0 n6) pot110))))) (OrdNumeral (num (pot3 (pot1as2 (pot1plus n2 pot01)))))) (UseN house_N)) (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PNeg (QuestCl (PredVP (RelNP (CountNP (DetQuant DefArt NumPl) (DetCN many_Det (UseN2 father_N2))) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (ComplVV must_VV UseCopula)))) UseCopula)))))
LangEng: these six hundred and ten thousand twenty &+ - &+ one thousandth houses hadn't known if they of many fathers , that would have to be , aren't
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (UsePN paris_PN) (ComplSlash (AdVVPSlash always_AdV (SlashVV must_VV (AdvVPSlash (AdVVPSlash always_AdV (AdvVPSlash (Slash3V3 give_V3 (DetNP somePl_Det)) (PrepNP from_Prep (UsePron it_Pron)))) (PrepNP to_Prep (CountNP someSg_Det (ExtAdvNP (UsePN paris_PN) here_Adv)))))) (PPartNP (AdvNP (CountNP many_Det (DetCN few_Det (UseN2 (Use3N3 distance_N3)))) now_Adv) teach_V2)))
LangEng: Paris has always had to many of few distances now taught always give some from it to some of Paris , here
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (CountNP every_Det (PredetNP all_Predet (DetCN every_Det (UseN blood_N)))) (AdVVP always_AdV (ComplVA become_VA (AdAP almost_AdA (UseComparA clean_A)))))
LangEng: everything of all every blood wouldn't always have become almost cleaner
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (MassNP (AdvCN (ApposCN (AdjCN (UseComparA young_A) (PartNP (AdvCN (PartNP (UseN2 father_N2) (UsePron we_Pron)) (PrepNP on_Prep (DetNP every_Det))) (PPartNP (AdvNP (UsePron he_Pron) everywhere_Adv) eat_V2))) (UsePron we_Pron)) here_Adv)) (UseComp (CompAdv now_Adv)))
LangEng: younger father of us on everything of him everywhere eaten we here hasn't been now
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (PPartNP (AdvNP (AdvNP (UsePron it_Pron) here_Adv) now_Adv) see_V2) (UseV play_V))
LangEng: it here now seen hasn't played
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (PPartNP (CountNP someSg_Det (ExtAdvNP (PredetNP all_Predet (AdvNP (PPartNP (UsePron we_Pron) find_V2) here_Adv)) here_Adv)) have_V2) UseCopula)
LangEng: some of all us found here , here , had will be
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePN john_PN) (ComplVV can8know_VV (ComplVA become_VA (AdAP very_AdA (UseComparA old_A)))))
LangEng: John couldn't become very older
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (DetCN somePl_Det (ApposCN (PossNP (UseN2 (Use2N3 distance_N3)) (AdvNP (ExtAdvNP (PPartNP (MassNP (UseN2 father_N2)) kill_V2) now_Adv) (PrepNP from_Prep (AdvNP (UsePN john_PN) here_Adv)))) (CountNP (DetQuant DefArt NumSg) (UsePron she_Pron)))) (UseComp (CompAP (PositA bad_A))))
LangEng: some distances of father killed , now , from John here it of her wouldn't be bad
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (RelNP (ExtAdvNP (PPartNP (CountNP many_Det (AdvNP (UsePron youPl_Pron) (PrepNP under_Prep (UsePN paris_PN)))) have_V2) now_Adv) (UseRCl (TTAnt TPast ASimul) PNeg (RelSlash IdRP (SlashVP (DetCN every_Det (PartNP (PossNP (UseN2 father_N2) (DetNP somePl_Det)) (DetNP many_Det))) (AdVVPSlash always_AdV (Slash2V3 send_V3 (ExtAdvNP (UsePron it_Pron) now_Adv))))))) (UseV come_V))
LangEng: many of you under Paris had , now , that every father of some of many didn't always send it , now , to , won't come
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (PPartNP (RelNP (AdvNP (UsePN paris_PN) here_Adv) (UseRCl (TTAnt TPres AAnter) PPos (RelCl (PredVP (PPartNP (DetCN someSg_Det (UseN music_N)) teach_V2) (ComplSlash (AdVVPSlash always_AdV (SlashV2a break_V2)) (MassNP (UseN2 father_N2))))))) kill_V2) (ComplSlash (SlashVV can_VV (SlashVV want_VV (AdVVPSlash always_AdV (AdVVPSlash always_AdV (AdVVPSlash always_AdV (AdVVPSlash always_AdV (SlashV2a love_V2))))))) (ExtAdvNP (DetNP (DetQuant no_Quant NumPl)) now_Adv)))
LangEng: Paris here , such that some music taught has always broken father , killed can want to always always always always love none , now
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (MassNP (AdjCN (AdjOrd (OrdNumeralSuperl (num (pot3plus (pot2plus pot01 (pot1plus n8 pot01)) (pot2 pot01))) black_A)) (ApposCN (UseN sea_N) (DetNP somePl_Det)))) (AdVVP always_AdV (AdvVP (ComplVV want_VV (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PPos (QuestIComp (CompIAdv when_IAdv) (PredetNP most_Predet (UsePron we_Pron)))))) now_Adv)))
LangEng: one hundred and eighty &+ - &+ one thousand one hundredth blackest sea some doesn't always want to know when most we would be now
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (PPartNP (AdvNP (PPartNP (DetCN few_Det (ComplN2 (Use3N3 distance_N3) (PredetNP most_Predet (DetCN somePl_Det (UseN2 father_N2))))) wait_V2) now_Adv) drink_V2) (UseComp (CompAP (PositA clean_A))))
LangEng: few distances to most some fathers waited now drunk were clean
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (ExtAdvNP (CountNP (DetQuant no_Quant (NumCard (AdNum almost_AdN (NumDigits (IDig D_9))))) (MassNP (ApposCN (ComplN2 (ComplN3 distance_N3 (PPartNP (UsePron youSg_Pron) wait_V2)) (PredetNP all_Predet (ExtAdvNP (DetNP somePl_Det) now_Adv))) (PredetNP all_Predet (RelNP (MassNP (UseN house_N)) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula))))))) everywhere_Adv) (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot3plus (pot2 (pot0 n4)) (pot2plus pot01 (pot1 n9)))) warm_A))))
LangEng: no almost 9 of distance from you waited to all some , now , all house , that is , everywhere , won't become four hundred thousand one hundred and ninetieth warmest
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (CountNP (DetQuantOrd no_Quant NumPl (OrdNumeral (num (pot3plus (pot1as2 (pot0as1 (pot0 n4))) (pot2 (pot0 n4)))))) (UsePron youPl_Pron)) (AdvVP (UseComp (CompCN (AdvCN (RelCN (UseN2 father_N2) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (ComplVV must_VV UseCopula)))) everywhere_Adv))) everywhere_Adv))
LangEng: no four thousand four hundredth of you had been fathers that have had to be everywhere everywhere
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (PPartNP (AdvNP (CountNP (DetQuantOrd this_Quant NumPl (OrdNumeralSuperl (num (pot2as3 (pot2 pot01))) cold_A)) (UsePN john_PN)) now_Adv) wait_V2) UseCopula)
LangEng: these one hundredth coldest of John now waited will be
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (DetCN (DetQuantOrd IndefArt NumSg (OrdSuperl white_A)) (ApposCN (UseN2 (ComplN3 distance_N3 (MassNP (ApposCN (UseN ship_N) (PPartNP (DetNP somePl_Det) buy_V2))))) (PredetNP not_Predet (DetCN every_Det (RelCN (PartNP (UseN train_N) (MassNP (UseN2 father_N2))) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (ComplVV can8know_VV UseCopula)))))))) (ComplVS hope_VS (UseCl (TTAnt TFut ASimul) PPos (PredVP (ExtAdvNP (UsePron i_Pron) here_Adv) UseCopula))))
LangEng: a whitest distance from ship some bought not every train of father that has been able to be would hope that I , here , will be
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PredetNP most_Predet (UsePron it_Pron)) (ComplVV want_VV (UseV come_V)))
LangEng: most it hadn't wanted to come
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (CountNP few_Det (MassNP (UseN2 (ComplN3 distance_N3 (UsePN paris_PN))))) UseCopula)
LangEng: few of distance from Paris would be
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (RelNP (DetNP someSg_Det) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (ComplSlash (Slash2V3 send_V3 (PPartNP (PredetNP not_Predet (UsePN paris_PN)) kill_V2)) (DetNP (DetQuantOrd this_Quant NumSg (OrdSuperl black_A))))))) (ComplVV must_VV (ComplVS say_VS (UseCl (TTAnt TCond ASimul) PPos (PredVP (PPartNP (AdvNP (PredetNP only_Predet (DetNP many_Det)) here_Adv) love_V2) (UseV go_V))))))
LangEng: some , that wouldn't send not Paris killed to this blackest , must say that only many here loved would go
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (DetNP somePl_Det) (AdvVP UseCopula everywhere_Adv))
LangEng: some had been everywhere
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (AdvNP (UsePN john_PN) everywhere_Adv) (ComplVV want_VV (AdvVP UseCopula (PrepNP from_Prep (UsePN john_PN)))))
LangEng: John everywhere wants to be from John
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetCN (DetQuant DefArt NumSg) (UseN car_N)) UseCopula)
LangEng: the car would have been
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetCN someSg_Det (UseN2 (Use3N3 distance_N3))) (AdVVP always_AdV (UseV swim_V)))
LangEng: some distance won't always swim
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePN paris_PN) (AdvVP (AdVVP always_AdV (ComplVV must_VV (ComplSlash (AdVVPSlash always_AdV (SlashV2a wait_V2)) (DetNP few_Det)))) everywhere_Adv))
LangEng: Paris mustn't always always wait for few everywhere
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (ApposCN (ComplN2 (Use2N3 distance_N3) (RelNP (DetCN (DetQuantOrd IndefArt NumSg (OrdDigits (IDig D_3))) (RelCN (AdvCN (UseN2 father_N2) everywhere_Adv) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP UseCopula)))) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (ComplVA become_VA (PositA old_A)))))) (DetCN somePl_Det (UseN2 (ComplN3 distance_N3 (ExtAdvNP (ExtAdvNP (UsePron we_Pron) everywhere_Adv) now_Adv)))))) (UseComp (CompAdv now_Adv)))
LangEng: distance from a 3rd father everywhere that will have been , that would have become old , some distances from us , everywhere , now , wouldn't be now
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePN paris_PN) (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PPos (QuestSlash (IdetCN how8many_IDet (UseN child_N)) (SlashVP (AdvNP (DetCN every_Det (UseN bread_N)) now_Adv) (AdVVPSlash always_AdV (Slash2V3 send_V3 (UsePron she_Pron))))))) here_Adv))
LangEng: Paris didn't know here how many children every bread now will always have sent her to
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetCN many_Det (ApposCN (UseN2 (Use2N3 distance_N3)) (ExtAdvNP (MassNP (ApposCN (ComplN2 (Use2N3 distance_N3) (AdvNP (UsePN john_PN) now_Adv)) (RelNP (DetNP somePl_Det) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP UseCopula))))) here_Adv))) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PNeg (QuestSlash (IdetCN how8many_IDet (AdvCN (AdjCN (AdjOrd (OrdSuperl cold_A)) (PartNP (UseN baby_N) (DetNP somePl_Det))) now_Adv)) (SlashVP (PPartNP (RelNP (AdvNP (UsePron he_Pron) here_Adv) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP UseCopula))) wait_V2) (SlashV2a break_V2))))))
LangEng: many distances distance from John now some , that weren't , here , won't know how many coldest babies of some now he here , that wouldn't be , waited wouldn't break
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (CountNP few_Det (DetNP many_Det)) (ComplVS know_VS (UseCl (TTAnt TPast ASimul) PNeg (PredVP (PPartNP (CountNP somePl_Det (UsePN john_PN)) drink_V2) (ComplVS know_VS (UseCl (TTAnt TCond AAnter) PNeg (PredVP (MassNP (UseN city_N)) (AdvVP (AdvVP UseCopula here_Adv) now_Adv))))))))
LangEng: few of many knew that some of John drunk didn't know that city wouldn't have been here now
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (AdvNP (UsePron it_Pron) everywhere_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PPos (QuestIComp (CompIP (IdetIP how8many_IDet)) (AdvNP (DetNP few_Det) (PrepNP behind_Prep (AdvNP (MassNP (UseN bread_N)) (PrepNP in8front_Prep (UsePN paris_PN)))))))))
LangEng: it everywhere won't have known how many few behind bread in front of Paris would have been
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (ExtAdvNP (PredetNP not_Predet (CountNP (DetQuantOrd that_Quant (NumCard (AdNum almost_AdN (NumDigits (IDig D_0)))) (OrdDigits (IIDig D_1 (IIDig D_1 (IDig D_6))))) (PPartNP (DetNP many_Det) read_V2))) (PrepNP on_Prep (RelNP (ExtAdvNP (PPartNP (CountNP somePl_Det (ExtAdvNP (UsePron she_Pron) now_Adv)) break_V2) here_Adv) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (UseComp (CompAdv now_Adv))))))) UseCopula)
LangEng: not those almost 0 1 &+ 1 &+ 6th of many read , on some of her , now , broken , here , that would have been now , won't have been
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (RelNP (ExtAdvNP (UsePron it_Pron) everywhere_Adv) (UseRCl (TTAnt TFut ASimul) PNeg (RelCl (PredVP (ExtAdvNP (DetNP someSg_Det) everywhere_Adv) (UseComp (CompAdv (PrepNP from_Prep (UsePN paris_PN)))))))) (ComplVV can8know_VV (UseComp (CompAdv everywhere_Adv))))
LangEng: it , everywhere , such that some , everywhere , won't be from Paris , won't have been able to be everywhere
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (RelNP (AdvNP (PPartNP (DetNP many_Det) drink_V2) everywhere_Adv) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP UseCopula))) (ComplVA become_VA (AdAP very_AdA (AdAP too_AdA (UseComparA yellow_A)))))
LangEng: many drunk everywhere , that had been , became very too more yellow
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (UsePron he_Pron) (AdVVP always_AdV (ComplVV can8know_VV (AdvVP (ComplVS hope_VS (UseCl (TTAnt TPast AAnter) PPos (PredVP (AdvNP (UsePron he_Pron) now_Adv) (UseComp (CompAdv everywhere_Adv))))) (PrepNP on_Prep (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (UseV sleep_V)))))))))
LangEng: he could always hope on you , that would sleep , that he now had been everywhere
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (CountNP (DetQuant DefArt NumPl) (DetNP many_Det)) (ComplVS know_VS (UseCl (TTAnt TPast AAnter) PNeg (PredVP (RelNP (CountNP (DetQuantOrd no_Quant NumPl (OrdSuperl yellow_A)) (DetNP (DetQuant IndefArt NumSg))) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (ComplSlash (SlashV2a love_V2) (UsePN john_PN))))) UseCopula))))
LangEng: they of many will know that no most yellow of one , that would love John , hadn't been
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (DetNP every_Det) UseCopula)
LangEng: everything isn't
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (RelNP (MassNP (PartNP (UseN water_N) (PPartNP (AdvNP (PredetNP all_Predet (DetCN (DetQuant no_Quant NumSg) (UseN baby_N))) now_Adv) count_V2))) (UseRCl (TTAnt TCond ASimul) PPos (RelCl (PredVP (UsePron i_Pron) (UseComp (CompCN (UseN star_N))))))) (AdvVP (UseV go_V) (PrepNP to_Prep (UsePN paris_PN))))
LangEng: water of all no baby now counted , such that I would be a star , goes to Paris
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (DetNP (DetQuantOrd no_Quant NumPl (OrdNumeralSuperl (num (pot2as3 (pot1as2 (pot1 n5)))) clean_A))) (ComplVV can8know_VV (AdVVP always_AdV (ComplVV must_VV (ComplVA become_VA (PositA big_A))))))
LangEng: no fiftieth cleanest wouldn't have been able to always have to become big
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (AdvNP (PPartNP (PPartNP (MassNP (AdjCN (AdjOrd (OrdSuperl blue_A)) (ApposCN (PossNP (UseN2 father_N2) (UsePron i_Pron)) (UsePN paris_PN)))) bite_V2) close_V2) everywhere_Adv) (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PNeg (QuestCl (PredVP (UsePN john_PN) (AdVVP always_AdV (AdVVP always_AdV (UseV sleep_V)))))))))
LangEng: bluest father of mine Paris bitten closed everywhere always knows if John wouldn't always always sleep
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP only_Predet (ExtAdvNP (DetCN few_Det (UseN2 (Use3N3 distance_N3))) now_Adv)) (UseV come_V))
LangEng: only few distances , now , don't come
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (UsePN paris_PN) UseCopula)
LangEng: Paris would have been
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (PredetNP most_Predet (RelNP (MassNP (ApposCN (AdvCN (PartNP (AdvCN (UseN2 father_N2) everywhere_Adv) (PPartNP (DetNP every_Det) kill_V2)) now_Adv) (RelNP (DetCN many_Det (UseN2 (Use3N3 distance_N3))) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP (AdVVP always_AdV UseCopula)))))) (UseRCl (TTAnt TPres AAnter) PPos (RelCl (PredVP (PredetNP only_Predet (ExtAdvNP (DetNP few_Det) now_Adv)) (ComplVA become_VA (UseComparA blue_A))))))) (ComplSlash (AdvVPSlash (SlashVV can_VV (Slash3V3 add_V3 (ExtAdvNP (PredetNP only_Predet (DetCN few_Det (UseN2 father_N2))) here_Adv))) everywhere_Adv) (PPartNP (DetCN few_Det (PartNP (PossNP (UseN2 (Use2N3 distance_N3)) (DetCN somePl_Det (ApposCN (UseN2 father_N2) (DetNP many_Det)))) (PPartNP (DetNP (DetQuant IndefArt NumPl)) love_V2))) count_V2)))
LangEng: most father everywhere of everything killed now many distances , that weren't always , such that only few , now , have become bluer , couldn't few distances of some fathers many of ones loved counted add to only few fathers , here , everywhere
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (MassNP (UseN bread_N)) (AdVVP always_AdV (AdvVP (ComplSlash (SlashVV want_VV (SlashVV must_VV (SlashVV can_VV (SlashV2a understand_V2)))) (PredetNP not_Predet (MassNP (ComplN2 (ComplN3 distance_N3 (UsePN john_PN)) (DetCN few_Det (UseN horse_N)))))) (PrepNP after_Prep (UsePN john_PN)))))
LangEng: bread won't always want to have to be able to understand not distance from John to few horses after John
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP (ComplVV can8know_VV (ComplSlash (SlashVV want_VV (AdvVPSlash (SlashV2a buy_V2) now_Adv)) (ExtAdvNP (AdvNP (UsePN paris_PN) everywhere_Adv) here_Adv)))))) UseCopula)
LangEng: you , that will have been able to want to buy now Paris everywhere , here , wouldn't have been
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePron she_Pron) (AdvVP UseCopula (PrepNP under_Prep (AdvNP (RelNP (ExtAdvNP (PredetNP all_Predet (UsePN john_PN)) everywhere_Adv) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP (ComplSlash (SlashV2a love_V2) (UsePron it_Pron))))) now_Adv))))
LangEng: she hadn't been under all John , everywhere , that doesn't love it , now
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (UsePron we_Pron) (ComplVA become_VA (AdAP almost_AdA (UseComparA young_A))))
LangEng: we won't have become almost younger
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PPartNP (UsePN john_PN) fear_V2) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PNeg (QuestCl (PredVP (DetCN every_Det (AdjCN (AdjOrd (OrdSuperl ready_A)) (AdjCN (UseComparA clean_A) (UseN ship_N)))) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PPos (QuestIComp (CompIP whoSg_IP) (DetNP few_Det)))))))))
LangEng: John feared would have known if every readiest cleaner ship didn't know who few will have been
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (MassNP (UseN river_N)) (AdVVP always_AdV (UseV come_V)))
LangEng: river always came
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetCN somePl_Det (ComplN2 (ComplN3 distance_N3 (DetCN every_Det (PartNP (AdjCN (AdjOrd (OrdSuperl heavy_A)) (AdvCN (UseN2 father_N2) now_Adv)) (PredetNP not_Predet (AdvNP (UsePN paris_PN) here_Adv))))) (DetNP (DetQuant IndefArt NumPl)))) UseCopula)
LangEng: some distances from every heaviest father now of not Paris here to ones weren't
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePN john_PN) (UseV live_V))
LangEng: John had lived
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (ExtAdvNP (MassNP (ComplN2 father_N2 (AdvNP (ExtAdvNP (UsePN john_PN) now_Adv) now_Adv))) (PrepNP in8front_Prep (UsePN paris_PN))) (ComplVA become_VA (UseComparA old_A)))
LangEng: father of John , now , now , in front of Paris , doesn't become older
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (RelNP (RelNP (CountNP every_Det (DetNP every_Det)) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP (UseComp (CompAdv here_Adv))))) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PPos (QuestIAdv when_IAdv (PredVP (UsePron we_Pron) (AdVVP always_AdV UseCopula)))))))) (UseComp (CompAdv (PrepNP in_Prep (DetCN few_Det (AdjCN (AdAP so_AdA (AdjOrd (OrdSuperl red_A))) (UseN animal_N)))))))
LangEng: everything of everything , that is here , that knew when we have always been , has been in few so reddest animals
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (PredetNP all_Predet (DetCN someSg_Det (RelCN (RelCN (UseN blood_N) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (AdvVP (ComplVV can_VV UseCopula) here_Adv)))) (UseRCl (TTAnt TPast ASimul) PPos (RelSlash IdRP (SlashVP (MassNP (UseN2 father_N2)) (AdVVPSlash always_AdV (SlashV2a love_V2)))))))) (UseComp (CompAdv everywhere_Adv)))
LangEng: all some blood that would be able to be here that father always loved wasn't everywhere
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (MassNP (AdjCN (PositA clean_A) (PossNP (RelCN (PartNP (ApposCN (PartNP (UseN2 father_N2) (UsePron he_Pron)) (AdvNP (UsePron i_Pron) everywhere_Adv)) (DetCN somePl_Det (UseN2 (Use3N3 distance_N3)))) (UseRCl (TTAnt TPast AAnter) PNeg (RelCl (PredVP (UsePN paris_PN) (AdvVP UseCopula now_Adv))))) (UsePN paris_PN)))) (UseComp (CompAdv here_Adv)))
LangEng: clean father of him I everywhere of some distances such that Paris hadn't been now of Paris is here
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetCN few_Det (RelCN (PossNP (PartNP (UseN bird_N) (UsePN paris_PN)) (CountNP (DetQuantOrd no_Quant NumPl (OrdDigits (IDig D_4))) (PredetNP most_Predet (MassNP (ApposCN (UseN water_N) (UsePron it_Pron)))))) (UseRCl (TTAnt TPast ASimul) PPos (RelCl (PredVP (PredetNP not_Predet (UsePN paris_PN)) (UseComp (CompAdv everywhere_Adv))))))) (ComplVV can8know_VV UseCopula))
LangEng: few birds of Paris of no 4th of most water it such that not Paris was everywhere would have been able to be
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (UsePron i_Pron) (AdvVP (AdVVP always_AdV (UseComp (CompCN (ComplN2 father_N2 (DetCN somePl_Det (UseN ship_N)))))) here_Adv))
LangEng: I have always been a father of some ships here
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (MassNP (ApposCN (ApposCN (UseN2 father_N2) (UsePN paris_PN)) (DetNP every_Det))) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestVP whatPl_IP (ComplSlash (SlashV2a drink_V2) (UsePN john_PN))))))
LangEng: father Paris everything knew what haven't drunk John
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (ExtAdvNP (CountNP every_Det (UsePron he_Pron)) (PrepNP to_Prep (UsePron he_Pron))) (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PPos (QuestIComp (CompIP whoPl_IP) (RelNP (AdvNP (ExtAdvNP (PPartNP (UsePron it_Pron) wait_V2) here_Adv) here_Adv) (UseRCl (TTAnt TFut AAnter) PNeg (RelCl (PredVP (UsePron youSg_Pron) (ComplVV must_VV UseCopula)))))))))
LangEng: everything of him , to him , wouldn't have known who it waited , here , here , such that you won't have had to be , will be
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PredetNP all_Predet (PPartNP (ExtAdvNP (UsePron he_Pron) everywhere_Adv) wait_V2)) UseCopula)
LangEng: all he , everywhere , waited would have been
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (CountNP someSg_Det (DetNP few_Det)) (AdvVP (UseComp (CompAdv (PrepNP under_Prep (ExtAdvNP (PPartNP (MassNP (UseN2 father_N2)) find_V2) everywhere_Adv)))) everywhere_Adv))
LangEng: some of few had been under father found , everywhere , everywhere
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (ExtAdvNP (RelNP (AdvNP (PredetNP most_Predet (CountNP (DetQuantOrd no_Quant NumPl (OrdDigits (IDig D_1))) (PredetNP not_Predet (DetNP (DetQuant this_Quant NumSg))))) everywhere_Adv) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP (ComplVS fear_VS (UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePN john_PN) (UseV swim_V))))))) now_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestSlash (IdetIP how8many_IDet) (SlashVP (CountNP every_Det (AdvNP (PPartNP (DetNP many_Det) close_V2) (PrepNP with_Prep (UsePron youSg_Pron)))) (AdvVPSlash (Slash3V3 send_V3 (UsePron i_Pron)) here_Adv))))))
LangEng: most no 1st of not this everywhere , that feared that John wouldn't have swum , now , had known how many everything of many closed with you wouldn't have sent to me here
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (AdvNP (PredetNP most_Predet (PredetNP most_Predet (DetNP few_Det))) (PrepNP under_Prep (DetNP (DetQuantOrd DefArt NumSg (OrdNumeralSuperl (num (pot3plus (pot2plus pot01 pot110) (pot1as2 pot110))) good_A))))) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PPos (QuestCl (PredVP (PPartNP (AdvNP (MassNP (UseN train_N)) (PrepNP to_Prep (UsePron she_Pron))) have_V2) (UseComp (CompCN (UseN tree_N))))))))
LangEng: most most few under the one hundred and ten thousand tenth best don't know if train to her had would be a tree
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (DetCN (DetQuant IndefArt NumSg) (AdvCN (UseN ship_N) now_Adv)) (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PNeg (QuestIAdv where_IAdv (PredVP (UsePN john_PN) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PNeg (QuestVP whatSg_IP UseCopula)))))))))
LangEng: a ship now has always known where John won't know what wasn't
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PPartNP (MassNP (AdvCN (AdvCN (PartNP (AdjCN (AdjOrd (OrdSuperl black_A)) (ApposCN (UseN sea_N) (UsePron youPl_Pron))) (PredetNP only_Predet (ExtAdvNP (UsePN paris_PN) now_Adv))) here_Adv) now_Adv)) count_V2) (UseV live_V))
LangEng: blackest sea you of only Paris , now , here now counted hadn't lived
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePron it_Pron) (UseV jump_V))
LangEng: it would jump
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (RelNP (UsePron youSg_Pron) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PPos (QuestIComp (CompIAdv how_IAdv) (PredetNP not_Predet (UsePron he_Pron)))))))) (UseV walk_V))
LangEng: you , that hadn't known how not he will be , will walk
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PredetNP not_Predet (UsePron she_Pron)) (ComplVS know_VS (UseCl (TTAnt TCond AAnter) PPos (PredVP (CountNP many_Det (PredetNP most_Predet (PPartNP (DetNP somePl_Det) read_V2))) (ComplVS hope_VS (UseCl (TTAnt TFut AAnter) PNeg (PredVP (UsePron i_Pron) (ComplVA become_VA (UseComparA heavy_A)))))))))
LangEng: not she hadn't known that many of most some read would have hoped that I won't have become heavier
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (AdvNP (AdvNP (UsePN paris_PN) (PrepNP with_Prep (UsePN john_PN))) now_Adv) (ComplVV must_VV (UseComp (CompNP (RelNP (PPartNP (ExtAdvNP (MassNP (UseN2 father_N2)) everywhere_Adv) see_V2) (UseRCl (TTAnt TFut ASimul) PNeg (RelSlash IdRP (SlashVP (UsePron he_Pron) (SlashV2a close_V2)))))))))
LangEng: Paris with John now mustn't be father , everywhere , seen , that he won't close
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (CountNP many_Det (MassNP (ComplN2 (ComplN3 distance_N3 (UsePron it_Pron)) (RelNP (UsePN paris_PN) (UseRCl (TTAnt TCond ASimul) PNeg (RelSlash IdRP (SlashVP (UsePron he_Pron) (SlashV2a fear_V2)))))))) (AdVVP always_AdV (ComplVS say_VS (UseCl (TTAnt TFut AAnter) PNeg (PredVP (RelNP (PredetNP all_Predet (UsePron it_Pron)) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP (AdvVP UseCopula everywhere_Adv)))) (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PPos (QuestIComp (CompIAdv how_IAdv) (UsePron youPl_Pron)))))))))
LangEng: many of distance from it to Paris , that he wouldn't fear , have always said that all it , that hadn't been everywhere , won't have known how you will be
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (DetCN every_Det (RelCN (RelCN (AdvCN (PartNP (PartNP (PartNP (UseN cat_N) (UsePN john_PN)) (DetNP many_Det)) (ExtAdvNP (UsePron he_Pron) now_Adv)) now_Adv) (UseRCl (TTAnt TPast ASimul) PPos (RelCl (PredVP (UsePN john_PN) (AdvVP (ComplVV want_VV UseCopula) here_Adv))))) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (ComplSlash (AdVVPSlash always_AdV (SlashVV want_VV (SlashV2a close_V2))) (MassNP (AdvCN (UseN2 father_N2) here_Adv))))))) (UseV sleep_V))
LangEng: every cat of John of many of him , now , now such that John wanted to be here that has always wanted to close father here wouldn't sleep
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (CountNP someSg_Det (RelNP (MassNP (PartNP (AdvCN (AdvCN (UseN2 (Use2N3 distance_N3)) (PrepNP under_Prep (UsePron she_Pron))) here_Adv) (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP (UseV jump_V)))))) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (AdVVP always_AdV (UseComp (CompAdv now_Adv))))))) (ComplVA become_VA (UseComparA old_A)))
LangEng: some of distance under her here of Paris , that hadn't jumped , that won't always be now , doesn't become older
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (DetNP (DetQuantOrd DefArt NumPl (OrdSuperl warm_A))) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PNeg (QuestVP whoPl_IP (UseComp (CompCN (AdvCN (ApposCN (UseN2 father_N2) (UsePron i_Pron)) everywhere_Adv)))))))
LangEng: the warmest don't know who wouldn't be fathers I everywhere
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (MassNP (AdjCN (AdAP too_AdA (AdAP very_AdA (PositA small_A))) (AdjCN (AdjOrd (OrdDigits (IIDig D_6 (IDig D_9)))) (UseN baby_N)))) (AdvVP (ComplSlash (AdVVPSlash always_AdV (Slash3V3 give_V3 (CountNP (DetQuantOrd DefArt NumPl (OrdDigits (IDig D_2))) (AdvNP (PPartNP (UsePron it_Pron) eat_V2) (PrepNP with_Prep (UsePron she_Pron)))))) (CountNP (DetQuantOrd that_Quant (NumCard (AdNum at_least_AdN (NumDigits (IDig D_5)))) (OrdSuperl blue_A)) (UsePN paris_PN))) now_Adv))
LangEng: too very small 6 &+ 9th baby always gave those at least 5 bluest of Paris the 2nd of it eaten with her now
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PPartNP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TFut ASimul) PPos (RelSlash IdRP (SlashVP (MassNP (UseN2 (Use2N3 distance_N3))) (AdvVPSlash (AdvVPSlash (SlashV2a see_V2) everywhere_Adv) now_Adv))))) teach_V2) (UseComp (CompNP (MassNP (UseN cloud_N)))))
LangEng: Paris , that distance will see everywhere now , taught hadn't been cloud
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (DetNP somePl_Det) (ComplVS hope_VS (UseCl (TTAnt TCond AAnter) PPos (PredVP (MassNP (ComplN2 (Use3N3 distance_N3) (RelNP (AdvNP (UsePron we_Pron) here_Adv) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP UseCopula))))) (UseComp (CompAdv (PrepNP in_Prep (PredetNP most_Predet (UsePN paris_PN)))))))))
LangEng: some will hope that distance to us here , that won't have been , would have been in most Paris
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PPartNP (PPartNP (MassNP (PossNP (PartNP (PartNP (ComplN2 father_N2 (UsePN john_PN)) (AdvNP (UsePN paris_PN) now_Adv)) (ExtAdvNP (DetCN every_Det (UseN2 father_N2)) now_Adv)) (RelNP (UsePN paris_PN) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP UseCopula))))) love_V2) understand_V2) (ComplVV can_VV (ComplVV want_VV (ComplVV can_VV (ComplVS hope_VS (UseCl (TTAnt TFut ASimul) PPos (PredVP (DetNP somePl_Det) (ComplVA become_VA (PositA old_A)))))))))
LangEng: father of John of Paris now of every father , now , of Paris , that will be , loved understood wouldn't have been able to want to be able to hope that some will become old
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePN paris_PN) (ComplVV can_VV (ComplVV must_VV (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PPos (QuestIComp (CompIAdv why_IAdv) (UsePron i_Pron)))))))
LangEng: Paris wouldn't have been able to have to know why I have been
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (ExtAdvNP (DetNP someSg_Det) (PrepNP from_Prep (AdvNP (DetCN every_Det (ComplN2 (ComplN3 distance_N3 (MassNP (UseN2 father_N2))) (PredetNP most_Predet (AdvNP (UsePron we_Pron) everywhere_Adv)))) now_Adv))) (UseV sleep_V))
LangEng: some , from every distance from father to most us everywhere now , will sleep
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP only_Predet (UsePN john_PN)) (AdvVP (UseComp (CompAP (PositA bad_A))) now_Adv))
LangEng: only John isn't bad now
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (ExtAdvNP (PredetNP most_Predet (MassNP (ApposCN (ApposCN (UseN cow_N) (CountNP many_Det (PredetNP not_Predet (UsePN paris_PN)))) (CountNP (DetQuant DefArt NumPl) (DetNP few_Det))))) everywhere_Adv) (ComplVS know_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (PredetNP only_Predet (MassNP (RelCN (AdvCN (UseN2 father_N2) everywhere_Adv) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP UseCopula))))) (ComplSlash (Slash3V3 give_V3 (UsePN john_PN)) (PredetNP only_Predet (ExtAdvNP (DetNP someSg_Det) (PrepNP in_Prep (UsePron i_Pron)))))))))
LangEng: most cow many of not Paris they of few , everywhere , knew that only father everywhere that will have been has given only some , in me , John
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (DetNP many_Det) UseCopula)
LangEng: many wouldn't be
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (DetNP (DetQuantOrd this_Quant (NumCard (NumDigits (IIDig D_3 (IIDig D_3 (IIDig D_4 (IDig D_3)))))) (OrdNumeral (num (pot2as3 (pot1as2 pot111)))))) (ComplVV want_VV (UseV swim_V)))
LangEng: these 3 &+ , &+ 3 &+ 4 &+ 3 eleventh have wanted to swim
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (PPartNP (ExtAdvNP (UsePN john_PN) now_Adv) buy_V2) (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PPos (QuestCl (PredVP (UsePN paris_PN) (ComplSlash (AdvVPSlash (SlashV2a read_V2) now_Adv) (DetNP many_Det)))))) here_Adv))
LangEng: John , now , bought wouldn't know here if Paris had read now many
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (AdvNP (PPartNP (ExtAdvNP (UsePN john_PN) here_Adv) break_V2) now_Adv) (UseV go_V))
LangEng: John , here , broken now hasn't gone
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (CountNP (DetQuantOrd DefArt NumPl (OrdNumeralSuperl (num (pot3 (pot1as2 (pot1plus n3 pot01)))) warm_A)) (AdvNP (PPartNP (ExtAdvNP (DetNP someSg_Det) here_Adv) drink_V2) everywhere_Adv)) (UseV play_V))
LangEng: the thirty &+ - &+ one thousandth warmest of some , here , drunk everywhere will have played
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePN paris_PN) (AdVVP always_AdV UseCopula))
LangEng: Paris is always
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (AdvCN (ApposCN (PossNP (ApposCN (ComplN2 (Use2N3 distance_N3) (DetNP someSg_Det)) (AdvNP (MassNP (UseN2 father_N2)) now_Adv)) (PPartNP (PredetNP only_Predet (AdvNP (UsePN paris_PN) here_Adv)) wait_V2)) (MassNP (RelCN (RelCN (PossNP (UseN2 father_N2) (UsePN john_PN)) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP UseCopula))) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (AdvVP UseCopula here_Adv)))))) (PrepNP on_Prep (DetNP (DetQuant IndefArt (NumCard (NumDigits (IDig D_8)))))))) (ComplVV can8know_VV (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PNeg (QuestIComp (CompIAdv why_IAdv) (DetCN few_Det (PartNP (ComplN2 (Use2N3 distance_N3) (DetNP every_Det)) (AdvNP (UsePron we_Pron) now_Adv))))))))
LangEng: distance from some father now of only Paris here waited father of John that hadn't been that wouldn't be here on 8 wouldn't be able to know why few distances from everything of us now won't be
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PPartNP (ExtAdvNP (UsePN john_PN) everywhere_Adv) drink_V2) (ComplVV want_VV (AdvVP (UseComp (CompAdv everywhere_Adv)) now_Adv)))
LangEng: John , everywhere , drunk doesn't want to be everywhere now
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PredetNP all_Predet (DetCN (DetQuantOrd that_Quant NumSg (OrdDigits (IIDig D_4 (IIDig D_6 (IIDig D_8 (IDig D_9)))))) (PartNP (ComplN2 (ComplN3 distance_N3 (PredetNP all_Predet (DetCN few_Det (UseN star_N)))) (UsePron she_Pron)) (DetCN many_Det (PartNP (RelCN (ApposCN (UseN grammar_N) (UsePron he_Pron)) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP UseCopula))) (DetCN (DetQuantOrd IndefArt NumPl (OrdSuperl small_A)) (ComplN2 father_N2 (UsePN paris_PN)))))))) (ComplVV can8know_VV (UseV go_V)))
LangEng: all that 4 &+ , &+ 6 &+ 8 &+ 9th distance from all few stars to her of many grammars he that aren't of smallest fathers of Paris hadn't been able to go
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (MassNP (AdjCN (AdjOrd (OrdSuperl blue_A)) (AdvCN (AdvCN (UseN2 (Use2N3 distance_N3)) everywhere_Adv) now_Adv))) (AdVVP always_AdV (AdVVP always_AdV (ComplVS say_VS (UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePron youSg_Pron) (AdVVP always_AdV (ComplVA become_VA (PositA good_A)))))))))
LangEng: bluest distance everywhere now had always always said that you will always have become good
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (DetCN (DetQuantOrd that_Quant NumSg (OrdDigits (IIDig D_7 (IIDig D_9 (IDig D_9))))) (UseN beer_N)) (AdvVP (UseV live_V) now_Adv))
LangEng: that 7 &+ 9 &+ 9th beer won't have lived now
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (ExtAdvNP (DetCN many_Det (ComplN2 father_N2 (UsePron youSg_Pron))) here_Adv) (UseComp (CompCN (AdvCN (UseN friend_N) (PrepNP between_Prep (DetCN someSg_Det (ApposCN (PossNP (UseN2 father_N2) (DetNP many_Det)) (PPartNP (UsePN john_PN) count_V2))))))))
LangEng: many fathers of you , here , weren't friends between some father of many John counted
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePN john_PN) (AdVVP always_AdV (AdVVP always_AdV (ComplSlash (AdvVPSlash (Slash3V3 give_V3 (UsePron youSg_Pron)) here_Adv) (UsePron it_Pron)))))
LangEng: John wouldn't always always give it you here
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (MassNP (AdjCN (UseComparA young_A) (UseN friend_N))) (AdVVP always_AdV (ComplVV want_VV (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PPos (QuestVP whatSg_IP (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PPos (QuestVP whatSg_IP UseCopula)))))))))
LangEng: younger friend always wanted to know what knows what had been
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (AdvNP (PredetNP all_Predet (PredetNP only_Predet (CountNP (DetQuantOrd DefArt NumPl (OrdDigits (IDig D_3))) (PPartNP (PredetNP not_Predet (PredetNP all_Predet (DetNP someSg_Det))) fear_V2)))) (PrepNP behind_Prep (PPartNP (CountNP somePl_Det (PredetNP all_Predet (UsePN paris_PN))) do_V2))) (ComplSlash (SlashVV want_VV (Slash3V3 talk_V3 (UsePron it_Pron))) (DetCN few_Det (UseN2 (Use3N3 distance_N3)))))
LangEng: all only the 3rd of not all some feared behind some of all Paris done won't want to few distances to talk about it
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (ExtAdvNP (PredetNP most_Predet (UsePN john_PN)) (PrepNP after_Prep (PredetNP all_Predet (UsePron youSg_Pron)))) (ComplSlash (SlashV2a kill_V2) (AdvNP (DetCN every_Det (RelCN (AdjCN (AdAP very_AdA (AdjOrd (OrdSuperl white_A))) (RelCN (UseN man_N) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP UseCopula)))) (UseRCl (TTAnt TFut ASimul) PPos (RelSlash IdRP (SlashVP (UsePron he_Pron) (SlashV2a break_V2)))))) here_Adv)))
LangEng: most John , after all you , wouldn't kill every very whitest man that won't be that he will break here
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (RelNP (DetNP every_Det) (UseRCl (TTAnt TFut ASimul) PPos (RelSlash IdRP (SlashVP (CountNP many_Det (UsePN paris_PN)) (SlashV2a have_V2))))) (ComplVV can_VV (AdVVP always_AdV (AdVVP always_AdV (ComplVA become_VA (AdjOrd (OrdSuperl old_A)))))))
LangEng: everything , that many of Paris will have , can't always always become oldest
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePron i_Pron) (UseComp (CompNP (CountNP someSg_Det (DetCN every_Det (ComplN2 (ComplN3 distance_N3 (DetCN somePl_Det (UseN bird_N))) (PPartNP (MassNP (UseN fire_N)) buy_V2)))))))
LangEng: I haven't been some of every distance from some birds to fire bought
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (ExtAdvNP (CountNP somePl_Det (ExtAdvNP (AdvNP (ExtAdvNP (UsePron we_Pron) now_Adv) now_Adv) everywhere_Adv)) (PrepNP with_Prep (PredetNP not_Predet (UsePN john_PN)))) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PPos (QuestCl (PredVP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP UseCopula))) (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PPos (QuestVP whatSg_IP UseCopula))) now_Adv))))))
LangEng: some of us , now , now , everywhere , with not John , would know if Paris , that would have been , would have known now what would be
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (MassNP (PossNP (PartNP (PossNP (ApposCN (ApposCN (UseN2 (Use3N3 distance_N3)) (PPartNP (UsePN john_PN) drink_V2)) (PPartNP (DetNP every_Det) cut_V2)) (DetCN few_Det (AdvCN (ComplN2 (Use2N3 distance_N3) (UsePN paris_PN)) everywhere_Adv))) (UsePron we_Pron)) (DetNP every_Det))) (AdVVP always_AdV (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot3 (pot2plus (pot0 n4) (pot1plus n5 pot01)))) small_A)))))
LangEng: distance John drunk everything cut of few distances from Paris everywhere of us of everything always became four hundred and fifty &+ - &+ one thousandth smallest
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePN paris_PN) (ComplVA become_VA (AdAP so_AdA (UseComparA green_A))))
LangEng: Paris will become so greener
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetCN few_Det (RelCN (ApposCN (ComplN2 (Use3N3 distance_N3) (PredetNP all_Predet (DetNP (DetQuantOrd IndefArt NumPl (OrdSuperl small_A))))) (RelNP (DetNP every_Det) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP (UseV sleep_V))))) (UseRCl (TTAnt TPast ASimul) PPos (RelSlash IdRP (SlashVP (CountNP someSg_Det (UsePN john_PN)) (AdVVPSlash always_AdV (SlashVV can8know_VV (SlashV2a love_V2)))))))) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestSlash (IdetIP how8many_IDet) (SlashVP (RelNP (DetCN someSg_Det (ComplN2 father_N2 (DetNP many_Det))) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP (AdvVP UseCopula here_Adv)))) (AdvVPSlash (SlashV2a cut_V2) everywhere_Adv))))))
LangEng: few distances to all smallest everything , that didn't sleep , that some of John could always love won't know how many some father of many , that hadn't been here , won't have cut everywhere
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetNP somePl_Det) (ComplVV must_VV (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot3plus (pot2plus pot01 pot110) (pot2plus (pot0 n8) (pot1 n5)))) heavy_A)))))
LangEng: some hadn't to become one hundred and ten thousand eight hundred and fiftieth heaviest
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePron it_Pron) (AdvVP (ComplVA become_VA (PositA green_A)) now_Adv))
LangEng: it will become green now
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (AdvNP (ExtAdvNP (UsePN paris_PN) now_Adv) here_Adv) UseCopula)
LangEng: Paris , now , here won't be
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePron he_Pron) (AdVVP always_AdV (ComplVA become_VA (AdAP so_AdA (AdAP very_AdA (AdjOrd (OrdDigits (IIDig D_8 (IDig D_3)))))))))
LangEng: he will always become so very 8 &+ 3rd
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePron he_Pron) (ComplVS fear_VS (UseCl (TTAnt TFut ASimul) PPos (PredVP (PPartNP (UsePron she_Pron) see_V2) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestIAdv why_IAdv (PredVP (UsePron she_Pron) (AdVVP always_AdV UseCopula)))))))))
LangEng: he will have feared that she seen will know why she wouldn't always have been
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (ExtAdvNP (PPartNP (UsePN john_PN) see_V2) here_Adv) UseCopula)
LangEng: John seen , here , wouldn't have been
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (PPartNP (DetNP many_Det) break_V2) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestIAdv why_IAdv (PredVP (CountNP every_Det (CountNP few_Det (PredetNP all_Predet (UsePN paris_PN)))) (ComplVV can8know_VV (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestVP whoPl_IP UseCopula)))))))))
LangEng: many broken would know why everything of few of all Paris won't have been able to know who were
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (CountNP few_Det (PredetNP not_Predet (UsePN john_PN))) (UseV live_V))
LangEng: few of not John live
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (AdvNP (MassNP (RelCN (PossNP (UseN bird_N) (DetCN many_Det (ComplN2 (ComplN3 distance_N3 (UsePron we_Pron)) (UsePN john_PN)))) (UseRCl (TTAnt TFut ASimul) PPos (RelCl (PredVP (UsePN paris_PN) UseCopula))))) here_Adv) (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PPos (QuestCl (PredVP (DetCN (DetQuantOrd DefArt NumSg (OrdSuperl new_A)) (ApposCN (UseN2 father_N2) (DetNP someSg_Det))) (ComplSlash (AdVVPSlash always_AdV (SlashV2a have_V2)) (UsePron she_Pron)))))) everywhere_Adv))
LangEng: bird of many distances from us to John such that Paris will be here didn't know everywhere if the newest father some will always have had her
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (DetNP someSg_Det) (AdvVP (ComplSlash (Slash3V3 talk_V3 (ExtAdvNP (PPartNP (CountNP every_Det (CountNP many_Det (DetNP someSg_Det))) understand_V2) here_Adv)) (DetNP few_Det)) now_Adv))
LangEng: some wouldn't have talked to few about everything of many of some understood , here , now
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (AdvNP (PredetNP most_Predet (RelNP (DetNP (DetQuantOrd that_Quant NumSg (OrdDigits (IIDig D_6 (IDig D_7))))) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (AdVVP always_AdV (AdvVP (AdVVP always_AdV UseCopula) everywhere_Adv)))))) (PrepNP between_Prep (PPartNP (CountNP (DetQuantOrd no_Quant NumSg (OrdDigits (IIDig D_3 (IDig D_4)))) (DetNP (DetQuant (PossPron she_Pron) NumSg))) bite_V2))) (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_6)))))
LangEng: most that 6 &+ 7th , that would always always have been everywhere , between no 3 &+ 4th of hers bitten would become 6th
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (ExtAdvNP (ExtAdvNP (DetNP somePl_Det) everywhere_Adv) now_Adv) (AdvVP (ComplSlash (AdVVPSlash always_AdV (AdVVPSlash always_AdV (AdVVPSlash always_AdV (AdVVPSlash always_AdV (Slash3V3 talk_V3 (UsePN john_PN)))))) (PredetNP not_Predet (AdvNP (AdvNP (PredetNP not_Predet (CountNP somePl_Det (DetNP few_Det))) everywhere_Adv) (PrepNP after_Prep (UsePron it_Pron))))) now_Adv))
LangEng: some , everywhere , now , have always always always always talked to not not some of few everywhere after it about John now
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (ExtAdvNP (MassNP (RelCN (PossNP (AdvCN (PossNP (ApposCN (UseN2 father_N2) (UsePron i_Pron)) (UsePN john_PN)) everywhere_Adv) (DetCN (DetQuant (PossPron i_Pron) NumSg) (AdvCN (PossNP (UseN2 father_N2) (UsePN paris_PN)) everywhere_Adv))) (UseRCl (TTAnt TFut ASimul) PNeg (RelSlash IdRP (SlashVP (ExtAdvNP (DetNP few_Det) everywhere_Adv) (SlashVV can_VV (SlashV2a read_V2))))))) here_Adv) (ComplSlash (SlashV2a understand_V2) (AdvNP (RelNP (DetCN (DetQuantOrd that_Quant (NumCard (NumDigits (IDig D_8))) (OrdDigits (IDig D_7))) (AdvCN (ApposCN (UseN music_N) (DetCN few_Det (UseN2 father_N2))) everywhere_Adv)) (UseRCl (TTAnt TFut ASimul) PPos (RelCl (PredVP (UsePN paris_PN) (AdVVP always_AdV UseCopula))))) here_Adv)))
LangEng: father I of John everywhere of my father of Paris everywhere that few , everywhere , won't be able to read , here , won't understand those 8 7th musics few fathers everywhere , such that Paris will always be , here
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PPartNP (ExtAdvNP (AdvNP (MassNP (PartNP (PartNP (UseN friend_N) (CountNP someSg_Det (DetNP every_Det))) (RelNP (DetCN many_Det (UseN city_N)) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP UseCopula))))) here_Adv) now_Adv) see_V2) UseCopula)
LangEng: friend of some of everything of many cities , that haven't been , here , now , seen hadn't been
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (RelNP (UsePron youSg_Pron) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP (ComplSlash (Slash2V3 send_V3 (AdvNP (CountNP someSg_Det (DetNP many_Det)) here_Adv)) (DetCN every_Det (UseN child_N)))))) (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PPos (QuestVP whoSg_IP (ComplVV must_VV UseCopula)))))
LangEng: you , that won't have sent some of many here to every child , wouldn't have known who had had to be
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (ExtAdvNP (AdvNP (ExtAdvNP (MassNP (UseN2 (ComplN3 distance_N3 (CountNP few_Det (UsePN paris_PN))))) now_Adv) here_Adv) (PrepNP from_Prep (CountNP (DetQuant IndefArt (NumCard (NumDigits (IIDig D_9 (IDig D_3))))) (CountNP many_Det (MassNP (AdjCN (PositA good_A) (PossNP (UseN2 father_N2) (DetNP many_Det)))))))) (AdvVP (ComplVV must_VV UseCopula) (PrepNP under_Prep (DetCN few_Det (ApposCN (AdvCN (RelCN (ComplN2 (Use2N3 distance_N3) (UsePron i_Pron)) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP UseCopula))) here_Adv) (DetCN somePl_Det (UseN train_N)))))))
LangEng: distance from few of Paris , now , here , from 9 &+ 3 of many of good father of many , had to be under few distances from me that will have been here some trains
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (RelNP (AdvNP (AdvNP (RelNP (UsePN john_PN) (UseRCl (TTAnt TPast ASimul) PPos (RelCl (PredVP (DetNP few_Det) UseCopula)))) (PrepNP on_Prep (PredetNP most_Predet (CountNP every_Det (PredetNP only_Predet (UsePN paris_PN)))))) now_Adv) (UseRCl (TTAnt TPres AAnter) PNeg (RelSlash IdRP (SlashVP (UsePron it_Pron) (Slash3V3 send_V3 (DetNP somePl_Det)))))) (ComplVS fear_VS (UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePN paris_PN) (ComplVA become_VA (AdjOrd (OrdDigits (IIDig D_0 (IDig D_7)))))))))
LangEng: John , such that few were , on most everything of only Paris now , that it hasn't sent to some , wouldn't have feared that Paris doesn't become 0 &+ 7th
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (RelNP (MassNP (UseN2 (Use3N3 distance_N3))) (UseRCl (TTAnt TCond ASimul) PPos (RelSlash IdRP (SlashVP (ExtAdvNP (RelNP (CountNP every_Det (UsePN paris_PN)) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP UseCopula))) everywhere_Adv) (AdVVPSlash always_AdV (SlashVV can8know_VV (Slash3V3 give_V3 (UsePN paris_PN)))))))) UseCopula)
LangEng: distance , that everything of Paris , that will have been , everywhere , would always be able to give Paris , would be
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (ExtAdvNP (PredetNP not_Predet (ExtAdvNP (ExtAdvNP (CountNP somePl_Det (PPartNP (UsePron he_Pron) find_V2)) now_Adv) (PrepNP between_Prep (PredetNP not_Predet (MassNP (UseN2 (Use2N3 distance_N3))))))) here_Adv) (UseV swim_V))
LangEng: not some of him found , now , between not distance , here , hadn't swum
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (UsePN john_PN) (UseComp (CompAdv everywhere_Adv)))
LangEng: John was everywhere
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePN paris_PN) (ComplVA become_VA (AdjOrd (OrdSuperl blue_A))))
LangEng: Paris wouldn't become bluest
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (MassNP (UseN2 father_N2)) (AdVVP always_AdV (ComplVS say_VS (UseCl (TTAnt TCond ASimul) PNeg (PredVP (DetCN few_Det (UseN music_N)) (AdvVP (UseV sleep_V) here_Adv))))))
LangEng: father hasn't always said that few musics wouldn't sleep here
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (DetNP many_Det) (ComplVV can8know_VV (AdvVP UseCopula now_Adv)))
LangEng: many can be now
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetNP (DetQuant (PossPron i_Pron) NumPl)) (UseV come_V))
LangEng: mine haven't come
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (CountNP (DetQuantOrd this_Quant NumPl (OrdDigits (IIDig D_0 (IDig D_6)))) (CountNP somePl_Det (CountNP (DetQuant (PossPron he_Pron) (NumCard (AdNum almost_AdN (NumDigits (IDig D_7))))) (UsePron youPl_Pron)))) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestIAdv where_IAdv (PredVP (PredetNP most_Predet (ExtAdvNP (UsePN john_PN) here_Adv)) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PPos (QuestIComp (CompIAdv where_IAdv) (DetNP someSg_Det)))))))))
LangEng: these 0 &+ 6th of some of his almost 7 of you won't know where most John , here , knew where some would have been
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (ExtAdvNP (PredetNP only_Predet (AdvNP (DetNP many_Det) here_Adv)) now_Adv) (ComplVA become_VA (AdAP very_AdA (AdAP so_AdA (AdAP too_AdA (PositA old_A))))))
LangEng: only many here , now , become very so too old
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (DetCN (DetQuant no_Quant NumPl) (PartNP (ApposCN (ApposCN (AdvCN (PossNP (AdjCN (PositA clean_A) (UseN2 father_N2)) (MassNP (UseN2 father_N2))) now_Adv) (AdvNP (PredetNP only_Predet (UsePron youPl_Pron)) now_Adv)) (PredetNP all_Predet (DetNP somePl_Det))) (RelNP (UsePron i_Pron) (UseRCl (TTAnt TCond AAnter) PNeg (RelCl (PredVP (PredetNP all_Predet (UsePN john_PN)) UseCopula)))))) (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PPos (QuestSlash (IdetIP how8many_IDet) (SlashVP (UsePN paris_PN) (SlashV2a teach_V2))))))
LangEng: no clean fathers of father now only you now all some of me , such that all John wouldn't have been , hadn't known how many Paris will teach
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePron i_Pron) (ComplVV can8know_VV (ComplVS know_VS (UseCl (TTAnt TCond AAnter) PPos (PredVP (PredetNP most_Predet (RelNP (PredetNP not_Predet (UsePron youPl_Pron)) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP UseCopula)))) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PNeg (QuestVP whoPl_IP (ComplVV want_VV UseCopula)))))))))
LangEng: I hadn't been able to know that most not you , that would be , would have known who wouldn't want to be
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePN paris_PN) (AdVVP always_AdV (ComplSlash (SlashVV can8know_VV (AdVVPSlash always_AdV (SlashVV can8know_VV (Slash2V3 add_V3 (DetCN (DetQuant that_Quant NumPl) (UseN2 father_N2)))))) (MassNP (AdjCN (AdAP almost_AdA (AdAP so_AdA (AdAP almost_AdA (PositA heavy_A)))) (ApposCN (ComplN2 (Use2N3 distance_N3) (UsePron youPl_Pron)) (UsePN paris_PN)))))))
LangEng: Paris hadn't always been able to always be able to add those fathers to almost so almost heavy distance from you Paris
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (PredetNP all_Predet (DetCN many_Det (UseN water_N))) (ComplVS fear_VS (UseCl (TTAnt TPast ASimul) PPos (PredVP (MassNP (UseN apple_N)) (ComplSlash (SlashVV want_VV (SlashVV can8know_VV (SlashVV must_VV (SlashV2a love_V2)))) (PredetNP all_Predet (UsePN john_PN)))))))
LangEng: all many waters would fear that apple wanted to be able to have to love all John
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (ExtAdvNP (UsePron we_Pron) here_Adv) (ComplVA become_VA (AdAP so_AdA (AdjOrd (OrdNumeralSuperl (num (pot3plus (pot1as2 pot110) (pot2plus (pot0 n2) (pot1plus n8 pot01)))) good_A)))))
LangEng: we , here , wouldn't have become so ten thousand two hundred and eighty &+ - &+ first best
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (ExtAdvNP (UsePron youPl_Pron) everywhere_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestIAdv when_IAdv (PredVP (PredetNP not_Predet (DetCN someSg_Det (ApposCN (UseN2 father_N2) (UsePron it_Pron)))) UseCopula)))))
LangEng: you , everywhere , would have known when not some father it was
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (DetNP somePl_Det) (UseComp (CompAP (PositA red_A))))
LangEng: some were red
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (MassNP (UseN horse_N)) (UseComp (CompAP (UseComparA cold_A))))
LangEng: horse had been colder
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (AdvNP (PredetNP all_Predet (UsePN john_PN)) now_Adv) (ComplSlash (SlashVV want_VV (SlashV2a love_V2)) (DetNP every_Det)))
LangEng: all John now hasn't wanted to love everything
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (ExtAdvNP (DetNP many_Det) (PrepNP in8front_Prep (PredetNP most_Predet (PPartNP (CountNP many_Det (UsePron we_Pron)) love_V2)))) (ComplSlash (SlashVV must_VV (Slash3V3 talk_V3 (DetCN (DetQuant no_Quant (NumCard (NumDigits (IDig D_0)))) (ApposCN (RelCN (AdjCN (PositA clean_A) (UseN sea_N)) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP UseCopula))) (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP UseCopula))))))) (DetCN (DetQuant no_Quant NumSg) (UseN flower_N))))
LangEng: many , in front of most many of us loved , won't have had to to no flower talk about no 0 clean seas that aren't Paris , that was
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePron youSg_Pron) (UseV travel_V))
LangEng: you don't travel
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (DetCN (DetQuantOrd this_Quant (NumCard (NumNumeral (num (pot3 (pot2 pot01))))) (OrdNumeral (num (pot2as3 (pot2plus (pot0 n3) (pot1plus n6 pot01)))))) (PossNP (ApposCN (PartNP (UseN2 father_N2) (DetCN (DetQuant DefArt NumSg) (RelCN (PartNP (UseN car_N) (UsePN paris_PN)) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP UseCopula))))) (PredetNP all_Predet (RelNP (MassNP (UseN horse_N)) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (ComplVV must_VV UseCopula)))))) (DetNP somePl_Det))) (UseComp (CompCN (PossNP (AdvCN (PossNP (AdvCN (ApposCN (UseN friend_N) (UsePron youSg_Pron)) now_Adv) (AdvNP (ExtAdvNP (DetNP few_Det) here_Adv) now_Adv)) now_Adv) (DetCN many_Det (PartNP (AdjCN (AdjOrd (OrdSuperl cold_A)) (PossNP (UseN2 father_N2) (DetNP somePl_Det))) (ExtAdvNP (PPartNP (UsePN john_PN) read_V2) here_Adv)))))))
LangEng: these one hundred thousand three hundred and sixty &+ - &+ first fathers of the car of Paris that would have been all horse , that would have to be , of some had been friends you now of few , here , now now of many coldest fathers of some of John read , here
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (ExtAdvNP (DetCN someSg_Det (AdvCN (PartNP (RelCN (ComplN2 (Use3N3 distance_N3) (PPartNP (UsePN john_PN) have_V2)) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP (AdVVP always_AdV UseCopula)))) (DetCN (DetQuantOrd IndefArt NumSg (OrdSuperl small_A)) (PartNP (AdvCN (UseN2 father_N2) here_Adv) (ExtAdvNP (UsePN paris_PN) now_Adv)))) here_Adv)) everywhere_Adv) (ComplVA become_VA (AdjOrd (OrdDigits (IIDig D_9 (IIDig D_9 (IDig D_4)))))))
LangEng: some distance to John had that wouldn't always have been of a smallest father here of Paris , now , here , everywhere , becomes 9 &+ 9 &+ 4th
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (ExtAdvNP (DetCN few_Det (ComplN2 (ComplN3 distance_N3 (PPartNP (PPartNP (DetCN (DetQuant that_Quant NumPl) (UseN wine_N)) love_V2) close_V2)) (UsePN john_PN))) (PrepNP after_Prep (RelNP (UsePron i_Pron) (UseRCl (TTAnt TPres ASimul) PPos (RelCl (PredVP (UsePN paris_PN) UseCopula)))))) (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PPos (QuestVP whoSg_IP (UseV go_V)))))
LangEng: few distances from those wines loved closed to John , after me , such that Paris is , know who goes
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (CountNP someSg_Det (MassNP (PartNP (RelCN (UseN girl_N) (UseRCl (TTAnt TPast ASimul) PNeg (RelCl (PredVP (UsePN john_PN) (AdVVP always_AdV UseCopula))))) (UsePN john_PN)))) (ComplVV want_VV (AdVVP always_AdV (ComplVA become_VA (AdjOrd (OrdNumeral (num (pot3 (pot2 pot01)))))))))
LangEng: some of girl such that John wasn't always of John won't have wanted to always become one hundred thousandth
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (RelNP (MassNP (ApposCN (ComplN2 (Use2N3 distance_N3) (RelNP (DetCN someSg_Det (UseN city_N)) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP (UseV jump_V))))) (AdvNP (AdvNP (AdvNP (DetCN many_Det (UseN star_N)) now_Adv) everywhere_Adv) now_Adv))) (UseRCl (TTAnt TPast ASimul) PNeg (RelSlash IdRP (SlashVP (UsePN john_PN) (SlashV2a read_V2))))) (UseComp (CompAP (PositA good_A))))
LangEng: distance from some city , that will have jumped , many stars now everywhere now , that John didn't read , wasn't good
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (DetCN many_Det (ComplN2 (ComplN3 distance_N3 (RelNP (UsePron we_Pron) (UseRCl (TTAnt TFut AAnter) PPos (RelCl (PredVP (UsePN john_PN) UseCopula))))) (PPartNP (RelNP (PredetNP most_Predet (MassNP (PartNP (UseN2 father_N2) (UsePN paris_PN)))) (UseRCl (TTAnt TFut ASimul) PNeg (RelSlash IdRP (SlashVP (UsePN john_PN) (SlashV2a teach_V2))))) eat_V2))) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestIComp (CompIP (IdetCN how8many_IDet (AdjCN (UseComparA clean_A) (ComplN2 father_N2 (UsePN paris_PN))))) (PPartNP (UsePN paris_PN) see_V2)))))
LangEng: many distances from us , such that John will have been , to most father of Paris , that John won't teach , eaten know how many cleaner fathers of Paris Paris seen was
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (DetNP few_Det) (ComplSlash (SlashV2a have_V2) (DetNP every_Det)))
LangEng: few will have everything
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (MassNP (UseN2 father_N2)) (ComplVS say_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (ExtAdvNP (ExtAdvNP (CountNP many_Det (MassNP (UseN2 father_N2))) here_Adv) here_Adv) (ComplVS hope_VS (UseCl (TTAnt TPres ASimul) PNeg (PredVP (AdvNP (UsePron it_Pron) now_Adv) (UseComp (CompAdv now_Adv)))))))))
LangEng: father hadn't said that many of father , here , here , have hoped that it now isn't now
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (CountNP many_Det (PPartNP (CountNP many_Det (PredetNP not_Predet (PPartNP (PredetNP most_Predet (AdvNP (UsePN paris_PN) now_Adv)) wait_V2))) count_V2)) UseCopula)
LangEng: many of many of not most Paris now waited counted will be
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (DetNP (DetQuantOrd that_Quant NumSg (OrdDigits (IIDig D_0 (IIDig D_3 (IIDig D_0 (IDig D_0))))))) (UseComp (CompAP (AdjOrd (OrdNumeralSuperl (num (pot3plus (pot2 (pot0 n3)) (pot2 pot01))) small_A)))))
LangEng: that 0 &+ , &+ 3 &+ 0 &+ 0th will have been three hundred thousand one hundredth smallest
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetNP few_Det) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestIComp (CompIP whatSg_IP) (ExtAdvNP (RelNP (ExtAdvNP (UsePron youPl_Pron) everywhere_Adv) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (AdVVP always_AdV UseCopula)))) now_Adv)))))
LangEng: few would have known what you , everywhere , that would always have been , now , wouldn't have been
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (UseN star_N)) (AdVVP always_AdV (ComplVV want_VV (ComplVV must_VV (AdVVP always_AdV (AdVVP always_AdV (AdvVP (UseV play_V) here_Adv)))))))
LangEng: star wouldn't always want to have to always always play here
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (PPartNP (RelNP (DetNP many_Det) (UseRCl (TTAnt TCond AAnter) PPos (RelCl (PredVP (AdvNP (ExtAdvNP (UsePN john_PN) now_Adv) here_Adv) (ComplVA become_VA (UseComparA old_A)))))) see_V2) (UseComp (CompNP (CountNP somePl_Det (UsePron we_Pron)))))
LangEng: many , such that John , now , here would have become older , seen would be some of us
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (DetNP (DetQuant (PossPron it_Pron) NumPl)) (AdvVP UseCopula here_Adv))
LangEng: its hadn't been here
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (CountNP (DetQuant DefArt (NumCard (NumDigits (IIDig D_4 (IIDig D_5 (IIDig D_8 (IDig D_5))))))) (DetNP (DetQuant IndefArt (NumCard (NumDigits (IDig D_1)))))) UseCopula)
LangEng: the 4 &+ , &+ 5 &+ 8 &+ 5 of 1 wouldn't have been
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (PPartNP (DetCN every_Det (AdjCN (UseComparA heavy_A) (AdjCN (UseComparA cold_A) (AdjCN (PositA clean_A) (AdvCN (AdvCN (UseN man_N) now_Adv) everywhere_Adv))))) love_V2) (UseComp (CompAdv here_Adv)))
LangEng: every heavier colder clean man now everywhere loved will be here
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (DetNP someSg_Det) (UseV jump_V))
LangEng: some won't have jumped
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePN john_PN) (ComplVS hope_VS (UseCl (TTAnt TCond AAnter) PNeg (PredVP (DetNP (DetQuantOrd this_Quant NumSg (OrdSuperl old_A))) (ComplSlash (Slash3V3 talk_V3 (AdvNP (UsePN paris_PN) everywhere_Adv)) (UsePron she_Pron))))))
LangEng: John will hope that this oldest wouldn't have talked to her about Paris everywhere
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (MassNP (ApposCN (AdvCN (PartNP (PartNP (RelCN (ComplN2 (Use3N3 distance_N3) (UsePron it_Pron)) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP UseCopula))) (RelNP (AdvNP (DetNP someSg_Det) here_Adv) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula)))) (AdvNP (PPartNP (DetCN somePl_Det (UseN woman_N)) have_V2) here_Adv)) (PrepNP from_Prep (MassNP (AdjCN (PositA red_A) (PossNP (UseN dog_N) (UsePron she_Pron)))))) (PredetNP not_Predet (DetNP someSg_Det)))) (UseComp (CompNP (ExtAdvNP (DetNP (DetQuant DefArt NumPl)) everywhere_Adv))))
LangEng: distance to it that would have been of some here , that is , of some women had here from red dog of hers not some hasn't been them , everywhere
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (PredetNP not_Predet (DetCN (DetQuant no_Quant NumSg) (PossNP (RelCN (AdjCN (UseComparA new_A) (UseN2 (ComplN3 distance_N3 (UsePN john_PN)))) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula))) (MassNP (AdjCN (PositA new_A) (AdjCN (UseComparA cold_A) (AdjCN (PositA old_A) (UseN2 father_N2)))))))) (ComplSlash (AdVVPSlash always_AdV (AdVVPSlash always_AdV (Slash2V3 talk_V3 (ExtAdvNP (DetCN someSg_Det (PossNP (UseN fish_N) (DetNP someSg_Det))) (PrepNP in8front_Prep (UsePN john_PN)))))) (ExtAdvNP (RelNP (DetNP someSg_Det) (UseRCl (TTAnt TCond AAnter) PNeg (RelSlash IdRP (SlashVP (PPartNP (UsePron he_Pron) do_V2) (SlashVV want_VV (SlashV2a break_V2)))))) (PrepNP with_Prep (PredetNP not_Predet (MassNP (UseN wine_N)))))))
LangEng: not no newer distance from John that is of new colder old father didn't always always talk to some fish of some , in front of John , about some , that he done wouldn't have wanted to break , with not wine
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (MassNP (RelCN (AdvCN (PartNP (RelCN (UseN sea_N) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP (AdvVP UseCopula everywhere_Adv)))) (RelNP (UsePron it_Pron) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP (AdvVP UseCopula now_Adv))))) (PrepNP in8front_Prep (PredetNP all_Predet (DetCN few_Det (ApposCN (UseN2 father_N2) (UsePN paris_PN)))))) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP (ComplVV want_VV (ComplSlash (SlashVV can_VV (SlashV2a count_V2)) (PPartNP (DetNP somePl_Det) count_V2))))))) (ComplVS fear_VS (UseCl (TTAnt TCond AAnter) PPos (PredVP (RelNP (CountNP (DetQuant (PossPron he_Pron) NumSg) (AdvNP (DetCN (DetQuant no_Quant NumPl) (UseN animal_N)) here_Adv)) (UseRCl (TTAnt TCond ASimul) PPos (RelSlash IdRP (SlashVP (UsePron youSg_Pron) (SlashV2a do_V2))))) (UseComp (CompAP (AdAP too_AdA (UseComparA small_A))))))))
LangEng: sea that won't have been everywhere of it , that is now , in front of all few fathers Paris that wouldn't have wanted to be able to count some counted didn't fear that his of no animals here , that you would do , would have been too smaller
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (AdvNP (CountNP (DetQuant (PossPron youPl_Pron) NumPl) (MassNP (AdjCN (AdjOrd (OrdSuperl cold_A)) (ComplN2 (Use3N3 distance_N3) (DetCN someSg_Det (AdjCN (PositA young_A) (UseN language_N))))))) (PrepNP in8front_Prep (UsePN john_PN))) UseCopula)
LangEng: yours of coldest distance to some young language in front of John won't have been
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP only_Predet (DetNP many_Det)) (UseV jump_V))
LangEng: only many don't jump
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (ExtAdvNP (ExtAdvNP (PredetNP only_Predet (UsePron youSg_Pron)) everywhere_Adv) (PrepNP in_Prep (ExtAdvNP (DetNP every_Det) now_Adv))) (AdvVP (ComplVA become_VA (AdAP so_AdA (AdAP very_AdA (PositA blue_A)))) here_Adv))
LangEng: only you , everywhere , in everything , now , didn't become so very blue here
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (DetNP someSg_Det) (ComplVA become_VA (PositA black_A)))
LangEng: some wouldn't become black
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (ExtAdvNP (UsePron it_Pron) (PrepNP from_Prep (UsePN paris_PN))) (UseComp (CompAdv everywhere_Adv)))
LangEng: it , from Paris , will have been everywhere
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (MassNP (UseN boy_N)) (ComplSlash (AdVVPSlash always_AdV (SlashV2a understand_V2)) (RelNP (PPartNP (DetCN somePl_Det (PartNP (AdvCN (AdvCN (UseN2 father_N2) now_Adv) (PrepNP under_Prep (DetNP every_Det))) (PredetNP all_Predet (UsePN paris_PN)))) kill_V2) (UseRCl (TTAnt TCond ASimul) PPos (RelCl (PredVP (UsePN paris_PN) UseCopula))))))
LangEng: boy had always understood some fathers now under everything of all Paris killed , such that Paris would be
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (PPartNP (DetCN (DetQuantOrd DefArt (NumCard (NumDigits (IDig D_9))) (OrdNumeralSuperl (num (pot3 (pot1as2 (pot0as1 pot01)))) blue_A)) (UseN horse_N)) bite_V2) (AdVVP always_AdV (AdVVP always_AdV (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestVP whoSg_IP UseCopula)))))))
LangEng: the 9 one thousandth bluest horses bitten will always always always have known who hasn't been
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (AdvNP (UsePN john_PN) now_Adv) (AdVVP always_AdV (UseComp (CompAdv everywhere_Adv))))
LangEng: John now had always been everywhere
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (ExtAdvNP (MassNP (AdjCN (PositA good_A) (UseN baby_N))) everywhere_Adv) (AdvVP (ComplVS say_VS (UseCl (TTAnt TFut AAnter) PPos (PredVP (DetCN (DetQuantOrd that_Quant NumSg (OrdDigits (IDig D_4))) (AdjCN (PositA cold_A) (PossNP (UseN2 father_N2) (DetNP someSg_Det)))) UseCopula))) here_Adv))
LangEng: good baby , everywhere , had said here that that 4th cold father of some will have been
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (DetCN (DetQuant no_Quant NumSg) (UseN man_N)) (ComplSlash (AdVVPSlash always_AdV (SlashVV must_VV (SlashVV can8know_VV (AdVVPSlash always_AdV (SlashVV must_VV (Slash3V3 talk_V3 (UsePN john_PN))))))) (PredetNP all_Predet (RelNP (UsePN paris_PN) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP (ComplVA become_VA (AdAP almost_AdA (UseComparA new_A)))))))))
LangEng: no man mustn't always to all Paris , that wouldn't have become almost newer , be able to always have to talk about John
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (ExtAdvNP (RelNP (CountNP many_Det (UsePN paris_PN)) (UseRCl (TTAnt TCond ASimul) PPos (RelSlash IdRP (SlashVP (DetNP (DetQuant (PossPron youSg_Pron) NumPl)) (AdVVPSlash always_AdV (SlashV2a break_V2)))))) everywhere_Adv) (UseComp (CompAdv everywhere_Adv)))
LangEng: many of Paris , that yours would always break , everywhere , were everywhere
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (MassNP (ApposCN (UseN apple_N) (CountNP many_Det (UsePron he_Pron)))) (ComplVA become_VA (AdjOrd (OrdSuperl yellow_A))))
LangEng: apple many of him becomes most yellow
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (PPartNP (MassNP (UseN friend_N)) bite_V2) (ComplVA become_VA (AdAP so_AdA (AdAP too_AdA (UseComparA yellow_A)))))
LangEng: friend bitten hasn't become so too more yellow
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (RelNP (RelNP (ExtAdvNP (PPartNP (DetCN every_Det (ComplN2 (Use3N3 distance_N3) (ExtAdvNP (UsePron it_Pron) everywhere_Adv))) teach_V2) everywhere_Adv) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PPos (QuestIComp (CompIP whoPl_IP) (UsePN paris_PN))))))) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (UseComp (CompNP (UsePron youSg_Pron)))))) (AdVVP always_AdV (UseComp (CompAdv everywhere_Adv))))
LangEng: every distance to it , everywhere , taught , everywhere , that doesn't know who Paris has been , that won't be you , hasn't always been everywhere
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (RelNP (AdvNP (MassNP (UseN2 (ComplN3 distance_N3 (CountNP few_Det (CountNP somePl_Det (UsePN john_PN)))))) now_Adv) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (UseV run_V)))) (ComplSlash (SlashVV must_VV (Slash2V3 sell_V3 (MassNP (PartNP (ComplN2 father_N2 (UsePron we_Pron)) (RelNP (AdvNP (UsePN paris_PN) now_Adv) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP UseCopula))))))) (ExtAdvNP (PredetNP most_Predet (UsePN john_PN)) (PrepNP in8front_Prep (ExtAdvNP (RelNP (PPartNP (PPartNP (UsePron it_Pron) have_V2) read_V2) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP (AdVVP always_AdV UseCopula)))) here_Adv)))))
LangEng: distance from few of some of John now , that would run , would have to sell father of us of Paris now , that had been , to most John , in front of it had read , that was always , here
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (MassNP (RelCN (UseN water_N) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP (ComplVA become_VA (AdjOrd (OrdSuperl warm_A))))))) (ComplSlash (Slash2V3 talk_V3 (DetCN every_Det (PossNP (ApposCN (PossNP (AdvCN (UseN animal_N) now_Adv) (DetNP somePl_Det)) (MassNP (UseN2 father_N2))) (PredetNP most_Predet (ExtAdvNP (ExtAdvNP (UsePN paris_PN) everywhere_Adv) everywhere_Adv))))) (PPartNP (PredetNP all_Predet (MassNP (AdvCN (RelCN (AdjCN (UseComparA young_A) (UseN2 father_N2)) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP UseCopula))) here_Adv))) break_V2)))
LangEng: water that will have become warmest won't have talked to every animal now of some father of most Paris , everywhere , everywhere , about all younger father that has been here broken
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetCN someSg_Det (RelCN (AdvCN (RelCN (PartNP (UseN2 (Use3N3 distance_N3)) (DetCN someSg_Det (UseN woman_N))) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP (AdvVP UseCopula everywhere_Adv)))) (PrepNP with_Prep (PredetNP only_Predet (DetCN (DetQuant that_Quant NumPl) (ApposCN (UseN2 father_N2) (UsePN paris_PN)))))) (UseRCl (TTAnt TFut ASimul) PPos (RelSlash IdRP (SlashVP (PredetNP only_Predet (ExtAdvNP (UsePN paris_PN) now_Adv)) (AdVVPSlash always_AdV (SlashV2a close_V2))))))) (ComplSlash (Slash2V3 send_V3 (PredetNP not_Predet (PPartNP (DetNP (DetQuantOrd that_Quant NumSg (OrdSuperl white_A))) do_V2))) (RelNP (DetCN (DetQuant no_Quant NumSg) (ApposCN (ApposCN (ApposCN (AdvCN (UseN2 father_N2) now_Adv) (UsePN paris_PN)) (AdvNP (MassNP (UseN computer_N)) (PrepNP to_Prep (UsePN john_PN)))) (UsePN john_PN))) (UseRCl (TTAnt TCond ASimul) PNeg (RelCl (PredVP (CountNP few_Det (AdvNP (UsePron i_Pron) everywhere_Adv)) (ComplVA become_VA (UseComparA clean_A))))))))
LangEng: some distance of some woman that won't have been everywhere with only those fathers Paris that only Paris , now , will always close would have sent not that whitest done to no father now Paris computer to John John , such that few of me everywhere wouldn't become cleaner
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePron youPl_Pron) UseCopula)
LangEng: you hadn't been
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (AdvNP (RelNP (PPartNP (UsePN paris_PN) have_V2) (UseRCl (TTAnt TPres ASimul) PPos (RelCl (PredVP (AdvNP (ExtAdvNP (UsePron youPl_Pron) everywhere_Adv) everywhere_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestVP whatPl_IP UseCopula))))))) (PrepNP from_Prep (ExtAdvNP (CountNP somePl_Det (ExtAdvNP (MassNP (AdvCN (UseN city_N) here_Adv)) everywhere_Adv)) (PrepNP with_Prep (CountNP few_Det (AdvNP (PredetNP not_Predet (UsePron she_Pron)) now_Adv)))))) (UseComp (CompCN (PossNP (ApposCN (UseN man_N) (DetCN (DetQuantOrd (PossPron it_Pron) NumSg (OrdSuperl red_A)) (PossNP (PartNP (UseN water_N) (UsePron it_Pron)) (UsePron she_Pron)))) (AdvNP (PPartNP (AdvNP (UsePN john_PN) now_Adv) teach_V2) (PrepNP on_Prep (PPartNP (CountNP few_Det (DetNP someSg_Det)) fear_V2)))))))
LangEng: Paris had , such that you , everywhere , everywhere know what wouldn't have been , from some of city here , everywhere , with few of not her now , wouldn't be a man its reddest water of it of hers of John now taught on few of some feared
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePN john_PN) (ComplVV want_VV UseCopula))
LangEng: John wouldn't have wanted to be
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (CountNP (DetQuant IndefArt NumSg) (DetCN (DetQuantOrd no_Quant NumSg (OrdNumeralSuperl (num (pot2as3 (pot2 pot01))) red_A)) (RelCN (PartNP (ComplN2 (ComplN3 distance_N3 (PredetNP all_Predet (UsePron we_Pron))) (MassNP (ComplN2 (Use2N3 distance_N3) (UsePN paris_PN)))) (CountNP few_Det (MassNP (PossNP (UseN sea_N) (DetNP every_Det))))) (UseRCl (TTAnt TPast ASimul) PPos (RelSlash IdRP (SlashVP (CountNP few_Det (UsePron youPl_Pron)) (SlashVV must_VV (SlashV2a read_V2)))))))) (ComplVV can_VV (ComplVS fear_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (RelNP (DetNP every_Det) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP (ComplVV can_VV UseCopula)))) (UseComp (CompAP (PositA new_A))))))))
LangEng: one of no one hundredth reddest distance from all us to distance from Paris of few of sea of everything that few of you had to read wouldn't be able to fear that everything , that hasn't been able to be , has been new
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (PPartNP (MassNP (UseN bird_N)) bite_V2) (ComplVV can8know_VV (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PPos (QuestSlash (IdetIP how8many_IDet) (SlashVP (ExtAdvNP (AdvNP (DetNP few_Det) everywhere_Adv) here_Adv) (Slash2V3 add_V3 (UsePN paris_PN))))))))
LangEng: bird bitten won't be able to know how many few everywhere , here , will add Paris to
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (PPartNP (CountNP many_Det (DetCN (DetQuant no_Quant (NumCard (AdNum almost_AdN (NumDigits (IDig D_0))))) (RelCN (PossNP (ComplN2 (ComplN3 distance_N3 (UsePron he_Pron)) (UsePron she_Pron)) (UsePN john_PN)) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP (UseV walk_V)))))) break_V2) (ComplVS fear_VS (UseCl (TTAnt TPres AAnter) PNeg (PredVP (MassNP (RelCN (AdvCN (UseN woman_N) (PrepNP after_Prep (UsePron she_Pron))) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (AdvVP UseCopula now_Adv))))) (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PPos (QuestIAdv why_IAdv (PredVP (UsePN paris_PN) (AdVVP always_AdV UseCopula)))))))))
LangEng: many of no almost 0 distances from him to her of John that hadn't walked broken haven't feared that woman after her that won't be now hasn't known why Paris will always be
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePN paris_PN) (ComplVA become_VA (PositA clean_A)))
LangEng: Paris will become clean
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (RelNP (RelNP (MassNP (PartNP (AdvCN (ApposCN (AdjCN (UseComparA white_A) (UseN2 father_N2)) (DetNP many_Det)) (PrepNP from_Prep (DetCN someSg_Det (UseN baby_N)))) (PPartNP (DetCN someSg_Det (UseN2 father_N2)) find_V2))) (UseRCl (TTAnt TPast ASimul) PPos (RelCl (PredVP (DetCN (DetQuant IndefArt NumSg) (UseN2 father_N2)) (ComplVV can_VV (ComplVV must_VV UseCopula)))))) (UseRCl (TTAnt TFut AAnter) PPos (RelSlash IdRP (SlashVP (DetCN someSg_Det (PartNP (PossNP (UseN fire_N) (UsePron he_Pron)) (DetCN somePl_Det (UseN2 father_N2)))) (AdVVPSlash always_AdV (Slash2V3 add_V3 (PPartNP (UsePron she_Pron) understand_V2))))))) (UseComp (CompCN (AdvCN (UseN river_N) now_Adv))))
LangEng: whiter father many from some baby of some father found , such that a father could have to be , that some fire of his of some fathers will always have added her understood to , wouldn't have been a river now
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePron i_Pron) (ComplVA become_VA (AdAP very_AdA (UseComparA white_A))))
LangEng: I hadn't become very whiter
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (RelNP (MassNP (PartNP (ApposCN (UseN child_N) (PredetNP only_Predet (MassNP (AdjCN (PositA good_A) (UseN2 father_N2))))) (ExtAdvNP (MassNP (ApposCN (PossNP (UseN2 father_N2) (DetNP somePl_Det)) (MassNP (UseN grammar_N)))) everywhere_Adv))) (UseRCl (TTAnt TFut AAnter) PNeg (RelCl (PredVP (MassNP (ApposCN (PartNP (UseN horse_N) (DetNP many_Det)) (UsePN john_PN))) (AdVVP always_AdV UseCopula))))) (UseComp (CompCN (PartNP (ApposCN (UseN fire_N) (RelNP (DetCN (DetQuantOrd this_Quant NumSg (OrdSuperl old_A)) (ApposCN (UseN2 father_N2) (UsePron she_Pron))) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP UseCopula)))) (PPartNP (UsePN john_PN) cut_V2)))))
LangEng: child only good father of father of some grammar , everywhere , such that horse of many John won't always have been , would be a fire this oldest father she , that had been , of John cut
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (MassNP (ComplN2 (ComplN3 distance_N3 (UsePN paris_PN)) (UsePN paris_PN))) UseCopula)
LangEng: distance from Paris to Paris will have been
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (MassNP (UseN2 (ComplN3 distance_N3 (DetNP (DetQuant DefArt NumPl))))) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestCl (PredVP (DetCN someSg_Det (PartNP (AdjCN (UseComparA clean_A) (UseN2 father_N2)) (DetNP every_Det))) (ComplVV can8know_VV (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PNeg (QuestVP whoPl_IP UseCopula)))))))))
LangEng: distance from them knew if some cleaner father of everything won't have been able to know who hadn't been
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (DetCN somePl_Det (PossNP (PossNP (UseN2 (Use2N3 distance_N3)) (AdvNP (AdvNP (DetNP every_Det) now_Adv) here_Adv)) (AdvNP (DetNP somePl_Det) here_Adv))) (ComplSlash (AdvVPSlash (AdVVPSlash always_AdV (Slash2V3 send_V3 (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP (AdvVP UseCopula here_Adv)))))) everywhere_Adv) (ExtAdvNP (DetCN somePl_Det (AdjCN (AdAP almost_AdA (AdAP very_AdA (AdAP almost_AdA (PositA ready_A)))) (UseN2 (Use2N3 distance_N3)))) everywhere_Adv)))
LangEng: some distances of everything now here of some here have always sent Paris , that was here , everywhere to some almost very almost ready distances , everywhere
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (PPartNP (CountNP someSg_Det (RelNP (DetNP (DetQuant no_Quant (NumCard (NumDigits (IDig D_3))))) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PPos (QuestVP whatSg_IP UseCopula))))))) break_V2) UseCopula)
LangEng: some of no 3 , that knew what had been , broken will have been
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PPartNP (PPartNP (PredetNP most_Predet (PredetNP not_Predet (DetNP few_Det))) love_V2) see_V2) (AdvVP UseCopula now_Adv))
LangEng: most not few loved seen hadn't been now
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePron youPl_Pron) (ComplSlash (SlashVV want_VV (Slash2V3 talk_V3 (UsePron she_Pron))) (CountNP somePl_Det (AdvNP (PredetNP not_Predet (RelNP (MassNP (AdjCN (PositA green_A) (UseN fire_N))) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (AdVVP always_AdV UseCopula))))) (PrepNP behind_Prep (ExtAdvNP (CountNP every_Det (UsePron he_Pron)) everywhere_Adv))))))
LangEng: you will want to talk to her about some of not green fire , that wouldn't always be , behind everything of him , everywhere
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (RelNP (RelNP (CountNP every_Det (PredetNP all_Predet (DetCN (DetQuant that_Quant NumPl) (UseN2 (Use2N3 distance_N3))))) (UseRCl (TTAnt TCond ASimul) PPos (RelCl (PredVP (UsePN john_PN) UseCopula)))) (UseRCl (TTAnt TPast AAnter) PPos (RelCl (PredVP (UsePN paris_PN) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestVP (IdetIP how8many_IDet) (UseV come_V)))))))) (ComplSlash (AdVVPSlash always_AdV (SlashV2a close_V2)) (DetNP somePl_Det)))
LangEng: everything of all those distances , such that John would be , such that Paris had known how many came , will always have closed some
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (PredetNP most_Predet (MassNP (UseN computer_N))) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestVP whoSg_IP (ComplVA become_VA (UseComparA hot_A))))))
LangEng: most computer knows who hasn't become hotter
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (ExtAdvNP (ExtAdvNP (UsePron i_Pron) (PrepNP in_Prep (DetNP many_Det))) here_Adv) (ComplVV can8know_VV UseCopula))
LangEng: I , in many , here , hadn't been able to be
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePN john_PN) (AdVVP always_AdV UseCopula))
LangEng: John is always
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePN paris_PN) (ComplVA become_VA (AdAP so_AdA (UseComparA blue_A))))
LangEng: Paris hadn't become so bluer
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (MassNP (AdvCN (PartNP (PartNP (ApposCN (ComplN2 (Use2N3 distance_N3) (DetCN someSg_Det (UseN man_N))) (DetCN someSg_Det (PossNP (UseN2 father_N2) (UsePron he_Pron)))) (CountNP someSg_Det (PPartNP (AdvNP (DetNP somePl_Det) now_Adv) buy_V2))) (ExtAdvNP (UsePN paris_PN) now_Adv)) here_Adv)) (ComplVS say_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (CountNP somePl_Det (DetCN many_Det (PossNP (UseN cat_N) (MassNP (UseN house_N))))) (ComplVV can8know_VV (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_4)))))))))
LangEng: distance from some man some father of his of some of some now bought of Paris , now , here has said that some of many cats of house have been able to become 4th
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PPartNP (UsePron he_Pron) cut_V2) (AdVVP always_AdV (ComplVV can_VV (ComplVS fear_VS (UseCl (TTAnt TPast AAnter) PNeg (PredVP (PPartNP (DetCN someSg_Det (UseN2 father_N2)) cut_V2) (UseComp (CompNP (UsePron i_Pron)))))))))
LangEng: he cut wouldn't always have been able to fear that some father cut hadn't been me
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (AdvNP (UsePN paris_PN) here_Adv) (AdVVP always_AdV (ComplSlash (SlashV2a buy_V2) (ExtAdvNP (DetCN every_Det (RelCN (ComplN2 (Use3N3 distance_N3) (ExtAdvNP (UsePron youSg_Pron) everywhere_Adv)) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP UseCopula)))) (PrepNP between_Prep (PPartNP (PPartNP (CountNP (DetQuant this_Quant NumSg) (DetNP few_Det)) eat_V2) find_V2))))))
LangEng: Paris here didn't always buy every distance to you , everywhere , that hasn't been , between this of few eaten found
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PPartNP (PredetNP all_Predet (UsePN john_PN)) break_V2) (ComplSlash (SlashVV want_VV (SlashV2a read_V2)) (UsePron it_Pron)))
LangEng: all John broken doesn't want to read it
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePron youSg_Pron) (UseComp (CompCN (UseN2 father_N2))))
LangEng: you hadn't been a father
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (ExtAdvNP (CountNP someSg_Det (RelNP (PredetNP only_Predet (ExtAdvNP (ExtAdvNP (UsePron youSg_Pron) (PrepNP on_Prep (UsePron it_Pron))) now_Adv)) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (AdvVP (AdVVP always_AdV (AdvVP UseCopula now_Adv)) (PrepNP behind_Prep (UsePN john_PN))))))) here_Adv) (ComplVV can_VV (ComplVV must_VV (ComplVS know_VS (UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePron she_Pron) (ComplVV must_VV UseCopula)))))))
LangEng: some of only you , on it , now , that won't always be now behind John , here , wouldn't be able to have to know that she wouldn't have had to be
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP most_Predet (UsePron youSg_Pron)) (UseV live_V))
LangEng: most you don't live
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (DetNP many_Det) (ComplVS say_VS (UseCl (TTAnt TPres AAnter) PNeg (PredVP (CountNP (DetQuant no_Quant NumSg) (PredetNP all_Predet (CountNP (DetQuant DefArt NumPl) (PredetNP most_Predet (DetNP someSg_Det))))) (ComplSlash (SlashV2a cut_V2) (AdvNP (AdvNP (UsePron youSg_Pron) everywhere_Adv) now_Adv))))))
LangEng: many would say that none of all them of most some hasn't cut you everywhere now
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (AdvNP (ExtAdvNP (ExtAdvNP (PPartNP (RelNP (MassNP (ComplN2 father_N2 (DetNP somePl_Det))) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (AdVVP always_AdV UseCopula)))) buy_V2) (PrepNP on_Prep (UsePN paris_PN))) now_Adv) here_Adv) (ComplVA become_VA (PositA yellow_A)))
LangEng: father of some , that wouldn't always be , bought , on Paris , now , here had become yellow
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (RelNP (CountNP every_Det (UsePN john_PN)) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (ComplVA become_VA (UseComparA green_A))))) (ComplSlash (AdvVPSlash (AdvVPSlash (SlashVV can_VV (SlashV2a wait_V2)) now_Adv) here_Adv) (AdvNP (ExtAdvNP (AdvNP (MassNP (ApposCN (PossNP (UseN city_N) (UsePN john_PN)) (DetNP somePl_Det))) (PrepNP with_Prep (UsePN paris_PN))) here_Adv) now_Adv)))
LangEng: everything of John , that wouldn't become greener , can wait now here for city of John some with Paris , here , now
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (MassNP (ComplN2 father_N2 (PredetNP most_Predet (UsePron youPl_Pron)))) (AdvVP (ComplVA become_VA (UseComparA warm_A)) here_Adv))
LangEng: father of most you hadn't become warmer here
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePN paris_PN) (ComplVS say_VS (UseCl (TTAnt TPres ASimul) PPos (PredVP (AdvNP (CountNP someSg_Det (PredetNP most_Predet (CountNP (DetQuant IndefArt NumSg) (DetNP every_Det)))) now_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PNeg (QuestIComp (CompIP (IdetIP how8many_IDet)) (DetNP somePl_Det))))))))
LangEng: Paris wouldn't have said that some of most one of everything now knows how many some weren't
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePron she_Pron) (ComplVV can_VV (ComplSlash (AdVVPSlash always_AdV (Slash3V3 sell_V3 (AdvNP (MassNP (PartNP (UseN computer_N) (UsePron he_Pron))) (PrepNP under_Prep (MassNP (UseN2 father_N2)))))) (DetNP somePl_Det))))
LangEng: she will have been able to always sell some to computer of him under father
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (PredetNP only_Predet (DetCN many_Det (UseN2 (Use2N3 distance_N3)))) (ComplVV can_VV (AdVVP always_AdV UseCopula)))
LangEng: only many distances have been able to always be
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (RelNP (AdvNP (CountNP somePl_Det (AdvNP (UsePN paris_PN) here_Adv)) now_Adv) (UseRCl (TTAnt TCond AAnter) PNeg (RelCl (PredVP (AdvNP (CountNP few_Det (PredetNP all_Predet (UsePron he_Pron))) everywhere_Adv) (ComplVS know_VS (UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePN paris_PN) (AdvVP UseCopula now_Adv)))))))) (ComplVS know_VS (UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePron he_Pron) (ComplVA become_VA (PositA new_A))))))
LangEng: some of Paris here now , such that few of all him everywhere wouldn't have known that Paris hasn't been now , have known that he wouldn't have become new
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePN paris_PN) (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PPos (QuestSlash whatSg_IP (SlashVP (CountNP someSg_Det (CountNP (DetQuant DefArt NumPl) (PPartNP (DetNP someSg_Det) find_V2))) (Slash3V3 give_V3 (UsePron youSg_Pron)))))))
LangEng: Paris knows what some of them of some found had given you
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PPartNP (AdvNP (MassNP (ComplN2 (Use2N3 distance_N3) (UsePron youSg_Pron))) everywhere_Adv) read_V2) (ComplVS say_VS (UseCl (TTAnt TPast AAnter) PNeg (PredVP (MassNP (PartNP (AdvCN (ComplN2 (Use2N3 distance_N3) (UsePN john_PN)) now_Adv) (RelNP (DetNP few_Det) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP UseCopula))))) (ComplVV must_VV (ComplSlash (AdvVPSlash (SlashV2a have_V2) (PrepNP in_Prep (UsePN paris_PN))) (UsePron youPl_Pron)))))))
LangEng: distance from you everywhere read hadn't said that distance from John now of few , that will have been , hadn't had to have in Paris you
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (DetNP many_Det) (ComplVA become_VA (UseComparA big_A)))
LangEng: many had become bigger
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (PPartNP (PredetNP all_Predet (PPartNP (ExtAdvNP (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP (ComplVV want_VV UseCopula)))) (PrepNP in_Prep (MassNP (AdjCN (PositA blue_A) (UseN blood_N))))) find_V2)) drink_V2) (AdvVP UseCopula everywhere_Adv))
LangEng: all you , that don't want to be , in blue blood , found drunk won't be everywhere
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (DetNP every_Det) (ComplVS fear_VS (UseCl (TTAnt TPres AAnter) PNeg (PredVP (PPartNP (AdvNP (DetNP many_Det) here_Adv) kill_V2) (AdvVP (ComplVA become_VA (UseComparA cold_A)) (PrepNP from_Prep (CountNP (DetQuantOrd DefArt NumPl (OrdSuperl clean_A)) (UsePron we_Pron))))))))
LangEng: everything hadn't feared that many here killed haven't become colder from the cleanest of us
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (ExtAdvNP (UsePN john_PN) here_Adv) (AdvVP (AdvVP (AdVVP always_AdV (AdVVP always_AdV (ComplVS fear_VS (UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePN paris_PN) UseCopula))))) everywhere_Adv) here_Adv))
LangEng: John , here , always always feared everywhere here that Paris will be
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePN john_PN) (ComplVA become_VA (UseComparA hot_A)))
LangEng: John doesn't become hotter
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (AdvNP (ExtAdvNP (PPartNP (UsePron we_Pron) see_V2) here_Adv) here_Adv) (ComplVV want_VV (UseComp (CompNP (RelNP (AdvNP (ExtAdvNP (PPartNP (DetNP somePl_Det) teach_V2) now_Adv) (PrepNP in8front_Prep (MassNP (UseN bread_N)))) (UseRCl (TTAnt TFut AAnter) PPos (RelCl (PredVP (DetNP somePl_Det) (AdVVP always_AdV UseCopula)))))))))
LangEng: we seen , here , here wouldn't want to be some taught , now , in front of bread , such that some will always have been
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (AdvNP (UsePron youSg_Pron) (PrepNP from_Prep (PPartNP (DetNP someSg_Det) count_V2))) UseCopula)
LangEng: you from some counted haven't been
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePN paris_PN) (ComplSlash (SlashV2a kill_V2) (UsePron she_Pron)))
LangEng: Paris had killed her
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (PPartNP (ExtAdvNP (UsePN paris_PN) (PrepNP after_Prep (DetCN (DetQuant this_Quant (NumCard (NumDigits (IDig D_7)))) (AdvCN (UseN2 (Use2N3 distance_N3)) here_Adv)))) bite_V2) (ComplSlash (AdVVPSlash always_AdV (SlashV2a fear_V2)) (UsePron youPl_Pron)))
LangEng: Paris , after these 7 distances here , bitten had always feared you
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (PPartNP (ExtAdvNP (RelNP (DetNP somePl_Det) (UseRCl (TTAnt TFut ASimul) PPos (RelSlash IdRP (SlashVP (PredetNP all_Predet (UsePN paris_PN)) (SlashVV must_VV (SlashV2a cut_V2)))))) (PrepNP in8front_Prep (PredetNP not_Predet (ExtAdvNP (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP UseCopula))) (PrepNP to_Prep (CountNP every_Det (UsePN paris_PN))))))) read_V2) (ComplVA become_VA (PositA heavy_A)))
LangEng: some , that all Paris will have to cut , in front of not you , that were , to everything of Paris , read wouldn't become heavy
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (PredetNP most_Predet (DetNP somePl_Det)) (ComplSlash (AdVVPSlash always_AdV (Slash2V3 talk_V3 (DetNP somePl_Det))) (UsePron he_Pron)))
LangEng: most some haven't always talked to some about him
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (AdvNP (PredetNP only_Predet (DetCN every_Det (ApposCN (AdvCN (PossNP (ComplN2 father_N2 (UsePron he_Pron)) (PredetNP not_Predet (UsePron i_Pron))) everywhere_Adv) (RelNP (RelNP (DetNP someSg_Det) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP UseCopula))) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP UseCopula)))))) here_Adv) (ComplVV can8know_VV (ComplVA become_VA (UseComparA heavy_A))))
LangEng: only every father of him of not mine everywhere some , that wouldn't be , that would have been , here would be able to become heavier
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (MassNP (ApposCN (ComplN2 (ComplN3 distance_N3 (ExtAdvNP (RelNP (AdvNP (UsePron youSg_Pron) now_Adv) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP UseCopula))) now_Adv)) (MassNP (AdjCN (PositA black_A) (UseN2 father_N2)))) (ExtAdvNP (PPartNP (PredetNP all_Predet (DetCN somePl_Det (ApposCN (UseN bird_N) (DetNP many_Det)))) read_V2) here_Adv))) (ComplVS hope_VS (UseCl (TTAnt TFut AAnter) PPos (PredVP (DetNP somePl_Det) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PPos (QuestIComp (CompIAdv how_IAdv) (PPartNP (UsePron youSg_Pron) teach_V2))))))))
LangEng: distance from you now , that have been , now , to black father all some birds many read , here , won't have hoped that some will have known how you taught have been
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (AdvNP (ExtAdvNP (PPartNP (MassNP (ComplN2 (Use3N3 distance_N3) (AdvNP (AdvNP (DetNP somePl_Det) here_Adv) here_Adv))) count_V2) now_Adv) here_Adv) (ComplVA become_VA (AdAP very_AdA (AdAP so_AdA (UseComparA blue_A)))))
LangEng: distance to some here here counted , now , here hasn't become very so bluer
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (RelNP (RelNP (RelNP (PredetNP not_Predet (RelNP (DetCN every_Det (ComplN2 (Use2N3 distance_N3) (UsePron i_Pron))) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (UseV come_V))))) (UseRCl (TTAnt TPast AAnter) PNeg (RelSlash IdRP (SlashVP (UsePN paris_PN) (AdVVPSlash always_AdV (SlashV2a wait_V2)))))) (UseRCl (TTAnt TPres ASimul) PNeg (RelSlash IdRP (SlashVP (UsePron youPl_Pron) (AdvVPSlash (Slash3V3 add_V3 (DetNP someSg_Det)) everywhere_Adv))))) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (AdVVP always_AdV (ComplVA become_VA (PositA ready_A)))))) UseCopula)
LangEng: not every distance from me , that wouldn't come , that Paris hadn't always waited for , that you don't add to some everywhere , that has always become ready , wouldn't have been
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (RelNP (UsePN john_PN) (UseRCl (TTAnt TPres ASimul) PPos (RelCl (PredVP (AdvNP (CountNP someSg_Det (UsePN paris_PN)) (PrepNP to_Prep (DetNP someSg_Det))) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestIComp (CompIP whoSg_IP) (UsePN paris_PN)))))))) (UseV play_V))
LangEng: John , such that some of Paris to some knows who Paris was , played
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (MassNP (RelCN (RelCN (UseN wine_N) (UseRCl (TTAnt TPast AAnter) PPos (RelCl (PredVP (AdvNP (UsePN john_PN) here_Adv) (ComplVV can8know_VV UseCopula))))) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PNeg (QuestVP (IdetIP how8many_IDet) (ComplVV must_VV UseCopula)))))))) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestIComp (CompIAdv why_IAdv) (MassNP (ApposCN (PossNP (PartNP (UseN house_N) (UsePN paris_PN)) (DetCN someSg_Det (UseN baby_N))) (ExtAdvNP (PredetNP not_Predet (UsePron youSg_Pron)) here_Adv)))))))
LangEng: wine such that John here had been able to be that won't know how many hadn't to be didn't know why house of Paris of some baby not you , here , won't have been
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (DetCN many_Det (PossNP (AdvCN (AdjCN (AdjOrd (OrdDigits (IIDig D_5 (IDig D_4)))) (ComplN2 (Use3N3 distance_N3) (DetCN (DetQuant no_Quant NumSg) (UseN2 (Use2N3 distance_N3))))) here_Adv) (AdvNP (AdvNP (PPartNP (RelNP (DetNP (DetQuant this_Quant NumPl)) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP UseCopula))) wait_V2) everywhere_Adv) here_Adv))) (ComplVS hope_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (RelNP (PPartNP (CountNP (DetQuant IndefArt NumSg) (UsePron youPl_Pron)) find_V2) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (AdVVP always_AdV (AdVVP always_AdV UseCopula))))) UseCopula))))
LangEng: many 5 &+ 4th distances to no distance here of these , that would be , waited everywhere here will have hoped that one of you found , that will always always be , has been
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePN paris_PN) UseCopula)
LangEng: Paris is
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (DetCN somePl_Det (ComplN2 (Use3N3 distance_N3) (AdvNP (UsePron youSg_Pron) here_Adv))) UseCopula)
LangEng: some distances to you here wouldn't have been
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (PPartNP (ExtAdvNP (ExtAdvNP (UsePN paris_PN) now_Adv) everywhere_Adv) fear_V2) (AdVVP always_AdV (ComplVS know_VS (UseCl (TTAnt TPast AAnter) PPos (PredVP (AdvNP (ExtAdvNP (MassNP (UseN train_N)) (PrepNP after_Prep (UsePron we_Pron))) (PrepNP behind_Prep (DetNP someSg_Det))) (ComplVA become_VA (UseComparA good_A)))))))
LangEng: Paris , now , everywhere , feared will always have known that train , after us , behind some had become better
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (ExtAdvNP (DetNP few_Det) now_Adv) UseCopula)
LangEng: few , now , have been
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (RelNP (MassNP (PartNP (RelCN (PartNP (PartNP (UseN milk_N) (CountNP someSg_Det (DetNP few_Det))) (RelNP (PPartNP (UsePron i_Pron) buy_V2) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP UseCopula)))) (UseRCl (TTAnt TCond ASimul) PNeg (RelSlash IdRP (SlashVP (UsePN paris_PN) (SlashV2a drink_V2))))) (DetCN (DetQuantOrd (PossPron he_Pron) NumPl (OrdDigits (IDig D_3))) (RelCN (AdvCN (ComplN2 (Use3N3 distance_N3) (UsePN paris_PN)) here_Adv) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (AdvVP UseCopula now_Adv))))))) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestIComp (CompIAdv why_IAdv) (DetCN (DetQuant IndefArt NumPl) (UseN ship_N)))))))) (UseV go_V))
LangEng: milk of some of few of me bought , that would be , that Paris wouldn't drink of his 3rd distances to Paris here that won't be now , that didn't know why ships were , will have gone
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePN john_PN) (ComplVS know_VS (UseCl (TTAnt TPast ASimul) PPos (PredVP (ExtAdvNP (AdvNP (UsePron i_Pron) here_Adv) everywhere_Adv) (AdVVP always_AdV (ComplVS hope_VS (UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePron he_Pron) (ComplVV can_VV UseCopula)))))))))
LangEng: John wouldn't know that I here , everywhere , always hoped that he had been able to be
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (DetCN someSg_Det (ComplN2 father_N2 (ExtAdvNP (DetNP every_Det) now_Adv))) (UseV swim_V))
LangEng: some father of everything , now , wouldn't have swum
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (UsePN paris_PN) (UseV run_V))
LangEng: Paris would have run
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (CountNP every_Det (PredetNP not_Predet (RelNP (AdvNP (ExtAdvNP (UsePron she_Pron) (PrepNP with_Prep (AdvNP (UsePN john_PN) here_Adv))) (PrepNP from_Prep (DetCN few_Det (AdvCN (UseN sea_N) everywhere_Adv)))) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PNeg (QuestVP whatSg_IP UseCopula)))))))) (ComplVS fear_VS (UseCl (TTAnt TCond AAnter) PPos (PredVP (DetNP few_Det) (ComplVA become_VA (UseComparA good_A))))))
LangEng: everything of not her , with John here , from few seas everywhere , that would have known what won't be , won't fear that few would have become better
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (DetCN someSg_Det (PossNP (PossNP (UseN car_N) (ExtAdvNP (UsePN paris_PN) (PrepNP in_Prep (DetNP somePl_Det)))) (CountNP (DetQuant (PossPron she_Pron) (NumCard (NumDigits (IIDig D_5 (IDig D_2))))) (ExtAdvNP (MassNP (PossNP (PossNP (UseN milk_N) (DetNP someSg_Det)) (UsePN john_PN))) here_Adv)))) (AdVVP always_AdV (ComplSlash (SlashV2a kill_V2) (DetNP few_Det))))
LangEng: some car of Paris , in some , of her 5 &+ 2 of milk of some of John , here , always kills few
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (MassNP (AdjCN (AdAP almost_AdA (AdjOrd (OrdNumeralSuperl (num (pot3 (pot1as2 pot111))) small_A))) (ApposCN (RelCN (ApposCN (PartNP (UseN house_N) (CountNP many_Det (UsePron i_Pron))) (RelNP (CountNP (DetQuant IndefArt NumSg) (UsePron i_Pron)) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP UseCopula)))) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (AdvVP (ComplVV can_VV UseCopula) here_Adv)))) (UsePron we_Pron)))) (AdVVP always_AdV (UseComp (CompAP (AdAP so_AdA (PositA big_A))))))
LangEng: almost eleven thousandth smallest house of many of me one of me , that won't be , that will be able to be here we isn't always so big
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (PPartNP (MassNP (UseN2 (ComplN3 distance_N3 (ExtAdvNP (UsePron youSg_Pron) here_Adv)))) love_V2) UseCopula)
LangEng: distance from you , here , loved would be
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (PredetNP all_Predet (RelNP (DetCN someSg_Det (UseN2 father_N2)) (UseRCl (TTAnt TFut ASimul) PPos (RelCl (PredVP (MassNP (UseN2 father_N2)) (UseV come_V)))))) UseCopula)
LangEng: all some father , such that father will come , will have been
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (DetNP every_Det) (AdvVP UseCopula (PrepNP from_Prep (PredetNP all_Predet (UsePN paris_PN)))))
LangEng: everything would be from all Paris
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (DetCN somePl_Det (UseN bird_N)) (AdVVP always_AdV (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot2as3 (pot2plus pot01 (pot1to19 n6)))) yellow_A)))))
LangEng: some birds don't always become one hundred and sixteenth most yellow
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (DetNP (DetQuantOrd that_Quant NumPl (OrdNumeralSuperl (num (pot3 (pot2plus pot01 (pot1plus n4 pot01)))) young_A))) (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestSlash (IdetIP how8many_IDet) (SlashVP (DetCN many_Det (AdvCN (UseN2 father_N2) now_Adv)) (SlashV2a cut_V2))))) everywhere_Adv))
LangEng: those one hundred and forty &+ - &+ one thousandth youngest will have known everywhere how many many fathers now won't have cut
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (AdvNP (DetCN (DetQuantOrd this_Quant NumSg (OrdDigits (IIDig D_0 (IIDig D_6 (IIDig D_9 (IDig D_9)))))) (ComplN2 (ComplN3 distance_N3 (DetNP many_Det)) (RelNP (UsePron we_Pron) (UseRCl (TTAnt TPres AAnter) PPos (RelCl (PredVP (UsePron youSg_Pron) (AdvVP UseCopula now_Adv))))))) (PrepNP to_Prep (CountNP somePl_Det (UsePron she_Pron)))) (ComplVA become_VA (AdAP very_AdA (PositA warm_A))))
LangEng: this 0 &+ , &+ 6 &+ 9 &+ 9th distance from many to us , such that you have been now , to some of her wouldn't become very warm
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePron we_Pron) (ComplSlash (SlashV2a buy_V2) (DetNP (DetQuantOrd IndefArt NumPl (OrdDigits (IDig D_5))))))
LangEng: we had bought 5th
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePron i_Pron) (ComplVA become_VA (PositA yellow_A)))
LangEng: I hadn't become yellow
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (ExtAdvNP (DetNP few_Det) now_Adv) UseCopula)
LangEng: few , now , weren't
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetNP (DetQuant DefArt (NumCard (AdNum at_least_AdN (NumNumeral (num (pot2as3 (pot1as2 pot110)))))))) (ComplSlash (Slash3V3 give_V3 (ExtAdvNP (MassNP (RelCN (PartNP (PossNP (UseN cat_N) (UsePron i_Pron)) (ExtAdvNP (DetNP many_Det) everywhere_Adv)) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP (ComplVV can_VV UseCopula))))) everywhere_Adv)) (DetNP somePl_Det)))
LangEng: the at least ten won't give some cat of mine of many , everywhere , that could be , everywhere
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetNP somePl_Det) (ComplVS know_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (AdvNP (PPartNP (DetCN somePl_Det (UseN2 (Use2N3 distance_N3))) fear_V2) now_Adv) UseCopula))))
LangEng: some would have known that some distances feared now have been
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePron we_Pron) (UseComp (CompNP (PredetNP not_Predet (CountNP somePl_Det (ExtAdvNP (CountNP somePl_Det (MassNP (UseN2 father_N2))) (PrepNP from_Prep (CountNP many_Det (DetNP every_Det)))))))))
LangEng: we had been not some of some of father , from many of everything
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (CountNP someSg_Det (RelNP (CountNP few_Det (PredetNP not_Predet (PredetNP most_Predet (ExtAdvNP (CountNP somePl_Det (DetNP every_Det)) now_Adv)))) (UseRCl (TTAnt TPast ASimul) PNeg (RelCl (PredVP (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP UseCopula))) (UseV live_V)))))) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestIComp (CompIP whoSg_IP) (CountNP (DetQuantOrd that_Quant (NumCard (NumDigits (IDig D_0))) (OrdDigits (IDig D_2))) (UsePN john_PN))))))
LangEng: some of few of not most some of everything , now , such that you , that won't have been , didn't live , won't know who those 0 2nd of John haven't been
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (ExtAdvNP (AdvNP (DetCN somePl_Det (RelCN (ComplN2 (Use2N3 distance_N3) (DetNP (DetQuant IndefArt NumPl))) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP UseCopula)))) (PrepNP in8front_Prep (UsePN john_PN))) here_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PNeg (QuestIComp (CompIP whoPl_IP) (PPartNP (PPartNP (UsePN paris_PN) cut_V2) break_V2)))))
LangEng: some distances from ones that haven't been in front of John , here , haven't known who Paris cut broken hadn't been
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP only_Predet (DetCN somePl_Det (PossNP (AdvCN (UseN2 (Use2N3 distance_N3)) now_Adv) (RelNP (CountNP few_Det (MassNP (UseN2 father_N2))) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (AdVVP always_AdV UseCopula))))))) (ComplVV can_VV (AdvVP (ComplVV can_VV (AdVVP always_AdV (AdVVP always_AdV (UseV jump_V)))) everywhere_Adv)))
LangEng: only some distances now of few of father , that would always be , can't be able to always always jump everywhere
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (MassNP (PossNP (ApposCN (RelCN (PartNP (AdvCN (AdjCN (PositA white_A) (UseN man_N)) here_Adv) (MassNP (AdjCN (PositA young_A) (UseN2 father_N2)))) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (ComplVA become_VA (PositA cold_A))))) (RelNP (MassNP (ApposCN (UseN2 father_N2) (PPartNP (UsePron i_Pron) cut_V2))) (UseRCl (TTAnt TFut AAnter) PNeg (RelCl (PredVP (UsePN john_PN) (AdVVP always_AdV UseCopula)))))) (MassNP (ApposCN (UseN2 (Use2N3 distance_N3)) (AdvNP (CountNP many_Det (CountNP every_Det (UsePron youPl_Pron))) (PrepNP after_Prep (UsePN john_PN))))))) (UseV live_V))
LangEng: white man here of young father that has become cold father I cut , such that John won't always have been , of distance many of everything of you after John will have lived
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (AdvNP (PredetNP not_Predet (AdvNP (DetCN (DetQuantOrd that_Quant NumSg (OrdDigits (IDig D_9))) (AdjCN (PositA big_A) (PartNP (UseN boat_N) (DetNP someSg_Det)))) (PrepNP with_Prep (PredetNP only_Predet (ExtAdvNP (PPartNP (UsePron we_Pron) close_V2) now_Adv))))) here_Adv) (AdvVP (ComplVV can8know_VV (UseComp (CompAdv everywhere_Adv))) now_Adv))
LangEng: not that 9th big boat of some with only us closed , now , here can be everywhere now
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (ExtAdvNP (DetNP few_Det) now_Adv) (AdVVP always_AdV (AdVVP always_AdV (UseComp (CompNP (ExtAdvNP (DetNP many_Det) now_Adv))))))
LangEng: few , now , would always always be many , now
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PPartNP (AdvNP (DetCN someSg_Det (AdjCN (UseComparA young_A) (UseN2 father_N2))) now_Adv) do_V2) UseCopula)
LangEng: some younger father now done hadn't been
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (CountNP (DetQuantOrd IndefArt NumSg (OrdDigits (IDig D_7))) (AdvNP (PredetNP all_Predet (PredetNP most_Predet (PPartNP (AdvNP (PPartNP (DetNP someSg_Det) wait_V2) everywhere_Adv) drink_V2))) (PrepNP after_Prep (RelNP (DetNP somePl_Det) (UseRCl (TTAnt TPast AAnter) PNeg (RelCl (PredVP (UsePron he_Pron) (UseV go_V)))))))) UseCopula)
LangEng: a 7th of all most some waited everywhere drunk after some , such that he hadn't gone , is
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (DetNP many_Det) (AdVVP always_AdV (ComplVA become_VA (AdjOrd (OrdNumeral (num (pot3 (pot2 (pot0 n7)))))))))
LangEng: many always become seven hundred thousandth
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (MassNP (UseN2 father_N2)) (ComplVV want_VV (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestSlash (IdetCN how8many_IDet (UseN2 (ComplN3 distance_N3 (UsePron youPl_Pron)))) (SlashVP (PPartNP (AdvNP (UsePron i_Pron) now_Adv) have_V2) (SlashVV want_VV (Slash2V3 sell_V3 (DetNP few_Det)))))))))
LangEng: father will want to know how many distances from you I now had wanted to sell few to
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (CountNP somePl_Det (ExtAdvNP (UsePN john_PN) here_Adv)) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestIComp (CompIP whoPl_IP) (PredetNP not_Predet (ExtAdvNP (AdvNP (DetNP few_Det) here_Adv) here_Adv))))))
LangEng: some of John , here , have known who not few here , here , haven't been
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (CountNP (DetQuant this_Quant (NumCard (AdNum at_least_AdN (NumNumeral (num (pot3plus (pot2plus pot01 pot111) (pot2plus pot01 pot111))))))) (ExtAdvNP (CountNP (DetQuantOrd (PossPron youPl_Pron) NumPl (OrdNumeral (num (pot2as3 (pot2 pot01))))) (UsePron he_Pron)) now_Adv)) (AdVVP always_AdV (UseV walk_V)))
LangEng: these at least one hundred and eleven thousand one hundred and eleven of your one hundredth of him , now , haven't always walked
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (UsePN paris_PN) UseCopula)
LangEng: Paris was
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (CountNP somePl_Det (UsePN john_PN)) (UseComp (CompNP (PredetNP all_Predet (PredetNP all_Predet (PredetNP most_Predet (CountNP (DetQuantOrd IndefArt NumPl (OrdSuperl yellow_A)) (PredetNP not_Predet (UsePron it_Pron)))))))))
LangEng: some of John will be all all most most yellow of not it
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePron he_Pron) UseCopula)
LangEng: he wouldn't be
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePron we_Pron) (ComplVA become_VA (AdAP so_AdA (PositA hot_A))))
LangEng: we will have become so hot
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (PredetNP most_Predet (DetNP somePl_Det)) (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PPos (QuestCl (PredVP (UsePN paris_PN) (ComplVA become_VA (AdAP too_AdA (UseComparA green_A)))))))))
LangEng: most some will always have known if Paris would have become too greener
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (ExtAdvNP (UsePron he_Pron) now_Adv) (UseV live_V))
LangEng: he , now , wouldn't have lived
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (ExtAdvNP (AdvNP (DetNP every_Det) here_Adv) everywhere_Adv) (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestVP whatPl_IP (UseComp (CompCN (AdjCN (PositA blue_A) (UseN ship_N))))))) here_Adv))
LangEng: everything here , everywhere , doesn't know here what haven't been blue ships
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (PPartNP (RelNP (MassNP (ApposCN (RelCN (UseN bird_N) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (UseV live_V)))) (CountNP someSg_Det (PredetNP only_Predet (PredetNP not_Predet (DetNP somePl_Det)))))) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP UseCopula))) teach_V2) (AdvVP (UseV run_V) now_Adv))
LangEng: bird that won't live some of only not some , that wouldn't be , taught has run now
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (PredetNP all_Predet (ExtAdvNP (DetCN few_Det (PartNP (RelCN (AdvCN (AdvCN (UseN2 father_N2) now_Adv) (PrepNP to_Prep (UsePron she_Pron))) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (AdvVP UseCopula now_Adv)))) (CountNP every_Det (UsePron we_Pron)))) now_Adv)) (AdVVP always_AdV (AdvVP (ComplVA become_VA (UseComparA small_A)) everywhere_Adv)))
LangEng: all few fathers now to her that would be now of everything of us , now , didn't always become smaller everywhere
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (DetNP (DetQuant that_Quant NumSg)) (ComplVV must_VV (ComplVV want_VV (AdvVP (AdVVP always_AdV (AdVVP always_AdV (ComplVV can_VV (UseComp (CompAdv now_Adv))))) everywhere_Adv))))
LangEng: that wouldn't have to want to always always be able to be now everywhere
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (MassNP (UseN2 (Use2N3 distance_N3))) (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PPos (QuestVP whatSg_IP (ComplSlash (AdvVPSlash (AdvVPSlash (SlashV2a read_V2) here_Adv) here_Adv) (ExtAdvNP (ExtAdvNP (UsePN paris_PN) here_Adv) everywhere_Adv)))))))
LangEng: distance will always know what would read here here Paris , here , everywhere
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (ExtAdvNP (ExtAdvNP (AdvNP (AdvNP (PredetNP all_Predet (PredetNP not_Predet (PredetNP not_Predet (UsePron she_Pron)))) (PrepNP under_Prep (AdvNP (CountNP few_Det (UsePN paris_PN)) (PrepNP with_Prep (UsePron he_Pron))))) (PrepNP from_Prep (ExtAdvNP (PredetNP most_Predet (MassNP (UseN2 father_N2))) here_Adv))) here_Adv) here_Adv) (UseV sleep_V))
LangEng: all not not she under few of Paris with him from most father , here , here , here , had slept
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePN john_PN) (ComplVS fear_VS (UseCl (TTAnt TPast ASimul) PPos (PredVP (AdvNP (DetNP few_Det) everywhere_Adv) (ComplVA become_VA (PositA hot_A))))))
LangEng: John fears that few everywhere became hot
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (CountNP many_Det (PPartNP (PredetNP most_Predet (UsePN john_PN)) do_V2)) (UseV run_V))
LangEng: many of most John done didn't run
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (CountNP (DetQuantOrd IndefArt NumPl (OrdNumeral (num (pot3 (pot2plus (pot0 n2) (pot1to19 n5)))))) (PredetNP only_Predet (PPartNP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP (AdVVP always_AdV (AdVVP always_AdV UseCopula))))) close_V2))) (ComplVV must_VV (ComplVV want_VV (ComplVS fear_VS (UseCl (TTAnt TPres ASimul) PPos (PredVP (CountNP someSg_Det (UsePN paris_PN)) (UseComp (CompAP (PositA old_A)))))))))
LangEng: two hundred and fifteen thousandth of only Paris , that hasn't always always been , closed would have had to want to fear that some of Paris is old
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (PPartNP (DetCN (DetQuantOrd no_Quant NumSg (OrdSuperl yellow_A)) (UseN2 (Use3N3 distance_N3))) cut_V2) (UseComp (CompNP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPres ASimul) PNeg (RelSlash IdRP (SlashVP (PPartNP (UsePN paris_PN) close_V2) (SlashV2a wait_V2))))))))
LangEng: no most yellow distance cut will be Paris , that Paris closed doesn't wait for
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (ExtAdvNP (UsePron it_Pron) (PrepNP behind_Prep (CountNP few_Det (RelNP (ExtAdvNP (RelNP (AdvNP (DetNP every_Det) now_Adv) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP UseCopula))) (PrepNP in8front_Prep (AdvNP (UsePN john_PN) now_Adv))) (UseRCl (TTAnt TPres ASimul) PPos (RelCl (PredVP (UsePron youPl_Pron) (ComplVV can8know_VV UseCopula)))))))) (AdVVP always_AdV UseCopula))
LangEng: it , behind few of everything now , that has been , in front of John now , such that you can be , hadn't always been
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (DetNP (DetQuantOrd this_Quant NumPl (OrdSuperl young_A))) (ComplSlash (Slash3V3 send_V3 (MassNP (RelCN (UseN2 father_N2) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (ComplSlash (SlashV2a have_V2) (UsePron he_Pron))))))) (UsePron i_Pron)))
LangEng: these youngest have sent me to father that won't have him
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (UsePN paris_PN) (UseV swim_V))
LangEng: Paris won't have swum
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (AdvNP (UsePN john_PN) (PrepNP in8front_Prep (UsePron it_Pron))) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestCl (PredVP (RelNP (MassNP (AdvCN (UseN book_N) everywhere_Adv)) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP UseCopula))) (UseV sleep_V))))))
LangEng: John in front of it wouldn't know if book everywhere , that would have been , wouldn't have slept
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePN paris_PN) (ComplSlash (SlashVV can_VV (AdvVPSlash (Slash2V3 sell_V3 (DetNP every_Det)) everywhere_Adv)) (UsePN paris_PN)))
LangEng: Paris hadn't been able to sell everything everywhere to Paris
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePron we_Pron) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestIComp (CompIAdv where_IAdv) (DetCN (DetQuantOrd IndefArt NumPl (OrdSuperl cold_A)) (UseN baby_N))))))
LangEng: we hadn't known where coldest babies haven't been
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (ExtAdvNP (PPartNP (PPartNP (PredetNP most_Predet (DetNP many_Det)) buy_V2) understand_V2) everywhere_Adv) (UseComp (CompNP (CountNP (DetQuant DefArt NumPl) (ExtAdvNP (AdvNP (UsePN john_PN) (PrepNP with_Prep (PredetNP all_Predet (UsePron she_Pron)))) everywhere_Adv)))))
LangEng: most many bought understood , everywhere , won't have been them of John with all her , everywhere
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (AdvNP (DetNP (DetQuantOrd no_Quant NumPl (OrdSuperl warm_A))) everywhere_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PPos (QuestVP (IdetIP how8many_IDet) (ComplVV must_VV (ComplSlash (SlashV2a teach_V2) (UsePron he_Pron)))))))
LangEng: no warmest everywhere knew how many had had to teach him
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (CountNP (DetQuantOrd (PossPron she_Pron) NumPl (OrdNumeralSuperl (num (pot2as3 (pot1as2 (pot1plus n7 (pot0 n5))))) small_A)) (UsePN john_PN)) (AdvVP (ComplVS fear_VS (UseCl (TTAnt TFut AAnter) PPos (PredVP (PPartNP (RelNP (DetNP (DetQuant DefArt NumPl)) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula))) read_V2) (ComplVA become_VA (UseComparA young_A))))) here_Adv))
LangEng: her seventy &+ - &+ fifth smallest of John feared here that they , that are , read will have become younger
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (PPartNP (AdvNP (MassNP (RelCN (UseN animal_N) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (ComplVA become_VA (PositA big_A)))))) now_Adv) understand_V2) UseCopula)
LangEng: animal that has become big now understood won't be
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (RelNP (DetCN (DetQuantOrd DefArt NumPl (OrdNumeralSuperl (num (pot3plus (pot1as2 (pot1to19 n3)) (pot2 pot01))) red_A)) (RelCN (RelCN (ApposCN (RelCN (UseN2 father_N2) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP UseCopula))) (PredetNP most_Predet (PredetNP not_Predet (UsePron youPl_Pron)))) (UseRCl (TTAnt TFut ASimul) PPos (RelSlash IdRP (SlashVP (UsePron youPl_Pron) (SlashV2a close_V2))))) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP UseCopula)))) (UseRCl (TTAnt TCond AAnter) PPos (RelCl (PredVP (AdvNP (CountNP few_Det (UsePN john_PN)) (PrepNP in_Prep (DetCN every_Det (UseN2 father_N2)))) (ComplVV want_VV (AdVVP always_AdV (UseComp (CompAdv everywhere_Adv)))))))) (UseComp (CompAP (PositA green_A))))
LangEng: the thirteen thousand one hundredth reddest fathers that will be most not you that you will close that were , such that few of John in every father would have wanted to always be everywhere , haven't been green
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (CountNP (DetQuantOrd this_Quant NumSg (OrdDigits (IDig D_1))) (DetNP somePl_Det)) (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PNeg (QuestSlash (IdetIP how8many_IDet) (SlashVP (PPartNP (DetCN every_Det (ApposCN (UseN bike_N) (UsePron he_Pron))) do_V2) (AdVVPSlash always_AdV (AdVVPSlash always_AdV (Slash3V3 add_V3 (DetNP someSg_Det)))))))))
LangEng: this 1st of some knows how many every bike he done doesn't always always add to some
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (MassNP (UseN tree_N)) (ComplVA become_VA (PositA old_A)))
LangEng: tree would have become old
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (DetCN (DetQuantOrd this_Quant (NumCard (AdNum at_least_AdN (AdNum at_least_AdN (NumDigits (IIDig D_7 (IDig D_8)))))) (OrdNumeral (num (pot3plus (pot2plus (pot0 n9) pot111) (pot1as2 pot110))))) (UseN2 (ComplN3 distance_N3 (AdvNP (AdvNP (MassNP (AdjCN (PositA small_A) (UseN baby_N))) everywhere_Adv) now_Adv)))) (AdVVP always_AdV (UseComp (CompCN (AdjCN (AdAP so_AdA (AdAP very_AdA (AdjOrd (OrdSuperl hot_A)))) (PossNP (UseN2 (Use2N3 distance_N3)) (PPartNP (DetCN somePl_Det (UseN2 father_N2)) love_V2)))))))
LangEng: these at least at least 7 &+ 8 nine hundred and eleven thousand tenth distances from small baby everywhere now will always be so very hottest distances of some fathers loved
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (PPartNP (PPartNP (PPartNP (UsePN paris_PN) break_V2) love_V2) buy_V2) (ComplVV want_VV (AdVVP always_AdV (AdvVP (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PPos (QuestIComp (CompIP whoSg_IP) (UsePN paris_PN)))) (PrepNP on_Prep (PredetNP not_Predet (MassNP (UseN2 father_N2))))) now_Adv))))
LangEng: Paris broken loved bought had wanted to always know on not father now who Paris had been
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (RelNP (DetNP someSg_Det) (UseRCl (TTAnt TCond AAnter) PNeg (RelCl (PredVP (RelNP (PredetNP only_Predet (UsePN john_PN)) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP (UseV play_V)))) UseCopula)))) UseCopula)
LangEng: some , such that only John , that didn't play , wouldn't have been , would have been
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (PredetNP all_Predet (DetNP (DetQuant DefArt NumSg))) (ComplVS hope_VS (UseCl (TTAnt TFut AAnter) PNeg (PredVP (PredetNP most_Predet (UsePron youSg_Pron)) (UseComp (CompCN (ComplN2 (Use2N3 distance_N3) (UsePN paris_PN))))))))
LangEng: all it won't have hoped that most you won't have been a distance from Paris
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (MassNP (ComplN2 father_N2 (RelNP (PredetNP all_Predet (UsePron it_Pron)) (UseRCl (TTAnt TPres AAnter) PNeg (RelCl (PredVP (AdvNP (UsePron she_Pron) now_Adv) UseCopula)))))) (ComplSlash (Slash3V3 sell_V3 (PPartNP (MassNP (ApposCN (UseN flower_N) (AdvNP (DetCN many_Det (UseN2 father_N2)) (PrepNP in8front_Prep (UsePron she_Pron))))) close_V2)) (MassNP (UseN2 father_N2))))
LangEng: father of all it , such that she now hasn't been , wouldn't have sold father to flower many fathers in front of her closed
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (PredetNP most_Predet (CountNP (DetQuantOrd no_Quant (NumCard (NumDigits (IIDig D_5 (IIDig D_4 (IDig D_0))))) (OrdNumeralSuperl (num (pot3 (pot2plus (pot0 n7) (pot1 n3)))) good_A)) (UsePron youPl_Pron))) (ComplVV want_VV (ComplVS know_VS (UseCl (TTAnt TPast ASimul) PPos (PredVP (MassNP (UseN2 (Use2N3 distance_N3))) (ComplVV want_VV (AdVVP always_AdV (UseV jump_V))))))))
LangEng: most no 5 &+ 4 &+ 0 seven hundred and thirty thousandth best of you have wanted to know that distance wanted to always jump
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePN john_PN) (UseComp (CompAP (PositA white_A))))
LangEng: John would be white
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (PredetNP not_Predet (DetCN somePl_Det (RelCN (UseN house_N) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP (AdvVP (ComplVA become_VA (UseComparA blue_A)) (PrepNP with_Prep (UsePron youSg_Pron)))))))) UseCopula)
LangEng: not some houses that haven't become bluer with you were
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (AdvNP (MassNP (ComplN2 father_N2 (UsePron youPl_Pron))) (PrepNP between_Prep (UsePron it_Pron))) UseCopula)
LangEng: father of you between it wasn't
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (PredetNP only_Predet (DetCN somePl_Det (PossNP (ApposCN (PartNP (UseN2 (Use2N3 distance_N3)) (MassNP (AdvCN (UseN boy_N) everywhere_Adv))) (DetCN many_Det (PossNP (PossNP (UseN2 father_N2) (UsePron we_Pron)) (MassNP (UseN2 father_N2))))) (RelNP (PPartNP (PredetNP most_Predet (UsePron she_Pron)) teach_V2) (UseRCl (TTAnt TPast ASimul) PNeg (RelSlash IdRP (SlashVP (DetNP many_Det) (SlashV2a drink_V2)))))))) (UseComp (CompAP (PositA black_A))))
LangEng: only some distances of boy everywhere many fathers of ours of father of most hers taught , that many didn't drink , wouldn't be black
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (UseN2 (Use3N3 distance_N3))) (ComplVS fear_VS (UseCl (TTAnt TPast AAnter) PNeg (PredVP (PredetNP not_Predet (RelNP (ExtAdvNP (MassNP (UseN2 father_N2)) (PrepNP in_Prep (DetNP few_Det))) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (ComplVV must_VV UseCopula))))) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestCl (PredVP (UsePron he_Pron) UseCopula))))))))
LangEng: distance wouldn't fear that not father , in few , that would have had to be , hadn't known if he hasn't been
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (RelNP (RelNP (DetNP every_Det) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (AdvVP (UseComp (CompCN (UseN2 father_N2))) (PrepNP after_Prep (DetCN few_Det (UseN2 father_N2))))))) (UseRCl (TTAnt TPast AAnter) PPos (RelSlash IdRP (SlashVP (DetCN every_Det (AdjCN (PositA young_A) (AdjCN (UseComparA warm_A) (UseN fish_N)))) (SlashVV can8know_VV (AdVVPSlash always_AdV (SlashV2a wait_V2))))))) (AdvVP UseCopula (PrepNP with_Prep (RelNP (PPartNP (UsePN paris_PN) love_V2) (UseRCl (TTAnt TPres AAnter) PPos (RelCl (PredVP (PredetNP not_Predet (UsePron it_Pron)) (AdvVP (UseV play_V) now_Adv))))))))
LangEng: everything , that would be a father after few fathers , that every young warmer fish had been able to always wait for , is with Paris loved , such that not it has played now
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (MassNP (ApposCN (AdjCN (AdAP almost_AdA (UseComparA bad_A)) (AdvCN (RelCN (PartNP (PossNP (UseN wine_N) (UsePron it_Pron)) (CountNP every_Det (UsePN john_PN))) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (ComplVV can_VV UseCopula)))) everywhere_Adv)) (ExtAdvNP (CountNP few_Det (UsePron she_Pron)) everywhere_Adv))) (ComplVV can8know_VV UseCopula))
LangEng: almost worse wine of its of everything of John that would have been able to be everywhere few of her , everywhere , would be able to be
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (CountNP (DetQuantOrd IndefArt (NumCard (NumNumeral (num (pot3plus (pot1as2 pot110) (pot1as2 pot111))))) (OrdNumeral (num (pot3 (pot2 (pot0 n2)))))) (PPartNP (DetCN (DetQuant that_Quant NumSg) (RelCN (PartNP (UseN2 (Use3N3 distance_N3)) (ExtAdvNP (DetNP many_Det) everywhere_Adv)) (UseRCl (TTAnt TFut AAnter) PNeg (RelSlash IdRP (SlashVP (DetNP somePl_Det) (SlashV2a close_V2)))))) buy_V2)) (UseV sleep_V))
LangEng: ten thousand eleven two hundred thousandth of that distance of many , everywhere , that some won't have closed bought would have slept
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (MassNP (RelCN (AdvCN (AdjCN (UseComparA new_A) (ComplN2 (ComplN3 distance_N3 (DetNP someSg_Det)) (RelNP (ExtAdvNP (UsePN john_PN) everywhere_Adv) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP UseCopula))))) now_Adv) (UseRCl (TTAnt TPres AAnter) PNeg (RelSlash IdRP (SlashVP (PredetNP all_Predet (UsePron youSg_Pron)) (AdVVPSlash always_AdV (AdVVPSlash always_AdV (SlashV2a count_V2)))))))) (ComplSlash (Slash2V3 talk_V3 (PPartNP (PredetNP not_Predet (ExtAdvNP (AdvNP (DetCN few_Det (UseN2 father_N2)) everywhere_Adv) here_Adv)) wait_V2)) (MassNP (PartNP (ApposCN (AdvCN (PossNP (AdvCN (UseN ship_N) everywhere_Adv) (MassNP (UseN2 father_N2))) (PrepNP after_Prep (MassNP (UseN bird_N)))) (RelNP (CountNP many_Det (UsePN paris_PN)) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP (UseV go_V))))) (ExtAdvNP (CountNP every_Det (PredetNP most_Predet (ExtAdvNP (DetNP somePl_Det) here_Adv))) (PrepNP behind_Prep (RelNP (CountNP few_Det (DetNP few_Det)) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula)))))))))
LangEng: newer distance from some to John , everywhere , that wouldn't have been , now that all you haven't always always counted hadn't talked to not few fathers everywhere , here , waited about ship everywhere of father after bird many of Paris , that wouldn't have gone , of everything of most some , here , behind few of few , that are
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (ExtAdvNP (CountNP many_Det (PredetNP not_Predet (UsePN paris_PN))) here_Adv) (UseV sleep_V))
LangEng: many of not Paris , here , don't sleep
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePron youSg_Pron) (ComplVS hope_VS (UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetNP many_Det) (UseV run_V)))))
LangEng: you will have hoped that many haven't run
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePN paris_PN) (ComplSlash (Slash3V3 sell_V3 (DetCN (DetQuant DefArt NumSg) (UseN2 (ComplN3 distance_N3 (CountNP few_Det (AdvNP (UsePron i_Pron) here_Adv)))))) (PPartNP (DetNP somePl_Det) eat_V2)))
LangEng: Paris hasn't sold some eaten to the distance from few of me here
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (RelNP (PredetNP not_Predet (ExtAdvNP (RelNP (CountNP somePl_Det (DetCN every_Det (AdjCN (PositA new_A) (UseN2 father_N2)))) (UseRCl (TTAnt TPast AAnter) PNeg (RelSlash IdRP (SlashVP (UsePron youSg_Pron) (SlashV2a teach_V2))))) everywhere_Adv)) (UseRCl (TTAnt TPres AAnter) PPos (RelCl (PredVP (PredetNP all_Predet (MassNP (AdvCN (UseN baby_N) everywhere_Adv))) (ComplVS say_VS (UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePron she_Pron) UseCopula))))))) (ComplVV can_VV (ComplVV want_VV (UseV travel_V))))
LangEng: not some of every new father , that you hadn't taught , everywhere , such that all baby everywhere has said that she hadn't been , hadn't been able to want to travel
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePron i_Pron) (ComplSlash (Slash3V3 give_V3 (RelNP (ExtAdvNP (ExtAdvNP (AdvNP (MassNP (UseN bike_N)) everywhere_Adv) now_Adv) (PrepNP behind_Prep (CountNP many_Det (CountNP many_Det (UsePron he_Pron))))) (UseRCl (TTAnt TFut AAnter) PNeg (RelCl (PredVP (MassNP (UseN language_N)) (AdVVP always_AdV (UseV live_V))))))) (DetNP somePl_Det)))
LangEng: I don't give some bike everywhere , now , behind many of many of him , such that language won't always have lived
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (DetCN many_Det (ApposCN (ApposCN (AdjCN (AdjOrd (OrdDigits (IDig D_5))) (AdjCN (UseComparA red_A) (PartNP (ApposCN (UseN2 father_N2) (UsePron it_Pron)) (PPartNP (UsePron youPl_Pron) drink_V2)))) (DetNP many_Det)) (MassNP (PossNP (UseN book_N) (PredetNP only_Predet (AdvNP (AdvNP (DetNP someSg_Det) here_Adv) now_Adv)))))) (ComplVS know_VS (UseCl (TTAnt TCond AAnter) PPos (PredVP (CountNP every_Det (MassNP (UseN2 (Use3N3 distance_N3)))) (ComplVA become_VA (PositA clean_A))))))
LangEng: many 5th redder fathers it of you drunk many book of only some here now have known that everything of distance would have become clean
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePN paris_PN) UseCopula)
LangEng: Paris isn't
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TPast AAnter) PNeg (RelCl (PredVP (DetCN few_Det (ComplN2 (ComplN3 distance_N3 (UsePN paris_PN)) (MassNP (UseN man_N)))) (ComplVS know_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (UsePN paris_PN) (ComplVV must_VV UseCopula)))))))) (AdvVP (ComplSlash (SlashVV can_VV (AdVVPSlash always_AdV (Slash3V3 talk_V3 (DetCN every_Det (PartNP (UseN fire_N) (DetNP every_Det)))))) (DetNP someSg_Det)) here_Adv))
LangEng: you , such that few distances from Paris to man hadn't known that Paris has had to be , wouldn't be able to to some always talk about every fire of everything here
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP not_Predet (DetNP (DetQuantOrd (PossPron it_Pron) NumPl (OrdDigits (IIDig D_9 (IDig D_4)))))) (UseComp (CompAP (UseComparA warm_A))))
LangEng: not its 9 &+ 4th aren't warmer
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetNP somePl_Det) (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PPos (QuestIAdv how_IAdv (PredVP (DetNP few_Det) UseCopula)))))
LangEng: some would have known how few are
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (AdvNP (ExtAdvNP (RelNP (UsePron we_Pron) (UseRCl (TTAnt TPast ASimul) PNeg (RelSlash IdRP (SlashVP (CountNP someSg_Det (UsePN paris_PN)) (AdvVPSlash (SlashV2a eat_V2) here_Adv))))) here_Adv) here_Adv) (UseComp (CompNP (MassNP (RelCN (AdjCN (UseComparA bad_A) (AdjCN (UseComparA green_A) (ApposCN (UseN2 father_N2) (UsePN paris_PN)))) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP (UseV come_V))))))))
LangEng: we , that some of Paris didn't eat here , here , here wouldn't have been worse greener father Paris that doesn't come
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (CountNP many_Det (MassNP (PossNP (ApposCN (RelCN (PartNP (AdjCN (UseComparA small_A) (UseN woman_N)) (ExtAdvNP (DetNP many_Det) everywhere_Adv)) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula))) (PPartNP (PPartNP (UsePron it_Pron) drink_V2) bite_V2)) (ExtAdvNP (DetCN someSg_Det (ComplN2 (Use2N3 distance_N3) (UsePN john_PN))) everywhere_Adv)))) (UseV walk_V))
LangEng: many of smaller woman of many , everywhere , that is it drunk bitten of some distance from John , everywhere , would walk
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePN john_PN) (ComplSlash (SlashVV can8know_VV (SlashV2a count_V2)) (AdvNP (MassNP (ComplN2 father_N2 (UsePron youSg_Pron))) now_Adv)))
LangEng: John will have been able to count father of you now
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePN john_PN) UseCopula)
LangEng: John won't be
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PPartNP (UsePN john_PN) see_V2) (UseComp (CompAdv now_Adv)))
LangEng: John seen isn't now
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePron it_Pron) (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PPos (QuestIAdv when_IAdv (PredVP (RelNP (RelNP (DetCN few_Det (UseN2 father_N2)) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP UseCopula))) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP (ComplVV want_VV UseCopula)))) (ComplSlash (SlashVV want_VV (AdVVPSlash always_AdV (SlashV2a drink_V2))) (RelNP (UsePron he_Pron) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP UseCopula)))))))))
LangEng: it wouldn't know when few fathers , that were , that wanted to be , want to always drink him , that has been
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (ExtAdvNP (MassNP (ComplN2 (Use3N3 distance_N3) (DetCN somePl_Det (RelCN (AdvCN (PossNP (UseN2 father_N2) (DetNP somePl_Det)) here_Adv) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP (AdVVP always_AdV UseCopula))))))) now_Adv) (ComplVV can_VV (ComplVS fear_VS (UseCl (TTAnt TPres ASimul) PNeg (PredVP (PPartNP (PPartNP (UsePron we_Pron) count_V2) buy_V2) (AdVVP always_AdV (UseV travel_V)))))))
LangEng: distance to some fathers of some here that hadn't always been , now , hasn't been able to fear that we counted bought don't always travel
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (DetNP many_Det) UseCopula)
LangEng: many were
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (DetCN every_Det (PartNP (PartNP (RelCN (UseN child_N) (UseRCl (TTAnt TPres ASimul) PNeg (RelSlash IdRP (SlashVP (UsePN paris_PN) (SlashV2a do_V2))))) (ExtAdvNP (CountNP (DetQuant (PossPron youPl_Pron) NumPl) (RelNP (PPartNP (UsePN john_PN) love_V2) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP UseCopula)))) now_Adv)) (UsePN john_PN))) (AdVVP always_AdV (ComplSlash (Slash3V3 give_V3 (RelNP (UsePN john_PN) (UseRCl (TTAnt TFut AAnter) PNeg (RelCl (PredVP (UsePN john_PN) (AdvVP UseCopula now_Adv)))))) (AdvNP (ExtAdvNP (RelNP (DetCN many_Det (AdjCN (UseComparA warm_A) (UseN bird_N))) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (AdvVP UseCopula everywhere_Adv)))) now_Adv) here_Adv))))
LangEng: every child that Paris doesn't do of yours of John loved , that will have been , now , of John always gave many warmer birds , that have been everywhere , now , here John , such that John won't have been now
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePron he_Pron) (AdvVP (UseComp (CompAdv (PrepNP between_Prep (PPartNP (DetCN every_Det (UseN2 (Use2N3 distance_N3))) count_V2)))) (PrepNP from_Prep (RelNP (CountNP every_Det (RelNP (PPartNP (PredetNP most_Predet (UsePN john_PN)) drink_V2) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP (UseV travel_V))))) (UseRCl (TTAnt TPast AAnter) PPos (RelSlash IdRP (SlashVP (CountNP somePl_Det (DetNP few_Det)) (AdVVPSlash always_AdV (SlashV2a buy_V2)))))))))
LangEng: he wouldn't have been between every distance counted from everything of most John drunk , that hasn't travelled , that some of few had always bought
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (MassNP (AdvCN (UseN child_N) everywhere_Adv)) (AdvVP UseCopula now_Adv))
LangEng: child everywhere wasn't now
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (RelNP (MassNP (RelCN (PossNP (UseN2 (Use3N3 distance_N3)) (UsePron youPl_Pron)) (UseRCl (TTAnt TFut AAnter) PPos (RelSlash IdRP (SlashVP (UsePN paris_PN) (SlashV2a cut_V2)))))) (UseRCl (TTAnt TCond ASimul) PPos (RelSlash IdRP (SlashVP (DetNP few_Det) (Slash3V3 sell_V3 (DetCN few_Det (AdjCN (UseComparA clean_A) (UseN2 father_N2)))))))) (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_5)))))
LangEng: distance of yours that Paris will have cut , that few would sell to few cleaner fathers , had become 5th
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePN paris_PN) (UseComp (CompAdv everywhere_Adv)))
LangEng: Paris is everywhere
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (MassNP (AdvCN (AdjCN (AdjOrd (OrdNumeral (num (pot3plus (pot2 pot01) (pot2 pot01))))) (AdjCN (UseComparA white_A) (UseN2 father_N2))) everywhere_Adv)) UseCopula)
LangEng: one hundred thousand one hundredth whiter father everywhere won't be
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetNP many_Det) (AdvVP (AdVVP always_AdV (ComplSlash (AdvVPSlash (AdVVPSlash always_AdV (AdVVPSlash always_AdV (SlashVV must_VV (SlashV2a drink_V2)))) here_Adv) (AdvNP (PredetNP all_Predet (UsePron i_Pron)) (PrepNP in8front_Prep (ExtAdvNP (MassNP (UseN fish_N)) (PrepNP after_Prep (DetNP few_Det))))))) everywhere_Adv))
LangEng: many hadn't to always always always drink here all me in front of fish , after few , everywhere
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (CountNP every_Det (PPartNP (MassNP (ApposCN (UseN2 (Use2N3 distance_N3)) (DetNP someSg_Det))) count_V2)) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PPos (QuestVP whatSg_IP (AdVVP always_AdV (AdvVP (AdVVP always_AdV (AdvVP (AdvVP UseCopula here_Adv) everywhere_Adv)) now_Adv))))))
LangEng: everything of distance some counted wouldn't know what will always always have been here everywhere now
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (UsePN john_PN) (ComplVA become_VA (AdjOrd (OrdSuperl bad_A))))
LangEng: John won't have become worst
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePron i_Pron) (UseV jump_V))
LangEng: I would jump
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (CountNP (DetQuantOrd DefArt NumSg (OrdDigits (IDig D_0))) (PPartNP (AdvNP (UsePN paris_PN) here_Adv) kill_V2)) (UseComp (CompCN (RelCN (AdjCN (PositA warm_A) (UseN2 (ComplN3 distance_N3 (DetCN few_Det (UseN sea_N))))) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP (ComplVV want_VV (ComplVV must_VV (AdVVP always_AdV UseCopula)))))))))
LangEng: the 0th of Paris here killed wouldn't be a warm distance from few seas that wouldn't have wanted to have to always be
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (PPartNP (PredetNP all_Predet (UsePN john_PN)) do_V2) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PNeg (QuestVP (IdetCN how8many_IDet (ApposCN (ApposCN (UseN2 (Use2N3 distance_N3)) (DetNP many_Det)) (PPartNP (ExtAdvNP (UsePron we_Pron) everywhere_Adv) kill_V2))) (UseV walk_V)))))
LangEng: all John done won't have known how many distances many we , everywhere , killed wouldn't walk
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePN paris_PN) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestCl (PredVP (RelNP (ExtAdvNP (AdvNP (DetNP somePl_Det) here_Adv) now_Adv) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP (AdVVP always_AdV UseCopula)))) UseCopula)))))
LangEng: Paris doesn't know if some here , now , that were always , won't have been
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (MassNP (UseN man_N)) (UseComp (CompCN (ApposCN (AdjCN (PositA black_A) (ApposCN (RelCN (AdjCN (UseComparA ready_A) (UseN car_N)) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP UseCopula))) (UsePN john_PN))) (DetNP (DetQuantOrd DefArt (NumCard (NumDigits (IDig D_3))) (OrdSuperl hot_A)))))))
LangEng: man is a black readier car that was John the 3 hottest
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (ExtAdvNP (ExtAdvNP (PPartNP (RelNP (PredetNP most_Predet (RelNP (UsePron i_Pron) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP UseCopula)))) (UseRCl (TTAnt TPres AAnter) PNeg (RelSlash IdRP (SlashVP (DetNP few_Det) (SlashV2a eat_V2))))) love_V2) everywhere_Adv) (PrepNP between_Prep (AdvNP (DetNP every_Det) (PrepNP in8front_Prep (UsePN john_PN))))) (ComplSlash (AdvVPSlash (AdVVPSlash always_AdV (AdVVPSlash always_AdV (Slash3V3 sell_V3 (DetNP someSg_Det)))) here_Adv) (UsePN john_PN)))
LangEng: most I , that have been , that few haven't eaten , loved , everywhere , between everything in front of John , would always always sell John to some here
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (AdvNP (ExtAdvNP (PPartNP (PredetNP all_Predet (PPartNP (UsePron i_Pron) teach_V2)) eat_V2) everywhere_Adv) here_Adv) (ComplVS say_VS (UseCl (TTAnt TPast ASimul) PPos (PredVP (ExtAdvNP (UsePN john_PN) (PrepNP in_Prep (RelNP (CountNP (DetQuant that_Quant NumSg) (UsePron youPl_Pron)) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP UseCopula))))) (UseComp (CompAdv (PrepNP in8front_Prep (CountNP many_Det (UsePN john_PN)))))))))
LangEng: all I taught eaten , everywhere , here haven't said that John , in that of you , that was , was in front of many of John
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (ExtAdvNP (DetNP (DetQuant (PossPron youPl_Pron) NumSg)) here_Adv) (UseV swim_V))
LangEng: yours , here , will have swum
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (MassNP (UseN2 father_N2)) (ComplVS know_VS (UseCl (TTAnt TPres ASimul) PNeg (PredVP (DetNP somePl_Det) (ComplVA become_VA (PositA black_A))))))
LangEng: father will know that some don't become black
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (AdvNP (PPartNP (PPartNP (UsePron he_Pron) read_V2) do_V2) everywhere_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestIComp (CompIP (IdetIP how8many_IDet)) (PPartNP (MassNP (PartNP (ComplN2 (Use3N3 distance_N3) (UsePN paris_PN)) (CountNP every_Det (DetNP somePl_Det)))) have_V2)))))
LangEng: he read done everywhere hadn't known how many distance to Paris of everything of some had hasn't been
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (ExtAdvNP (RelNP (AdvNP (PredetNP most_Predet (UsePN john_PN)) now_Adv) (UseRCl (TTAnt TFut AAnter) PNeg (RelSlash IdRP (SlashVP (UsePron i_Pron) (SlashVV must_VV (AdvVPSlash (SlashV2a do_V2) everywhere_Adv)))))) (PrepNP in_Prep (PredetNP only_Predet (UsePN paris_PN)))) (ComplVV must_VV UseCopula))
LangEng: most John now , that I won't have had to do everywhere , in only Paris , wouldn't have had to be
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (MassNP (AdvCN (AdjCN (PositA old_A) (UseN car_N)) now_Adv)) (UseComp (CompAdv everywhere_Adv)))
LangEng: old car now won't have been everywhere
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PPartNP (MassNP (AdvCN (AdvCN (ApposCN (PossNP (UseN2 (Use3N3 distance_N3)) (PPartNP (UsePN john_PN) drink_V2)) (AdvNP (CountNP someSg_Det (UsePN paris_PN)) everywhere_Adv)) now_Adv) now_Adv)) buy_V2) (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PPos (QuestSlash whatPl_IP (SlashVP (CountNP someSg_Det (AdvNP (DetCN many_Det (UseN bread_N)) here_Adv)) (SlashVV can8know_VV (AdvVPSlash (AdVVPSlash always_AdV (SlashV2a eat_V2)) everywhere_Adv)))))))
LangEng: distance of John drunk some of Paris everywhere now now bought doesn't know what some of many breads here will be able to always eat everywhere
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (DetNP many_Det) (UseComp (CompAdv everywhere_Adv)))
LangEng: many won't have been everywhere
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (DetCN every_Det (PossNP (UseN child_N) (PPartNP (RelNP (UsePN john_PN) (UseRCl (TTAnt TPast AAnter) PNeg (RelCl (PredVP (UsePN john_PN) (ComplVV can_VV UseCopula))))) find_V2))) (UseComp (CompNP (UsePron it_Pron))))
LangEng: every child of John , such that John hadn't been able to be , found will have been it
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (AdvNP (DetCN somePl_Det (PartNP (AdvCN (RelCN (AdvCN (AdvCN (UseN baby_N) now_Adv) now_Adv) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP (AdvVP UseCopula now_Adv)))) here_Adv) (PPartNP (PredetNP not_Predet (MassNP (AdjCN (UseComparA good_A) (UseN baby_N)))) cut_V2))) here_Adv) (ComplVS say_VS (UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePron he_Pron) (UseComp (CompAP (AdAP so_AdA (PositA old_A))))))))
LangEng: some babies now now that were now here of not better baby cut here wouldn't say that he wouldn't have been so old
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (PredetNP most_Predet (UsePN paris_PN)) (ComplVV want_VV UseCopula))
LangEng: most Paris wouldn't want to be
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP (ComplVS know_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (MassNP (UseN dog_N)) UseCopula)))))) (ComplVV must_VV (AdVVP always_AdV UseCopula)))
LangEng: Paris , that had known that dog has been , had had to always be
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (CountNP many_Det (MassNP (PossNP (ApposCN (PartNP (RelCN (PossNP (UseN river_N) (UsePron i_Pron)) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP UseCopula))) (AdvNP (AdvNP (UsePN paris_PN) now_Adv) now_Adv)) (RelNP (RelNP (UsePron we_Pron) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP UseCopula))) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP (ComplVV must_VV UseCopula))))) (DetNP every_Det)))) (ComplVA become_VA (UseComparA blue_A)))
LangEng: many of river of mine that hadn't been of Paris now now we , that won't have been , that wouldn't have had to be , of everything haven't become bluer
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (RelNP (MassNP (ComplN2 (ComplN3 distance_N3 (PPartNP (ExtAdvNP (CountNP somePl_Det (UsePron he_Pron)) (PrepNP in_Prep (UsePN john_PN))) bite_V2)) (UsePron he_Pron))) (UseRCl (TTAnt TPast AAnter) PNeg (RelSlash IdRP (SlashVP (PredetNP most_Predet (DetCN someSg_Det (PossNP (UseN2 father_N2) (UsePron youPl_Pron)))) (AdVVPSlash always_AdV (SlashV2a teach_V2)))))) (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PNeg (QuestSlash whatSg_IP (SlashVP (UsePron youPl_Pron) (AdVVPSlash always_AdV (Slash2V3 sell_V3 (UsePN john_PN))))))))
LangEng: distance from some of him , in John , bitten to him , that most some father of yours hadn't always taught , hadn't known what you won't always sell John to
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (RelNP (DetNP (DetQuantOrd that_Quant (NumCard (NumDigits (IDig D_6))) (OrdNumeralSuperl (num (pot3plus (pot1as2 (pot1plus n6 pot01)) (pot1as2 (pot1 n7)))) black_A))) (UseRCl (TTAnt TPast ASimul) PPos (RelSlash IdRP (SlashVP (MassNP (PartNP (AdjCN (UseComparA green_A) (UseN river_N)) (AdvNP (UsePN paris_PN) here_Adv))) (Slash3V3 talk_V3 (DetCN (DetQuant no_Quant NumPl) (AdvCN (UseN2 father_N2) everywhere_Adv))))))) (ComplVV can_VV (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PPos (QuestCl (PredVP (UsePron we_Pron) (UseComp (CompAdv now_Adv)))))) now_Adv)))
LangEng: those 6 sixty &+ - &+ one thousand seventieth blackest , that greener river of Paris here talked about no fathers everywhere to , wouldn't be able to know now if we will be now
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (CountNP few_Det (UsePron youSg_Pron)) (AdvVP (ComplVS know_VS (UseCl (TTAnt TCond ASimul) PPos (PredVP (CountNP (DetQuantOrd no_Quant NumSg (OrdSuperl green_A)) (CountNP every_Det (CountNP many_Det (DetNP few_Det)))) (ComplVS fear_VS (UseCl (TTAnt TPast ASimul) PPos (PredVP (UsePron she_Pron) (ComplVV can8know_VV UseCopula))))))) everywhere_Adv))
LangEng: few of you would know everywhere that no greenest of everything of many of few would fear that she could be
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (DetNP (DetQuant IndefArt (NumCard (AdNum at_least_AdN (NumDigits (IDig D_7)))))) (ComplVA become_VA (UseComparA new_A)))
LangEng: at least 7 would become newer
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (PredetNP not_Predet (PredetNP all_Predet (DetNP (DetQuantOrd DefArt NumSg (OrdNumeralSuperl (num (pot2as3 (pot2plus pot01 pot110))) warm_A))))) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestIComp (CompIAdv when_IAdv) (DetNP (DetQuant IndefArt NumPl))))))
LangEng: not all the one hundred and tenth warmest had known when ones wouldn't have been
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (DetNP someSg_Det) (ComplVV want_VV (ComplSlash (SlashVV must_VV (SlashVV can8know_VV (AdVVPSlash always_AdV (AdVVPSlash always_AdV (AdVVPSlash always_AdV (SlashV2a do_V2)))))) (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (AdvVP (UseComp (CompAdv everywhere_Adv)) now_Adv)))))))
LangEng: some would want to have to be able to always always always do you , that would have been everywhere now
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (ExtAdvNP (UsePron youPl_Pron) (PrepNP in8front_Prep (CountNP somePl_Det (DetNP (DetQuant DefArt (NumCard (NumDigits (IDig D_7)))))))) (UseV sleep_V))
LangEng: you , in front of some of the 7 , will sleep
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (ExtAdvNP (UsePron i_Pron) everywhere_Adv) (UseV live_V))
LangEng: I , everywhere , hadn't lived
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetCN many_Det (AdjCN (AdjOrd (OrdNumeralSuperl (num (pot3plus (pot1as2 (pot1 n4)) (pot2plus (pot0 n7) (pot1to19 n3)))) red_A)) (ComplN2 (Use3N3 distance_N3) (CountNP someSg_Det (CountNP every_Det (PPartNP (UsePN paris_PN) teach_V2)))))) (ComplVA become_VA (AdjOrd (OrdSuperl cold_A))))
LangEng: many forty thousand seven hundred and thirteenth reddest distances to some of everything of Paris taught would have become coldest
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PredetNP most_Predet (UsePron she_Pron)) (UseV come_V))
LangEng: most she wouldn't have come
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (DetCN few_Det (UseN bike_N)) (AdVVP always_AdV (ComplVA become_VA (UseComparA big_A))))
LangEng: few bikes had always become bigger
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (DetNP someSg_Det) (ComplVV want_VV (ComplSlash (AdVVPSlash always_AdV (Slash3V3 send_V3 (UsePN paris_PN))) (ExtAdvNP (AdvNP (RelNP (PPartNP (ExtAdvNP (UsePron it_Pron) everywhere_Adv) have_V2) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP (UseV jump_V)))) everywhere_Adv) everywhere_Adv))))
LangEng: some wanted to always send it , everywhere , had , that jumps , everywhere , everywhere , to Paris
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (PredetNP not_Predet (PredetNP all_Predet (UsePN john_PN))) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestIComp (CompIAdv why_IAdv) (PPartNP (UsePron i_Pron) kill_V2)))))
LangEng: not all John didn't know why I killed wouldn't have been
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (DetCN (DetQuant DefArt NumPl) (AdvCN (PossNP (PartNP (RelCN (UseN2 (Use3N3 distance_N3)) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP UseCopula))) (PredetNP only_Predet (MassNP (UseN2 (Use3N3 distance_N3))))) (UsePron i_Pron)) now_Adv)) (UseComp (CompNP (AdvNP (UsePron it_Pron) now_Adv))))
LangEng: the distances that hadn't been of only distance of mine now would be it now
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (CountNP many_Det (PredetNP not_Predet (UsePron it_Pron))) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PPos (QuestSlash whoPl_IP (SlashVP (ExtAdvNP (MassNP (PossNP (UseN cat_N) (UsePN john_PN))) (PrepNP in8front_Prep (ExtAdvNP (DetNP someSg_Det) everywhere_Adv))) (Slash2V3 talk_V3 (CountNP somePl_Det (UsePN paris_PN))))))))
LangEng: many of not it know whom cat of John , in front of some , everywhere , would talk to some of Paris about
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (DetNP (DetQuantOrd that_Quant (NumCard (AdNum at_least_AdN (AdNum at_least_AdN (NumDigits (IDig D_5))))) (OrdSuperl green_A))) (UseV go_V))
LangEng: those at least at least 5 greenest had gone
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (DetNP every_Det) (UseComp (CompCN (PartNP (ApposCN (UseN2 (ComplN3 distance_N3 (MassNP (UseN car_N)))) (CountNP (DetQuant DefArt NumPl) (ExtAdvNP (PredetNP only_Predet (UsePron he_Pron)) everywhere_Adv))) (AdvNP (RelNP (DetCN (DetQuant this_Quant NumPl) (AdjCN (UseComparA new_A) (UseN ship_N))) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP (AdvVP UseCopula everywhere_Adv)))) everywhere_Adv)))))
LangEng: everything will be a distance from car they of only him , everywhere , of these newer ships , that had been everywhere , everywhere
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (DetCN many_Det (UseN grammar_N)) (ComplVA become_VA (PositA good_A)))
LangEng: many grammars hadn't become good
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (ExtAdvNP (DetNP (DetQuantOrd that_Quant NumPl (OrdSuperl clean_A))) (PrepNP with_Prep (UsePN john_PN))) (ComplVV must_VV (ComplVA become_VA (UseComparA good_A))))
LangEng: those cleanest , with John , would have had to become better
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePron he_Pron) (ComplVA become_VA (AdAP almost_AdA (UseComparA bad_A))))
LangEng: he had become almost worse
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (PredetNP not_Predet (AdvNP (CountNP many_Det (MassNP (ApposCN (UseN2 (Use2N3 distance_N3)) (PPartNP (CountNP (DetQuant that_Quant NumSg) (UsePN john_PN)) eat_V2)))) here_Adv)) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PPos (QuestCl (PredVP (ExtAdvNP (PPartNP (PredetNP only_Predet (UsePron youPl_Pron)) have_V2) everywhere_Adv) (UseV live_V))))))
LangEng: not many of distance that of John eaten here know if only you had , everywhere , would have lived
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePron youPl_Pron) (UseV run_V))
LangEng: you don't run
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (CountNP many_Det (DetCN (DetQuant IndefArt NumPl) (AdvCN (ComplN2 (Use2N3 distance_N3) (AdvNP (PredetNP not_Predet (PPartNP (UsePron she_Pron) do_V2)) (PrepNP with_Prep (MassNP (UseN2 father_N2))))) everywhere_Adv))) (ComplVA become_VA (AdAP very_AdA (PositA clean_A))))
LangEng: many of distances from not her done with father everywhere become very clean
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (DetNP someSg_Det) (UseV sleep_V))
LangEng: some won't have slept
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePN paris_PN) (AdVVP always_AdV (ComplVS say_VS (UseCl (TTAnt TFut AAnter) PPos (PredVP (CountNP someSg_Det (PPartNP (UsePron i_Pron) fear_V2)) (ComplVV can_VV (ComplVV want_VV (UseComp (CompAdv now_Adv)))))))))
LangEng: Paris will always have said that some of me feared will have been able to want to be now
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (CountNP few_Det (MassNP (ComplN2 (Use3N3 distance_N3) (AdvNP (DetNP (DetQuant (PossPron youPl_Pron) NumPl)) everywhere_Adv)))) (ComplVV must_VV (UseComp (CompNP (CountNP every_Det (PredetNP not_Predet (UsePron he_Pron)))))))
LangEng: few of distance to yours everywhere won't have to be everything of not him
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePron youPl_Pron) (UseComp (CompCN (PartNP (UseN2 (Use3N3 distance_N3)) (DetNP (DetQuantOrd that_Quant (NumCard (NumDigits (IDig D_2))) (OrdDigits (IDig D_5))))))))
LangEng: you had been distances of those 2 5th
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (AdvNP (PredetNP only_Predet (RelNP (UsePron we_Pron) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP (UseV travel_V))))) (PrepNP behind_Prep (DetCN few_Det (PartNP (PartNP (UseN2 (ComplN3 distance_N3 (UsePN john_PN))) (ExtAdvNP (DetNP somePl_Det) (PrepNP with_Prep (UsePron i_Pron)))) (DetNP few_Det))))) (UseComp (CompAP (PositA small_A))))
LangEng: only we , that had travelled , behind few distances from John of some , with me , of few won't be small
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (ExtAdvNP (RelNP (AdvNP (UsePN paris_PN) now_Adv) (UseRCl (TTAnt TFut AAnter) PNeg (RelCl (PredVP (UsePN paris_PN) (ComplVA become_VA (AdAP very_AdA (UseComparA warm_A))))))) now_Adv) (AdVVP always_AdV (ComplVS hope_VS (UseCl (TTAnt TFut ASimul) PPos (PredVP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP (AdvVP UseCopula everywhere_Adv)))) (UseComp (CompAdv here_Adv)))))))
LangEng: Paris now , such that Paris won't have become very warmer , now , always hopes that Paris , that wasn't everywhere , will be here
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (DetNP somePl_Det) (AdvVP (UseV come_V) now_Adv))
LangEng: some wouldn't have come now
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PPartNP (ExtAdvNP (AdvNP (DetNP somePl_Det) everywhere_Adv) everywhere_Adv) cut_V2) (UseComp (CompAP (AdAP very_AdA (UseComparA old_A)))))
LangEng: some everywhere , everywhere , cut aren't very older
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (CountNP every_Det (UsePron he_Pron)) (UseV sleep_V))
LangEng: everything of him sleeps
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PPartNP (CountNP somePl_Det (PredetNP only_Predet (MassNP (AdjCN (AdAP almost_AdA (AdjOrd (OrdSuperl old_A))) (RelCN (UseN cat_N) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP UseCopula))))))) bite_V2) (AdVVP always_AdV (ComplVV can_VV (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestCl (PredVP (DetCN many_Det (UseN blood_N)) (UseV sleep_V))))))))
LangEng: some of only almost oldest cat that isn't bitten would always have been able to know if many bloods slept
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePN paris_PN) (UseV live_V))
LangEng: Paris doesn't live
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (CountNP (DetQuantOrd (PossPron we_Pron) NumSg (OrdNumeralSuperl (num (pot2as3 (pot1as2 (pot1plus n7 (pot0 n7))))) hot_A)) (ExtAdvNP (AdvNP (UsePron youPl_Pron) everywhere_Adv) (PrepNP on_Prep (UsePN john_PN)))) (AdvVP (ComplVA become_VA (PositA young_A)) everywhere_Adv))
LangEng: our seventy &+ - &+ seventh hottest of you everywhere , on John , won't have become young everywhere
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (RelCN (UseN man_N) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (ComplVV must_VV (AdVVP always_AdV (ComplVV want_VV UseCopula))))))) (ComplVV can_VV (ComplSlash (SlashV2a understand_V2) (MassNP (ComplN2 (Use2N3 distance_N3) (MassNP (ComplN2 (Use2N3 distance_N3) (DetNP (DetQuant DefArt NumSg)))))))))
LangEng: man that won't have to always want to be wouldn't be able to understand distance from distance from it
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (MassNP (PossNP (ComplN2 (Use2N3 distance_N3) (UsePron i_Pron)) (CountNP many_Det (RelNP (MassNP (AdvCN (PossNP (UseN house_N) (UsePN john_PN)) everywhere_Adv)) (UseRCl (TTAnt TPast ASimul) PPos (RelSlash IdRP (SlashVP (UsePN john_PN) (SlashV2a see_V2)))))))) (ComplVS know_VS (UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePN paris_PN) (ComplSlash (SlashVV can8know_VV (SlashVV must_VV (Slash2V3 give_V3 (UsePron he_Pron)))) (DetNP every_Det))))))
LangEng: distance from me of many of house of John everywhere , that John saw , would have known that Paris wouldn't be able to have to give him everything
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (MassNP (RelCN (ComplN2 (Use3N3 distance_N3) (CountNP many_Det (ExtAdvNP (DetCN every_Det (ApposCN (UseN2 father_N2) (UsePN paris_PN))) now_Adv))) (UseRCl (TTAnt TCond AAnter) PPos (RelCl (PredVP (AdvNP (AdvNP (UsePron he_Pron) now_Adv) (PrepNP behind_Prep (DetNP few_Det))) (AdVVP always_AdV (ComplVV want_VV (ComplVV can_VV UseCopula)))))))) UseCopula)
LangEng: distance to many of every father Paris , now , such that he now behind few would always have wanted to be able to be has been
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (MassNP (RelCN (ApposCN (RelCN (PossNP (AdjCN (AdjOrd (OrdSuperl clean_A)) (ComplN2 (Use2N3 distance_N3) (UsePN paris_PN))) (CountNP (DetQuantOrd (PossPron it_Pron) NumSg (OrdSuperl big_A)) (UsePN paris_PN))) (UseRCl (TTAnt TFut AAnter) PNeg (RelCl (PredVP (DetNP every_Det) (AdVVP always_AdV UseCopula))))) (PredetNP only_Predet (UsePN paris_PN))) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP (ComplVS fear_VS (UseCl (TTAnt TPres ASimul) PNeg (PredVP (DetNP few_Det) (ComplVV can8know_VV UseCopula)))))))) (ComplSlash (SlashV2a have_V2) (PredetNP all_Predet (AdvNP (CountNP every_Det (CountNP somePl_Det (CountNP somePl_Det (AdvNP (UsePron we_Pron) everywhere_Adv)))) (PrepNP with_Prep (PredetNP all_Predet (DetNP every_Det)))))))
LangEng: cleanest distance from Paris of its biggest of Paris such that everything won't always have been only Paris that won't have feared that few can't be will have all everything of some of some of us everywhere with all everything
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePN paris_PN) UseCopula)
LangEng: Paris isn't
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (MassNP (PossNP (UseN tree_N) (ExtAdvNP (DetNP every_Det) here_Adv))) (AdVVP always_AdV UseCopula))
LangEng: tree of everything , here , was always
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (AdvNP (CountNP few_Det (RelNP (ExtAdvNP (MassNP (ApposCN (AdvCN (UseN baby_N) everywhere_Adv) (DetNP few_Det))) here_Adv) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (UseComp (CompAP (PositA clean_A))))))) here_Adv) (ComplSlash (SlashVV want_VV (SlashVV want_VV (AdvVPSlash (AdvVPSlash (AdVVPSlash always_AdV (SlashV2a love_V2)) now_Adv) (PrepNP in_Prep (UsePN paris_PN))))) (PPartNP (PredetNP most_Predet (AdvNP (RelNP (CountNP few_Det (UsePN paris_PN)) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP (ComplVV can_VV UseCopula)))) everywhere_Adv)) kill_V2)))
LangEng: few of baby everywhere few , here , that has been clean , here want to want to always love now in Paris most few of Paris , that wouldn't have been able to be , everywhere killed
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (PredetNP most_Predet (PPartNP (ExtAdvNP (PredetNP not_Predet (MassNP (PossNP (ComplN2 (Use2N3 distance_N3) (DetNP someSg_Det)) (PPartNP (UsePN john_PN) teach_V2)))) here_Adv) read_V2)) (UseComp (CompCN (AdjCN (AdjOrd (OrdNumeral (num (pot2as3 (pot1as2 pot110))))) (AdvCN (UseN horse_N) everywhere_Adv)))))
LangEng: most not distance from some of John taught , here , read has been a tenth horse everywhere
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePN john_PN) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PPos (QuestIComp (CompIP (IdetCN how8many_IDet (UseN2 (Use2N3 distance_N3)))) (AdvNP (PredetNP only_Predet (PPartNP (AdvNP (UsePN john_PN) everywhere_Adv) teach_V2)) here_Adv)))))
LangEng: John hasn't known how many distances only John everywhere taught here would be
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePN john_PN) (UseV swim_V))
LangEng: John had swum
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (PPartNP (CountNP few_Det (CountNP (DetQuant that_Quant NumPl) (MassNP (RelCN (PossNP (AdjCN (UseComparA old_A) (UseN grammar_N)) (PPartNP (UsePron i_Pron) count_V2)) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP (UseV sleep_V))))))) understand_V2) (ComplSlash (Slash2V3 give_V3 (RelNP (UsePN john_PN) (UseRCl (TTAnt TPast ASimul) PPos (RelCl (PredVP (ExtAdvNP (UsePN paris_PN) everywhere_Adv) (AdVVP always_AdV UseCopula)))))) (DetNP many_Det)))
LangEng: few of those of older grammar of mine counted that would sleep understood won't give John , such that Paris , everywhere , was always , many
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (RelNP (PPartNP (MassNP (AdvCN (UseN2 father_N2) here_Adv)) see_V2) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (ComplVV want_VV (ComplVV can8know_VV (ComplSlash (AdvVPSlash (SlashV2a find_V2) now_Adv) (CountNP somePl_Det (UsePron it_Pron)))))))) (ComplSlash (Slash3V3 give_V3 (PPartNP (CountNP (DetQuantOrd IndefArt NumPl (OrdSuperl blue_A)) (MassNP (ApposCN (AdjCN (PositA young_A) (UseN2 father_N2)) (DetNP few_Det)))) do_V2)) (PPartNP (RelNP (DetCN many_Det (PossNP (UseN child_N) (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP UseCopula))))) (UseRCl (TTAnt TPres AAnter) PPos (RelSlash IdRP (SlashVP (ExtAdvNP (DetNP someSg_Det) here_Adv) (AdVVPSlash always_AdV (SlashV2a eat_V2)))))) see_V2)))
LangEng: father here seen , that will want to be able to find now some of it , wouldn't have given many children of yours , that have been , that some , here , has always eaten , seen bluest of young father few done
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP only_Predet (DetNP every_Det)) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PPos (QuestVP whatPl_IP (ComplVV can_VV (ComplVA become_VA (PositA clean_A)))))))
LangEng: only everything doesn't know what have been able to become clean
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (RelNP (AdvNP (MassNP (PossNP (AdvCN (AdjCN (UseComparA blue_A) (ApposCN (UseN2 father_N2) (DetNP many_Det))) here_Adv) (DetNP (DetQuant this_Quant NumPl)))) now_Adv) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (AdvVP (UseV sleep_V) (PrepNP from_Prep (UsePN john_PN)))))) (ComplVV can_VV (UseComp (CompAdv now_Adv))))
LangEng: bluer father many here of these now , that will sleep from John , won't be able to be now
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (RelNP (RelNP (DetNP many_Det) (UseRCl (TTAnt TCond ASimul) PPos (RelCl (PredVP (DetCN few_Det (UseN2 (Use2N3 distance_N3))) (ComplSlash (Slash2V3 add_V3 (UsePron i_Pron)) (PredetNP only_Predet (DetNP every_Det))))))) (UseRCl (TTAnt TPast AAnter) PPos (RelCl (PredVP (PredetNP all_Predet (PPartNP (DetNP many_Det) kill_V2)) (ComplVA become_VA (AdAP too_AdA (AdAP so_AdA (PositA small_A)))))))) (ComplVV can8know_VV (ComplSlash (Slash2V3 add_V3 (RelNP (PPartNP (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP UseCopula))) wait_V2) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (ComplSlash (SlashV2a drink_V2) (DetNP many_Det)))))) (AdvNP (DetNP (DetQuantOrd IndefArt NumSg (OrdDigits (IIDig D_1 (IDig D_5))))) (PrepNP in8front_Prep (AdvNP (UsePron we_Pron) here_Adv))))))
LangEng: many , such that few distances would add me to only everything , such that all many killed had become too so small , would be able to add you , that would have been , waited , that will drink many , to a 1 &+ 5th in front of us here
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (MassNP (ApposCN (ComplN2 (ComplN3 distance_N3 (UsePron youSg_Pron)) (UsePN john_PN)) (PredetNP not_Predet (PPartNP (MassNP (UseN2 father_N2)) drink_V2)))) (ComplVS say_VS (UseCl (TTAnt TFut ASimul) PPos (PredVP (MassNP (PartNP (ApposCN (UseN animal_N) (DetNP somePl_Det)) (DetNP (DetQuant no_Quant NumPl)))) (AdvVP (UseV travel_V) (PrepNP from_Prep (PredetNP most_Predet (DetCN (DetQuant no_Quant NumPl) (UseN beer_N)))))))))
LangEng: distance from you to John not father drunk won't say that animal some of none will travel from most no beers
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (CountNP (DetQuant (PossPron youSg_Pron) NumPl) (UsePron youSg_Pron)) (UseV swim_V))
LangEng: yours of you won't have swum
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (DetNP few_Det) (AdvVP (AdVVP always_AdV UseCopula) now_Adv))
LangEng: few will always be now
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (DetNP (DetQuantOrd (PossPron it_Pron) NumPl (OrdDigits (IIDig D_7 (IIDig D_6 (IDig D_4)))))) (ComplVA become_VA (AdjOrd (OrdSuperl black_A))))
LangEng: its 7 &+ 6 &+ 4th will have become blackest
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (PPartNP (UsePron youSg_Pron) find_V2) (ComplVS know_VS (UseCl (TTAnt TFut AAnter) PPos (PredVP (PPartNP (CountNP (DetQuantOrd this_Quant NumPl (OrdDigits (IDig D_9))) (AdvNP (UsePron we_Pron) everywhere_Adv)) find_V2) (UseV live_V)))))
LangEng: you found didn't know that these 9th of us everywhere found will have lived
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PPartNP (ExtAdvNP (UsePron it_Pron) everywhere_Adv) understand_V2) (ComplVV can_VV (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PPos (QuestVP (IdetIP how8many_IDet) (UseComp (CompNP (UsePron it_Pron))))))))
LangEng: it , everywhere , understood would have been able to know how many will have been it
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (RelNP (DetNP (DetQuant no_Quant NumSg)) (UseRCl (TTAnt TFut AAnter) PNeg (RelCl (PredVP (UsePN paris_PN) (ComplVA become_VA (AdAP very_AdA (PositA cold_A))))))) (UseV run_V))
LangEng: none , such that Paris won't have become very cold , ran
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (UsePron she_Pron) (AdVVP always_AdV (AdvVP (ComplVA become_VA (PositA new_A)) now_Adv)))
LangEng: she has always become new now
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePN john_PN) (ComplVS know_VS (UseCl (TTAnt TCond AAnter) PNeg (PredVP (CountNP (DetQuant no_Quant NumPl) (CountNP someSg_Det (ExtAdvNP (PredetNP only_Predet (DetNP someSg_Det)) everywhere_Adv))) UseCopula))))
LangEng: John didn't know that none of some of only some , everywhere , wouldn't have been
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (DetNP someSg_Det) (ComplVV can8know_VV (ComplSlash (Slash2V3 sell_V3 (UsePN john_PN)) (DetNP someSg_Det))))
LangEng: some has been able to sell John to some
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (UsePron she_Pron) (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PNeg (QuestCl (PredVP (RelNP (CountNP somePl_Det (DetNP few_Det)) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP UseCopula))) (ComplVA become_VA (AdAP almost_AdA (UseComparA yellow_A))))))))
LangEng: she won't have known if some of few , that aren't , hadn't become almost more yellow
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (AdvNP (RelNP (DetCN someSg_Det (UseN2 (Use2N3 distance_N3))) (UseRCl (TTAnt TCond AAnter) PNeg (RelSlash IdRP (SlashVP (CountNP many_Det (DetCN few_Det (UseN2 father_N2))) (Slash2V3 talk_V3 (DetNP somePl_Det)))))) now_Adv) (AdvVP (UseV walk_V) here_Adv))
LangEng: some distance , that many of few fathers wouldn't have talked to some about , now has walked here
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (DetNP few_Det) (ComplVA become_VA (AdAP almost_AdA (AdjOrd (OrdDigits (IDig D_0))))))
LangEng: few wouldn't become almost 0th
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (MassNP (AdjCN (PositA new_A) (RelCN (UseN language_N) (UseRCl (TTAnt TPres AAnter) PNeg (RelCl (PredVP (MassNP (UseN fish_N)) (ComplSlash (SlashV2a find_V2) (DetNP every_Det)))))))) (ComplVS know_VS (UseCl (TTAnt TPast AAnter) PPos (PredVP (PredetNP all_Predet (DetCN someSg_Det (AdjCN (UseComparA warm_A) (PartNP (UseN2 father_N2) (DetNP few_Det))))) (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PNeg (QuestCl (PredVP (UsePron it_Pron) (UseV walk_V)))))))))
LangEng: new language such that fish hasn't found everything will know that all some warmer father of few had known if it doesn't walk
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (CountNP few_Det (UsePN paris_PN)) (AdvVP (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot2as3 (pot2plus pot01 (pot1 n3)))) good_A))) here_Adv))
LangEng: few of Paris have become one hundred and thirtieth best here
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (ExtAdvNP (DetCN every_Det (RelCN (UseN dog_N) (UseRCl (TTAnt TCond AAnter) PPos (RelSlash IdRP (SlashVP (CountNP few_Det (UsePron i_Pron)) (SlashVV can_VV (SlashV2a wait_V2))))))) here_Adv) (ComplVV can8know_VV (ComplVS fear_VS (UseCl (TTAnt TCond AAnter) PPos (PredVP (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (AdvVP UseCopula now_Adv)))) (AdVVP always_AdV (ComplSlash (SlashV2a understand_V2) (UsePN paris_PN))))))))
LangEng: every dog that few of me would have been able to wait for , here , will be able to fear that you , that will be now , would always have understood Paris
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetNP (DetQuantOrd DefArt NumPl (OrdNumeralSuperl (num (pot2as3 (pot2plus pot01 pot111))) young_A))) (AdvVP (AdvVP (UseComp (CompNP (DetCN every_Det (PartNP (PartNP (UseN river_N) (DetNP many_Det)) (CountNP someSg_Det (UsePron youSg_Pron)))))) now_Adv) here_Adv))
LangEng: the one hundred and eleventh youngest would have been every river of many of some of you now here
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetNP (DetQuant this_Quant NumSg)) (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PNeg (QuestIAdv how_IAdv (PredVP (DetNP (DetQuant (PossPron youPl_Pron) NumPl)) (AdvVP (AdVVP always_AdV (AdvVP UseCopula here_Adv)) now_Adv))))) here_Adv))
LangEng: this didn't know here how yours won't always be here now
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (PPartNP (DetNP somePl_Det) love_V2) (ComplSlash (SlashV2a understand_V2) (RelNP (RelNP (UsePN john_PN) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (UseComp (CompCN (UseN2 father_N2)))))) (UseRCl (TTAnt TPast AAnter) PPos (RelSlash IdRP (SlashVP (CountNP somePl_Det (DetNP (DetQuant no_Quant NumSg))) (SlashV2a kill_V2)))))))
LangEng: some loved will understand John , that wouldn't be a father , that some of none had killed
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePron she_Pron) (ComplVA become_VA (AdAP so_AdA (AdjOrd (OrdDigits (IIDig D_2 (IIDig D_0 (IDig D_6))))))))
LangEng: she hasn't become so 2 &+ 0 &+ 6th
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (ExtAdvNP (AdvNP (MassNP (AdvCN (ComplN2 (Use2N3 distance_N3) (CountNP (DetQuantOrd DefArt NumPl (OrdSuperl black_A)) (PPartNP (UsePN john_PN) see_V2))) everywhere_Adv)) here_Adv) here_Adv) (AdVVP always_AdV (ComplVS know_VS (UseCl (TTAnt TFut AAnter) PNeg (PredVP (CountNP someSg_Det (PPartNP (AdvNP (DetNP every_Det) here_Adv) find_V2)) (ComplVS say_VS (UseCl (TTAnt TCond AAnter) PPos (PredVP (UsePron it_Pron) (AdvVP UseCopula here_Adv)))))))))
LangEng: distance from the blackest of John seen everywhere here , here , won't always know that some of everything here found won't have said that it would have been here
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (AdvNP (PredetNP all_Predet (DetNP many_Det)) (PrepNP on_Prep (PredetNP most_Predet (PPartNP (CountNP every_Det (UsePN john_PN)) understand_V2)))) (ComplSlash (Slash3V3 talk_V3 (DetCN few_Det (UseN apple_N))) (DetNP someSg_Det)))
LangEng: all many on most everything of John understood will talk to some about few apples
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPres AAnter) PNeg (RelSlash IdRP (SlashVP (UsePron we_Pron) (Slash2V3 talk_V3 (CountNP (DetQuantOrd IndefArt NumPl (OrdSuperl new_A)) (MassNP (UseN2 father_N2)))))))) (UseComp (CompNP (ExtAdvNP (UsePron it_Pron) here_Adv))))
LangEng: Paris , that we haven't talked to newest of father about , won't have been it , here
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (RelNP (RelNP (CountNP few_Det (DetCN (DetQuantOrd IndefArt NumSg (OrdDigits (IIDig D_4 (IDig D_5)))) (PartNP (PossNP (UseN2 (Use3N3 distance_N3)) (UsePN paris_PN)) (PPartNP (AdvNP (UsePron youSg_Pron) here_Adv) have_V2)))) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP (ComplVV want_VV (UseComp (CompAdv everywhere_Adv)))))) (UseRCl (TTAnt TCond AAnter) PPos (RelCl (PredVP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP (AdvVP UseCopula here_Adv)))) (UseComp (CompAdv everywhere_Adv)))))) (UseV run_V))
LangEng: few of a 4 &+ 5th distance of Paris of you here had , that want to be everywhere , such that Paris , that wasn't here , would have been everywhere , have run
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePN paris_PN) (AdVVP always_AdV (UseV jump_V)))
LangEng: Paris hadn't always jumped
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (PPartNP (DetNP somePl_Det) eat_V2) (UseV jump_V))
LangEng: some eaten will jump
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePron it_Pron) UseCopula)
LangEng: it will have been
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PredetNP only_Predet (UsePron it_Pron)) (ComplSlash (AdVVPSlash always_AdV (SlashV2a drink_V2)) (PPartNP (ExtAdvNP (UsePron we_Pron) everywhere_Adv) have_V2)))
LangEng: only it would always have drunk us , everywhere , had
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (ExtAdvNP (DetNP every_Det) everywhere_Adv) (ComplSlash (AdvVPSlash (AdvVPSlash (SlashV2a have_V2) now_Adv) now_Adv) (ExtAdvNP (PredetNP only_Predet (RelNP (PredetNP only_Predet (CountNP every_Det (CountNP many_Det (DetNP someSg_Det)))) (UseRCl (TTAnt TPres AAnter) PNeg (RelSlash IdRP (SlashVP (UsePron youPl_Pron) (SlashV2a do_V2)))))) here_Adv)))
LangEng: everything , everywhere , had had now now only only everything of many of some , that you haven't done , here
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePron he_Pron) (ComplSlash (SlashV2a teach_V2) (ExtAdvNP (UsePron youPl_Pron) (PrepNP between_Prep (DetCN (DetQuantOrd this_Quant NumPl (OrdDigits (IIDig D_5 (IDig D_2)))) (AdvCN (RelCN (PossNP (UseN girl_N) (UsePron it_Pron)) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP UseCopula))) now_Adv))))))
LangEng: he wouldn't teach you , between these 5 &+ 2nd girls of its that won't be now
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (AdvNP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (UseComp (CompAP (UseComparA clean_A)))))) here_Adv) (ComplVA become_VA (PositA yellow_A)))
LangEng: Paris , that has been cleaner , here has become yellow
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePron youSg_Pron) (ComplVV want_VV (ComplVA become_VA (AdAP almost_AdA (UseComparA clean_A)))))
LangEng: you had wanted to become almost cleaner
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (CountNP every_Det (RelNP (PPartNP (MassNP (PartNP (ApposCN (PartNP (UseN man_N) (UsePron it_Pron)) (AdvNP (DetNP many_Det) now_Adv)) (CountNP few_Det (UsePron youSg_Pron)))) count_V2) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (ComplVA become_VA (UseComparA white_A)))))) (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PPos (QuestVP (IdetCN how8many_IDet (ApposCN (RelCN (ComplN2 (Use2N3 distance_N3) (UsePN john_PN)) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP UseCopula))) (RelNP (PredetNP not_Predet (DetNP every_Det)) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP UseCopula))))) (ComplVS say_VS (UseCl (TTAnt TPast AAnter) PNeg (PredVP (ExtAdvNP (UsePron we_Pron) everywhere_Adv) (UseComp (CompAdv here_Adv)))))))))
LangEng: everything of man of it many now of few of you counted , that won't become whiter , didn't know how many distances from John that would have been not everything , that will have been , say that we , everywhere , hadn't been here
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetNP somePl_Det) (ComplVV want_VV (AdVVP always_AdV UseCopula)))
LangEng: some didn't want to always be
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePron i_Pron) (ComplVS fear_VS (UseCl (TTAnt TPres ASimul) PNeg (PredVP (DetNP somePl_Det) (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PPos (QuestSlash whatSg_IP (SlashVP (DetNP someSg_Det) (SlashV2a understand_V2)))))))))
LangEng: I fear that some don't know what some had understood
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePron youSg_Pron) (AdVVP always_AdV (ComplVV can_VV (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PPos (QuestSlash whatSg_IP (SlashVP (CountNP few_Det (UsePN john_PN)) (AdVVPSlash always_AdV (SlashV2a cut_V2)))))))))
LangEng: you won't always be able to know what few of John would always cut
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (RelNP (MassNP (AdvCN (UseN2 (ComplN3 distance_N3 (UsePron she_Pron))) now_Adv)) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (AdVVP always_AdV (ComplVA become_VA (PositA bad_A)))))) (ComplVV can_VV (ComplVS fear_VS (UseCl (TTAnt TPres AAnter) PNeg (PredVP (ExtAdvNP (PredetNP only_Predet (MassNP (UseN dog_N))) (PrepNP with_Prep (PredetNP only_Predet (UsePron i_Pron)))) UseCopula)))))
LangEng: distance from her now , that wouldn't always become bad , has been able to fear that only dog , with only me , hasn't been
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PredetNP all_Predet (CountNP many_Det (UsePN john_PN))) (UseV play_V))
LangEng: all many of John wouldn't have played
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (UsePron i_Pron) (AdvVP (UseComp (CompCN (AdjCN (UseComparA green_A) (UseN2 father_N2)))) now_Adv))
LangEng: I have been a greener father now
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePron youSg_Pron) (ComplVS hope_VS (UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePron it_Pron) (ComplVS hope_VS (UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetNP (DetQuant that_Quant NumSg)) UseCopula)))))))
LangEng: you wouldn't have hoped that it wouldn't have hoped that that won't be
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (AdvNP (PredetNP only_Predet (AdvNP (DetNP few_Det) (PrepNP behind_Prep (ExtAdvNP (UsePron youPl_Pron) here_Adv)))) now_Adv) (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot2as3 (pot2 pot01))) new_A))))
LangEng: only few behind you , here , now won't have become one hundredth newest
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (PPartNP (DetNP somePl_Det) teach_V2) (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_4)))))
LangEng: some taught will have become 4th
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePN john_PN) (ComplSlash (SlashVV can_VV (SlashV2a have_V2)) (UsePN paris_PN)))
LangEng: John would be able to have Paris
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (AdvNP (ExtAdvNP (RelNP (PredetNP only_Predet (DetNP every_Det)) (UseRCl (TTAnt TFut AAnter) PNeg (RelSlash IdRP (SlashVP (UsePron he_Pron) (SlashV2a bite_V2))))) here_Adv) now_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PPos (QuestIAdv how_IAdv (PredVP (PPartNP (PredetNP most_Predet (AdvNP (DetNP every_Det) everywhere_Adv)) do_V2) (UseComp (CompAP (AdjOrd (OrdSuperl hot_A)))))))))
LangEng: only everything , that he won't have bitten , here , now will have known how most everything everywhere done will have been hottest
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (DetCN (DetQuant IndefArt NumSg) (ApposCN (UseN2 (Use2N3 distance_N3)) (UsePron she_Pron))) (ComplVV can_VV (AdvVP (ComplVS say_VS (UseCl (TTAnt TPres ASimul) PPos (PredVP (DetCN many_Det (AdvCN (UseN ship_N) here_Adv)) (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PPos (QuestVP whatPl_IP UseCopula)))))) (PrepNP after_Prep (PredetNP most_Predet (PredetNP not_Predet (PPartNP (MassNP (UseN2 father_N2)) cut_V2)))))))
LangEng: a distance she would be able to say after most not father cut that many ships here know what will be
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (RelNP (CountNP (DetQuantOrd that_Quant (NumCard (NumNumeral (num (pot3plus (pot2plus pot01 pot110) (pot2plus pot01 pot111))))) (OrdSuperl big_A)) (DetNP many_Det)) (UseRCl (TTAnt TPast AAnter) PPos (RelSlash IdRP (SlashVP (CountNP someSg_Det (RelNP (DetCN somePl_Det (UseN girl_N)) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP UseCopula)))) (AdVVPSlash always_AdV (SlashV2a find_V2)))))) UseCopula)
LangEng: those one hundred and ten thousand one hundred and eleven biggest of many , that some of some girls , that wouldn't have been , had always found , were
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetCN (DetQuantOrd that_Quant NumPl (OrdNumeralSuperl (num (pot3plus (pot2 (pot0 n2)) (pot2plus pot01 pot110))) big_A)) (UseN fire_N)) UseCopula)
LangEng: those two hundred thousand one hundred and tenth biggest fires haven't been
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (ExtAdvNP (MassNP (PossNP (UseN2 (ComplN3 distance_N3 (DetNP many_Det))) (CountNP every_Det (PPartNP (DetCN few_Det (UseN bird_N)) do_V2)))) (PrepNP in8front_Prep (PredetNP only_Predet (PredetNP only_Predet (RelNP (PPartNP (DetCN many_Det (UseN child_N)) count_V2) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (ComplVV want_VV UseCopula)))))))) (ComplSlash (Slash3V3 sell_V3 (CountNP (DetQuant no_Quant NumSg) (ExtAdvNP (ExtAdvNP (DetCN (DetQuantOrd (PossPron youPl_Pron) NumSg (OrdSuperl ready_A)) (AdjCN (UseComparA green_A) (UseN book_N))) now_Adv) here_Adv))) (UsePN paris_PN)))
LangEng: distance from many of everything of few birds done , in front of only only many children counted , that wouldn't want to be , won't have sold Paris to none of your readiest greener book , now , here
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (UsePron he_Pron) (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PNeg (QuestSlash whatPl_IP (SlashVP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP (UseV swim_V)))) (SlashV2a find_V2))))))
LangEng: he knew what Paris , that doesn't swim , hadn't found
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (PPartNP (DetCN somePl_Det (ComplN2 (Use2N3 distance_N3) (RelNP (PPartNP (CountNP many_Det (DetNP every_Det)) drink_V2) (UseRCl (TTAnt TCond ASimul) PPos (RelSlash IdRP (SlashVP (UsePron he_Pron) (SlashV2a count_V2))))))) drink_V2) (UseComp (CompCN (ComplN2 (ComplN3 distance_N3 (ExtAdvNP (DetCN (DetQuant IndefArt NumSg) (PartNP (UseN2 father_N2) (DetNP someSg_Det))) now_Adv)) (RelNP (RelNP (RelNP (AdvNP (UsePron youPl_Pron) here_Adv) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP UseCopula))) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (UseV come_V)))) (UseRCl (TTAnt TCond AAnter) PPos (RelCl (PredVP (UsePron he_Pron) UseCopula))))))))
LangEng: some distances from many of everything drunk , that he would count , drunk haven't been distances from a father of some , now , to you here , that will be , that will come , such that he would have been
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (DetCN somePl_Det (AdjCN (AdAP very_AdA (UseComparA yellow_A)) (AdjCN (AdjOrd (OrdNumeral (num (pot3 (pot2 pot01))))) (RelCN (PossNP (ComplN2 (ComplN3 distance_N3 (UsePN paris_PN)) (DetNP somePl_Det)) (AdvNP (UsePN paris_PN) here_Adv)) (UseRCl (TTAnt TCond ASimul) PPos (RelSlash IdRP (SlashVP (UsePron she_Pron) (SlashV2a read_V2)))))))) (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_7)))))
LangEng: some very more yellow one hundred thousandth distances from Paris to some of Paris here that she would read became 7th
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetNP (DetQuantOrd that_Quant NumSg (OrdNumeral (num (pot3plus (pot1as2 (pot1 n4)) (pot2plus pot01 pot111)))))) UseCopula)
LangEng: that forty thousand one hundred and eleventh would have been
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePron i_Pron) (AdvVP (ComplVA become_VA (AdjOrd (OrdDigits (IIDig D_9 (IDig D_9))))) (PrepNP between_Prep (UsePN john_PN))))
LangEng: I had become 9 &+ 9th between John
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (AdvNP (DetCN many_Det (AdjCN (AdjOrd (OrdSuperl white_A)) (PartNP (PartNP (ComplN2 (Use3N3 distance_N3) (MassNP (UseN sea_N))) (ExtAdvNP (DetCN every_Det (UseN city_N)) everywhere_Adv)) (PPartNP (PredetNP most_Predet (PredetNP all_Predet (DetNP few_Det))) wait_V2)))) (PrepNP behind_Prep (UsePron i_Pron))) (AdvVP (ComplSlash (Slash3V3 give_V3 (DetCN many_Det (RelCN (UseN2 (ComplN3 distance_N3 (UsePron she_Pron))) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP (AdvVP UseCopula now_Adv)))))) (CountNP many_Det (AdvNP (RelNP (PredetNP only_Predet (PredetNP not_Predet (UsePN john_PN))) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (UseV travel_V)))) here_Adv))) everywhere_Adv))
LangEng: many whitest distances to sea of every city , everywhere , of most all few waited behind me don't give many of only not John , that won't travel , here many distances from her that aren't now everywhere
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePron she_Pron) (ComplSlash (Slash3V3 give_V3 (DetNP (DetQuant IndefArt (NumCard (NumDigits (IDig D_8)))))) (UsePN john_PN)))
LangEng: she didn't give John 8
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (PossNP (ComplN2 (Use2N3 distance_N3) (DetNP somePl_Det)) (RelNP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP UseCopula))) (UseRCl (TTAnt TPres ASimul) PNeg (RelSlash IdRP (SlashVP (PredetNP all_Predet (UsePN paris_PN)) (AdVVPSlash always_AdV (SlashV2a love_V2)))))))) (AdVVP always_AdV (AdvVP (ComplSlash (Slash2V3 talk_V3 (AdvNP (DetNP somePl_Det) here_Adv)) (UsePron youPl_Pron)) now_Adv)))
LangEng: distance from some of Paris , that will have been , that all Paris doesn't always love , wouldn't always talk to some here about you now
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePN paris_PN) UseCopula)
LangEng: Paris isn't
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP all_Predet (DetCN many_Det (UseN book_N))) (UseComp (CompAdv now_Adv)))
LangEng: all many books aren't now
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (DetNP someSg_Det) (UseV go_V))
LangEng: some doesn't go
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePron he_Pron) (UseComp (CompNP (UsePron youPl_Pron))))
LangEng: he will have been you
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (PredetNP all_Predet (PPartNP (DetNP somePl_Det) cut_V2)) (ComplSlash (Slash2V3 send_V3 (DetCN many_Det (RelCN (UseN sea_N) (UseRCl (TTAnt TPast ASimul) PNeg (RelSlash IdRP (SlashVP (UsePron youSg_Pron) (SlashV2a see_V2))))))) (UsePN john_PN)))
LangEng: all some cut won't send many seas that you didn't see to John
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePron it_Pron) (UseV live_V))
LangEng: it didn't live
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (PPartNP (UsePron she_Pron) have_V2) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PPos (QuestIAdv when_IAdv (PredVP (DetCN many_Det (RelCN (ComplN2 father_N2 (DetNP many_Det)) (UseRCl (TTAnt TCond ASimul) PPos (RelVP IdRP UseCopula)))) (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PNeg (QuestVP whoPl_IP UseCopula)))))))))
LangEng: she had had known when many fathers of many that would be would always have known who weren't
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (CountNP every_Det (PredetNP most_Predet (UsePN john_PN))) (ComplVV must_VV (ComplVV must_VV (UseComp (CompNP (UsePN john_PN))))))
LangEng: everything of most John would have to have to be John
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePron she_Pron) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PPos (QuestIComp (CompIAdv when_IAdv) (PredetNP not_Predet (DetNP (DetQuantOrd this_Quant NumSg (OrdDigits (IDig D_7)))))))))
LangEng: she will know when not this 7th will have been
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePron we_Pron) (ComplVS hope_VS (UseCl (TTAnt TPres AAnter) PNeg (PredVP (PPartNP (DetCN few_Det (ComplN2 (ComplN3 distance_N3 (UsePron youSg_Pron)) (UsePN john_PN))) find_V2) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestCl (PredVP (DetNP somePl_Det) (AdvVP UseCopula here_Adv)))))))))
LangEng: we hope that few distances from you to John found haven't known if some wouldn't have been here
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePron she_Pron) (AdvVP (UseComp (CompNP (DetCN every_Det (UseN cat_N)))) now_Adv))
LangEng: she will have been every cat now
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (ExtAdvNP (UsePron he_Pron) now_Adv) (AdVVP always_AdV (ComplVA become_VA (UseComparA heavy_A))))
LangEng: he , now , will always have become heavier
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (CountNP many_Det (MassNP (UseN2 (Use2N3 distance_N3)))) (ComplVS say_VS (UseCl (TTAnt TPast AAnter) PNeg (PredVP (RelNP (PredetNP all_Predet (UsePron it_Pron)) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP (ComplSlash (SlashV2a have_V2) (UsePron it_Pron))))) (AdvVP (ComplVS hope_VS (UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePN john_PN) UseCopula))) here_Adv)))))
LangEng: many of distance would say that all it , that won't have had it , hadn't hoped here that John wouldn't have been
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (ExtAdvNP (UsePron youPl_Pron) (PrepNP with_Prep (MassNP (AdjCN (PositA ready_A) (AdvCN (RelCN (ComplN2 (Use3N3 distance_N3) (UsePN john_PN)) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP UseCopula))) here_Adv))))) UseCopula)
LangEng: you , with ready distance to John that had been here , won't be
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (ExtAdvNP (PPartNP (UsePN john_PN) cut_V2) now_Adv) (UseV walk_V))
LangEng: John cut , now , walked
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (PPartNP (PredetNP not_Predet (PPartNP (CountNP many_Det (MassNP (UseN beer_N))) teach_V2)) have_V2) (UseV jump_V))
LangEng: not many of beer taught had didn't jump
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (ExtAdvNP (PPartNP (ExtAdvNP (DetCN (DetQuantOrd no_Quant NumPl (OrdSuperl black_A)) (UseN2 (ComplN3 distance_N3 (DetNP somePl_Det)))) here_Adv) buy_V2) (PrepNP with_Prep (PredetNP not_Predet (UsePron i_Pron)))) (ComplSlash (SlashVV must_VV (SlashV2a eat_V2)) (ExtAdvNP (RelNP (AdvNP (CountNP (DetQuantOrd DefArt NumPl (OrdSuperl red_A)) (AdvNP (MassNP (UseN flower_N)) everywhere_Adv)) everywhere_Adv) (UseRCl (TTAnt TCond ASimul) PPos (RelCl (PredVP (DetNP someSg_Det) (AdVVP always_AdV (AdVVP always_AdV UseCopula)))))) (PrepNP in8front_Prep (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TCond ASimul) PNeg (RelSlash IdRP (SlashVP (DetNP many_Det) (SlashV2a eat_V2)))))))))
LangEng: no blackest distances from some , here , bought , with not me , mustn't eat the reddest of flower everywhere everywhere , such that some would always always be , in front of you , that many wouldn't eat
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (MassNP (ApposCN (ComplN2 (Use3N3 distance_N3) (AdvNP (UsePron she_Pron) (PrepNP in8front_Prep (UsePN paris_PN)))) (ExtAdvNP (ExtAdvNP (ExtAdvNP (ExtAdvNP (CountNP every_Det (UsePN john_PN)) here_Adv) everywhere_Adv) here_Adv) now_Adv))) (ComplVS fear_VS (UseCl (TTAnt TFut AAnter) PPos (PredVP (ExtAdvNP (UsePron i_Pron) (PrepNP on_Prep (DetNP somePl_Det))) (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_2))))))))
LangEng: distance to her in front of Paris everything of John , here , everywhere , here , now , hadn't feared that I , on some , will have become 2nd
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (AdvNP (PredetNP not_Predet (MassNP (ComplN2 (ComplN3 distance_N3 (DetNP every_Det)) (UsePN john_PN)))) here_Adv) UseCopula)
LangEng: not distance from everything to John here isn't
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (MassNP (ApposCN (UseN2 (Use3N3 distance_N3)) (MassNP (PossNP (AdvCN (ApposCN (PartNP (UseN grammar_N) (UsePN paris_PN)) (DetNP few_Det)) now_Adv) (AdvNP (CountNP every_Det (UsePron he_Pron)) here_Adv))))) (UseComp (CompAP (PositA blue_A))))
LangEng: distance grammar of Paris few now of everything of him here had been blue
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PPartNP (UsePN john_PN) close_V2) UseCopula)
LangEng: John closed wouldn't have been
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (PPartNP (PredetNP only_Predet (UsePron youSg_Pron)) teach_V2) UseCopula)
LangEng: only you taught were
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (PPartNP (RelNP (RelNP (CountNP every_Det (CountNP somePl_Det (MassNP (AdvCN (UseN2 father_N2) now_Adv)))) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (UseV sleep_V)))) (UseRCl (TTAnt TCond AAnter) PPos (RelCl (PredVP (MassNP (UseN2 (Use2N3 distance_N3))) (ComplVA become_VA (AdjOrd (OrdSuperl small_A))))))) wait_V2) (ComplSlash (AdvVPSlash (AdVVPSlash always_AdV (AdvVPSlash (AdVVPSlash always_AdV (SlashVV want_VV (SlashVV can_VV (SlashV2a cut_V2)))) here_Adv)) here_Adv) (AdvNP (MassNP (PossNP (UseN girl_N) (MassNP (ApposCN (ApposCN (UseN2 father_N2) (UsePron youSg_Pron)) (CountNP someSg_Det (UsePN paris_PN)))))) everywhere_Adv)))
LangEng: everything of some of father now , that would have slept , such that distance would have become smallest , waited always always wants to be able to cut here here girl of father you some of Paris everywhere
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (PredetNP not_Predet (AdvNP (PPartNP (DetNP somePl_Det) love_V2) everywhere_Adv)) (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_1)))))
LangEng: not some loved everywhere haven't become 1st
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (AdvNP (UsePron we_Pron) here_Adv) UseCopula)
LangEng: we here wouldn't be
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (PPartNP (PPartNP (PPartNP (DetCN (DetQuant this_Quant NumPl) (RelCN (PossNP (PossNP (UseN cloud_N) (UsePron it_Pron)) (ExtAdvNP (DetNP many_Det) now_Adv)) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP (AdvVP UseCopula now_Adv))))) understand_V2) drink_V2) close_V2) (ComplVV want_VV UseCopula))
LangEng: these clouds of its of many , now , that wouldn't have been now understood drunk closed haven't wanted to be
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePN paris_PN) UseCopula)
LangEng: Paris will be
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (PredetNP only_Predet (RelNP (RelNP (DetNP someSg_Det) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP (UseComp (CompNP (UsePron youPl_Pron)))))) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (UseComp (CompCN (UseN2 father_N2))))))) (UseV swim_V))
LangEng: only some , that was you , that wouldn't be a father , would swim
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePN john_PN) (AdVVP always_AdV UseCopula))
LangEng: John won't always be
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (DetCN (DetQuantOrd this_Quant NumSg (OrdNumeral (num (pot3 (pot2plus (pot0 n4) (pot0as1 pot01)))))) (PartNP (ComplN2 (Use3N3 distance_N3) (AdvNP (PredetNP not_Predet (ExtAdvNP (MassNP (UseN star_N)) everywhere_Adv)) now_Adv)) (UsePron we_Pron))) (UseV live_V))
LangEng: this four hundred and one thousandth distance to not star , everywhere , now of us lives
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePron youPl_Pron) (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestIAdv why_IAdv (PredVP (RelNP (MassNP (UseN girl_N)) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP UseCopula))) (AdVVP always_AdV (ComplVA become_VA (UseComparA good_A))))))) now_Adv))
LangEng: you don't know now why girl , that wouldn't have been , hasn't always become better
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (AdvNP (RelNP (DetCN (DetQuant IndefArt NumPl) (PartNP (PossNP (ComplN2 (ComplN3 distance_N3 (DetNP many_Det)) (CountNP many_Det (DetNP many_Det))) (PredetNP most_Predet (ExtAdvNP (DetNP few_Det) everywhere_Adv))) (ExtAdvNP (UsePron it_Pron) here_Adv))) (UseRCl (TTAnt TPast AAnter) PPos (RelSlash IdRP (SlashVP (PredetNP all_Predet (MassNP (UseN2 father_N2))) (Slash3V3 send_V3 (CountNP someSg_Det (DetNP many_Det))))))) here_Adv) (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestVP whoSg_IP (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PNeg (QuestIComp (CompIAdv where_IAdv) (UsePN john_PN))))))) everywhere_Adv))
LangEng: distances from many to many of many of most few , everywhere , of it , here , that all father had sent to some of many , here don't know everywhere who won't have known where John hadn't been
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (ExtAdvNP (DetNP somePl_Det) here_Adv) (UseComp (CompNP (CountNP (DetQuantOrd DefArt NumPl (OrdNumeral (num (pot3 (pot1as2 pot111))))) (MassNP (ApposCN (ApposCN (PossNP (UseN2 father_N2) (UsePron we_Pron)) (UsePron i_Pron)) (DetNP someSg_Det)))))))
LangEng: some , here , will have been the eleven thousandth of father of ours I some
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (MassNP (ApposCN (AdvCN (ApposCN (ComplN2 (Use3N3 distance_N3) (RelNP (PPartNP (UsePron it_Pron) kill_V2) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP UseCopula)))) (UsePron it_Pron)) everywhere_Adv) (MassNP (PartNP (AdjCN (UseComparA red_A) (UseN train_N)) (PredetNP only_Predet (UsePron we_Pron)))))) (AdVVP always_AdV (ComplVS know_VS (UseCl (TTAnt TPast ASimul) PPos (PredVP (MassNP (PartNP (ApposCN (UseN bird_N) (DetNP somePl_Det)) (UsePron i_Pron))) (UseComp (CompCN (PartNP (UseN2 father_N2) (DetNP someSg_Det)))))))))
LangEng: distance to it killed , that would have been , it everywhere redder train of only us hasn't always known that bird some of me was a father of some
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePron youSg_Pron) (ComplVS know_VS (UseCl (TTAnt TCond ASimul) PNeg (PredVP (DetNP someSg_Det) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PNeg (QuestVP (IdetCN how8many_IDet (UseN2 father_N2)) UseCopula)))))))
LangEng: you will have known that some wouldn't know how many fathers haven't been
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePN john_PN) UseCopula)
LangEng: John isn't
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (DetNP every_Det) (ComplVA become_VA (PositA small_A)))
LangEng: everything hadn't become small
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (PPartNP (DetNP few_Det) break_V2) (AdvVP (AdvVP (UseComp (CompNP (PredetNP only_Predet (AdvNP (MassNP (UseN2 father_N2)) here_Adv)))) everywhere_Adv) everywhere_Adv))
LangEng: few broken had been only father here everywhere everywhere
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (DetNP (DetQuantOrd this_Quant NumSg (OrdNumeral (num (pot3 (pot2plus (pot0 n5) pot110)))))) (ComplVS know_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (AdvNP (RelNP (MassNP (ComplN2 father_N2 (DetNP every_Det))) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP (AdvVP UseCopula here_Adv)))) everywhere_Adv) (UseComp (CompNP (DetNP (DetQuant IndefArt NumPl))))))))
LangEng: this five hundred and ten thousandth knew that father of everything , that hadn't been here , everywhere has been ones
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (UsePN john_PN) (ComplVA become_VA (UseComparA ready_A)))
LangEng: John has become readier
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (ExtAdvNP (DetCN (DetQuantOrd this_Quant NumPl (OrdDigits (IDig D_5))) (PossNP (RelCN (RelCN (PartNP (ApposCN (UseN2 father_N2) (UsePN john_PN)) (AdvNP (UsePron youSg_Pron) everywhere_Adv)) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP (AdvVP UseCopula here_Adv)))) (UseRCl (TTAnt TPres ASimul) PNeg (RelCl (PredVP (UsePron we_Pron) (UseV walk_V))))) (DetCN (DetQuant IndefArt (NumCard (NumDigits (IDig D_5)))) (ApposCN (PossNP (ApposCN (UseN flower_N) (UsePN john_PN)) (UsePron youPl_Pron)) (UsePron we_Pron))))) here_Adv) (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_9)))))
LangEng: these 5th fathers John of you everywhere that hadn't been here such that we don't walk of 5 flowers John of yours we , here , will become 9th
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (RelNP (DetNP many_Det) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (ComplVA become_VA (AdAP too_AdA (AdjOrd (OrdSuperl hot_A))))))) (UseComp (CompCN (ApposCN (PartNP (UseN baby_N) (MassNP (ComplN2 (Use3N3 distance_N3) (ExtAdvNP (UsePN paris_PN) everywhere_Adv)))) (CountNP every_Det (DetCN few_Det (UseN bird_N)))))))
LangEng: many , that will become too hottest , won't be babies of distance to Paris , everywhere , everything of few birds
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (ExtAdvNP (MassNP (AdvCN (UseN train_N) everywhere_Adv)) here_Adv) (ComplSlash (SlashVV can_VV (SlashVV must_VV (Slash3V3 add_V3 (UsePron youPl_Pron)))) (UsePN john_PN)))
LangEng: train everywhere , here , had been able to John have to add to you
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PredetNP all_Predet (MassNP (ApposCN (PartNP (ComplN2 (Use3N3 distance_N3) (PredetNP most_Predet (PredetNP only_Predet (DetNP every_Det)))) (UsePN paris_PN)) (DetCN (DetQuant DefArt NumSg) (AdvCN (UseN apple_N) now_Adv))))) (UseComp (CompAP (AdAP too_AdA (AdjOrd (OrdDigits (IIDig D_3 (IDig D_4))))))))
LangEng: all distance to most only everything of Paris the apple now wouldn't have been too 3 &+ 4th
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (DetNP (DetQuant no_Quant NumSg)) (ComplVV can8know_VV UseCopula))
LangEng: none can be
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePron it_Pron) (UseV walk_V))
LangEng: it won't walk
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePron i_Pron) (ComplSlash (Slash3V3 send_V3 (UsePron i_Pron)) (CountNP few_Det (MassNP (AdjCN (UseComparA good_A) (RelCN (RelCN (ComplN2 (Use2N3 distance_N3) (UsePN john_PN)) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula))) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (AdvVP UseCopula here_Adv)))))))))
LangEng: I won't send few of better distance from John that is that would have been here to me
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (MassNP (UseN2 (Use2N3 distance_N3))) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PPos (QuestIAdv how_IAdv (PredVP (PPartNP (PPartNP (MassNP (UseN flower_N)) fear_V2) teach_V2) (ComplVS hope_VS (UseCl (TTAnt TCond AAnter) PPos (PredVP (UsePron it_Pron) (ComplVV can8know_VV UseCopula)))))))))
LangEng: distance doesn't know how flower feared taught has hoped that it would have been able to be
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (DetCN (DetQuant (PossPron youPl_Pron) NumSg) (AdjCN (AdjOrd (OrdNumeralSuperl (num (pot2as3 (pot2plus pot01 (pot1plus n6 pot01)))) good_A)) (UseN ship_N))) (ComplVV can_VV (ComplSlash (Slash2V3 send_V3 (PPartNP (MassNP (ComplN2 (Use3N3 distance_N3) (DetNP every_Det))) understand_V2)) (MassNP (AdvCN (RelCN (ComplN2 father_N2 (PredetNP most_Predet (UsePron he_Pron))) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula))) here_Adv)))))
LangEng: your one hundred and sixty &+ - &+ first best ship has been able to send distance to everything understood to father of most him that is here
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (PredetNP only_Predet (UsePron he_Pron)) (ComplVA become_VA (AdAP so_AdA (UseComparA young_A))))
LangEng: only he will have become so younger
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPres ASimul) PNeg (RelCl (PredVP (AdvNP (ExtAdvNP (MassNP (UseN2 father_N2)) everywhere_Adv) here_Adv) (AdVVP always_AdV UseCopula))))) (AdvVP (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot2as3 (pot2plus (pot0 n2) (pot1 n5)))) red_A))) (PrepNP under_Prep (UsePN john_PN))))
LangEng: Paris , such that father , everywhere , here isn't always , had become two hundred and fiftieth reddest under John
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (ExtAdvNP (PPartNP (PredetNP most_Predet (ExtAdvNP (DetNP somePl_Det) everywhere_Adv)) see_V2) here_Adv) (ComplVA become_VA (AdjOrd (OrdSuperl red_A))))
LangEng: most some , everywhere , seen , here , had become reddest
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePN paris_PN) (ComplVV want_VV (ComplVV must_VV (ComplVV want_VV (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PPos (QuestIAdv why_IAdv (PredVP (DetNP many_Det) (AdvVP UseCopula here_Adv)))))))))
LangEng: Paris had wanted to have to want to know why many will be here
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (CountNP every_Det (DetCN somePl_Det (ApposCN (UseN2 (ComplN3 distance_N3 (PredetNP all_Predet (DetCN few_Det (UseN2 father_N2))))) (PredetNP all_Predet (DetNP (DetQuant that_Quant NumSg)))))) (AdVVP always_AdV (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PPos (QuestCl (PredVP (PredetNP most_Predet (DetNP few_Det)) (AdVVP always_AdV (AdvVP UseCopula here_Adv)))))))))
LangEng: everything of some distances from all few fathers all that had always always known if most few would always have been here
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (ExtAdvNP (RelNP (PredetNP all_Predet (RelNP (DetNP (DetQuantOrd (PossPron we_Pron) NumPl (OrdDigits (IDig D_9)))) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP (AdVVP always_AdV (AdVVP always_AdV UseCopula)))))) (UseRCl (TTAnt TFut ASimul) PNeg (RelCl (PredVP (RelNP (PredetNP only_Predet (UsePN john_PN)) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP UseCopula))) (ComplSlash (Slash2V3 talk_V3 (DetNP few_Det)) (UsePN john_PN)))))) now_Adv) (AdVVP always_AdV (ComplVV can_VV (ComplVS hope_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (PPartNP (PredetNP not_Predet (UsePN paris_PN)) close_V2) (AdVVP always_AdV (AdvVP (AdVVP always_AdV UseCopula) everywhere_Adv))))))))
LangEng: all our 9th , that haven't always always been , such that only John , that hadn't been , won't talk to few about John , now , had always been able to hope that not Paris closed has always always been everywhere
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePron it_Pron) UseCopula)
LangEng: it will be
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (CountNP many_Det (PPartNP (AdvNP (ExtAdvNP (MassNP (UseN man_N)) everywhere_Adv) (PrepNP from_Prep (CountNP (DetQuantOrd this_Quant NumPl (OrdSuperl white_A)) (RelNP (UsePron she_Pron) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP UseCopula)))))) love_V2)) (ComplVV can_VV (ComplVS hope_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (UsePN john_PN) (ComplVV must_VV (AdvVP (UseComp (CompAdv here_Adv)) everywhere_Adv)))))))
LangEng: many of man , everywhere , from these whitest of her , that had been , loved won't have been able to hope that John has had to be here everywhere
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (AdvNP (PredetNP not_Predet (PredetNP only_Predet (CountNP few_Det (ExtAdvNP (MassNP (ComplN2 father_N2 (UsePN john_PN))) now_Adv)))) everywhere_Adv) (ComplSlash (Slash3V3 talk_V3 (DetNP (DetQuant no_Quant (NumCard (AdNum at_least_AdN (NumDigits (IDig D_0))))))) (MassNP (UseN2 (Use2N3 distance_N3)))))
LangEng: not only few of father of John , now , everywhere hadn't talked to distance about no at least 0
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (CountNP many_Det (PredetNP only_Predet (CountNP (DetQuant DefArt (NumCard (NumDigits (IDig D_2)))) (PredetNP not_Predet (UsePN paris_PN))))) (UseComp (CompAdv (PrepNP behind_Prep (ExtAdvNP (AdvNP (ExtAdvNP (PPartNP (DetNP few_Det) find_V2) everywhere_Adv) now_Adv) here_Adv)))))
LangEng: many of only the 2 of not Paris would have been behind few found , everywhere , now , here
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePN john_PN) (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PNeg (QuestCl (PredVP (CountNP (DetQuant that_Quant NumPl) (ExtAdvNP (DetNP every_Det) now_Adv)) (ComplSlash (AdvVPSlash (SlashV2a eat_V2) everywhere_Adv) (MassNP (UseN2 father_N2))))))) everywhere_Adv))
LangEng: John would know everywhere if those of everything , now , don't eat everywhere father
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (ExtAdvNP (RelNP (PPartNP (UsePN paris_PN) understand_V2) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP UseCopula))) everywhere_Adv) (AdVVP always_AdV (UseComp (CompNP (AdvNP (DetNP every_Det) here_Adv)))))
LangEng: Paris understood , that isn't , everywhere , won't always have been everything here
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (RelNP (ExtAdvNP (PPartNP (DetCN many_Det (AdjCN (AdAP too_AdA (AdjOrd (OrdSuperl good_A))) (ApposCN (ApposCN (UseN2 father_N2) (UsePron it_Pron)) (CountNP somePl_Det (UsePN paris_PN))))) close_V2) everywhere_Adv) (UseRCl (TTAnt TCond ASimul) PPos (RelCl (PredVP (AdvNP (UsePron it_Pron) everywhere_Adv) (UseV walk_V))))) (AdVVP always_AdV (ComplVS fear_VS (UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePN paris_PN) UseCopula)))))
LangEng: many too best fathers it some of Paris closed , everywhere , such that it everywhere would walk , won't always have feared that Paris hadn't been
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (PredetNP not_Predet (UsePN john_PN)) (ComplVA become_VA (PositA hot_A)))
LangEng: not John becomes hot
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePN paris_PN) (AdVVP always_AdV (ComplVS say_VS (UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePN john_PN) (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PPos (QuestIComp (CompIAdv where_IAdv) (UsePron i_Pron)))))))))
LangEng: Paris always says that John won't know where I will be
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (AdvNP (DetNP every_Det) now_Adv) (ComplVV must_VV (UseComp (CompCN (AdjCN (AdAP so_AdA (AdAP very_AdA (AdjOrd (OrdSuperl ready_A)))) (RelCN (PossNP (ComplN2 (Use3N3 distance_N3) (DetNP many_Det)) (DetNP every_Det)) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (UseV jump_V)))))))))
LangEng: everything now mustn't be a so very readiest distance to many of everything that will jump
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PredetNP most_Predet (AdvNP (RelNP (DetNP many_Det) (UseRCl (TTAnt TCond ASimul) PNeg (RelCl (PredVP (DetCN somePl_Det (UseN train_N)) (ComplSlash (SlashV2a break_V2) (UsePron we_Pron)))))) here_Adv)) (ComplVV must_VV (UseComp (CompAP (AdAP very_AdA (UseComparA new_A))))))
LangEng: most many , such that some trains wouldn't break us , here hadn't had to be very newer
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetCN (DetQuantOrd no_Quant NumSg (OrdNumeralSuperl (num (pot3plus (pot1as2 (pot1 n7)) (pot1as2 (pot0as1 pot01)))) white_A)) (ComplN2 (Use3N3 distance_N3) (RelNP (DetCN somePl_Det (AdjCN (AdAP very_AdA (AdjOrd (OrdSuperl blue_A))) (PartNP (AdvCN (UseN2 father_N2) here_Adv) (PPartNP (DetNP many_Det) love_V2)))) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP (AdvVP UseCopula everywhere_Adv)))))) (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PPos (QuestIComp (CompIAdv where_IAdv) (UsePron youSg_Pron)))))
LangEng: no seventy thousand first whitest distance to some very bluest fathers here of many loved , that had been everywhere , won't know where you will be
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (ExtAdvNP (AdvNP (ExtAdvNP (CountNP (DetQuantOrd that_Quant (NumCard (NumDigits (IDig D_6))) (OrdSuperl old_A)) (ExtAdvNP (MassNP (ApposCN (UseN2 father_N2) (DetNP someSg_Det))) here_Adv)) now_Adv) here_Adv) everywhere_Adv) UseCopula)
LangEng: those 6 oldest of father some , here , now , here , everywhere , won't be
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePN john_PN) (UseV travel_V))
LangEng: John wouldn't travel
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (DetCN many_Det (UseN2 (Use2N3 distance_N3))) (ComplVV can8know_VV (ComplSlash (SlashV2a have_V2) (PPartNP (UsePN john_PN) close_V2))))
LangEng: many distances will be able to have John closed
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (AdjCN (UseComparA white_A) (PartNP (RelCN (PossNP (PartNP (ApposCN (UseN man_N) (UsePron i_Pron)) (MassNP (UseN2 father_N2))) (MassNP (PartNP (UseN sea_N) (UsePron we_Pron)))) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (ComplVA become_VA (UseComparA heavy_A))))) (PredetNP not_Predet (PPartNP (UsePN paris_PN) have_V2))))) (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PPos (QuestSlash whatSg_IP (SlashVP (UsePN john_PN) (Slash2V3 talk_V3 (UsePN paris_PN)))))))
LangEng: whiter man I of father of sea of us that has become heavier of not Paris had wouldn't know what John talks to Paris about
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (ExtAdvNP (DetNP every_Det) (PrepNP after_Prep (UsePron youPl_Pron))) (ComplVV can8know_VV (ComplSlash (AdvVPSlash (AdVVPSlash always_AdV (AdVVPSlash always_AdV (SlashV2a fear_V2))) (PrepNP under_Prep (CountNP few_Det (RelNP (PredetNP only_Predet (UsePron he_Pron)) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP UseCopula)))))) (PPartNP (UsePron she_Pron) break_V2))))
LangEng: everything , after you , wouldn't have been able to always always fear under few of only him , that wasn't , her broken
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (CountNP (DetQuant no_Quant NumSg) (ExtAdvNP (PPartNP (RelNP (UsePron youPl_Pron) (UseRCl (TTAnt TPres ASimul) PNeg (RelCl (PredVP (UsePN john_PN) (AdVVP always_AdV UseCopula))))) find_V2) (PrepNP on_Prep (UsePN john_PN)))) (ComplVS say_VS (UseCl (TTAnt TCond ASimul) PPos (PredVP (MassNP (ComplN2 (ComplN3 distance_N3 (ExtAdvNP (UsePron we_Pron) here_Adv)) (AdvNP (UsePron it_Pron) now_Adv))) (UseComp (CompCN (PartNP (ApposCN (UseN2 father_N2) (UsePron we_Pron)) (DetCN (DetQuant that_Quant NumPl) (UseN2 father_N2)))))))))
LangEng: none of you , such that John isn't always , found , on John , won't have said that distance from us , here , to it now would be a father we of those fathers
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (CountNP many_Det (UsePron it_Pron)) (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PNeg (QuestIAdv how_IAdv (PredVP (UsePN paris_PN) (AdvVP (AdVVP always_AdV (ComplVA become_VA (UseComparA young_A))) now_Adv))))))
LangEng: many of it would know how Paris hadn't always become younger now
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (RelNP (RelNP (AdvNP (AdvNP (RelNP (CountNP every_Det (UsePN paris_PN)) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP (AdvVP UseCopula everywhere_Adv)))) (PrepNP in_Prep (MassNP (ComplN2 (Use3N3 distance_N3) (UsePN paris_PN))))) here_Adv) (UseRCl (TTAnt TFut AAnter) PNeg (RelSlash IdRP (SlashVP (PredetNP most_Predet (PredetNP most_Predet (UsePron i_Pron))) (SlashV2a cut_V2))))) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP (AdVVP always_AdV UseCopula)))) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PPos (QuestCl (PredVP (ExtAdvNP (PredetNP all_Predet (DetCN someSg_Det (UseN boat_N))) here_Adv) (ComplVS fear_VS (UseCl (TTAnt TFut AAnter) PPos (PredVP (DetNP few_Det) (ComplVV want_VV UseCopula)))))))))
LangEng: everything of Paris , that won't have been everywhere , in distance to Paris here , that most most I won't have cut , that is always , will know if all some boat , here , has feared that few will have wanted to be
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePron we_Pron) (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot2as3 (pot2 pot01))) green_A))))
LangEng: we wouldn't have become one hundredth greenest
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (AdvNP (PredetNP only_Predet (MassNP (ComplN2 (Use3N3 distance_N3) (UsePN paris_PN)))) here_Adv) (ComplVS know_VS (UseCl (TTAnt TPast AAnter) PNeg (PredVP (DetCN every_Det (AdvCN (AdvCN (PossNP (UseN river_N) (DetNP every_Det)) now_Adv) everywhere_Adv)) (ComplVV must_VV (UseComp (CompCN (ApposCN (UseN car_N) (UsePron youSg_Pron)))))))))
LangEng: only distance to Paris here knows that every river of everything now everywhere hadn't had to be a car you
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP most_Predet (DetCN someSg_Det (AdjCN (AdjOrd (OrdDigits (IIDig D_4 (IDig D_2)))) (RelCN (AdjCN (AdAP almost_AdA (PositA new_A)) (AdvCN (UseN man_N) (PrepNP between_Prep (UsePron she_Pron)))) (UseRCl (TTAnt TPres AAnter) PPos (RelCl (PredVP (DetNP many_Det) (ComplVV can8know_VV UseCopula)))))))) (UseComp (CompAP (UseComparA bad_A))))
LangEng: most some 4 &+ 2nd almost new man between her such that many have been able to be isn't worse
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (AdvNP (ExtAdvNP (MassNP (PossNP (PossNP (ApposCN (PossNP (UseN2 father_N2) (DetNP someSg_Det)) (UsePron youSg_Pron)) (ExtAdvNP (PredetNP most_Predet (UsePN paris_PN)) now_Adv)) (ExtAdvNP (MassNP (UseN2 (Use3N3 distance_N3))) now_Adv))) here_Adv) everywhere_Adv) (ComplVV can_VV (ComplVS hope_VS (UseCl (TTAnt TPres AAnter) PNeg (PredVP (MassNP (UseN car_N)) (ComplVA become_VA (AdAP almost_AdA (UseComparA clean_A))))))))
LangEng: father of some you of most Paris , now , of distance , now , here , everywhere can't hope that car hasn't become almost cleaner
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PPartNP (MassNP (ComplN2 (Use3N3 distance_N3) (DetCN few_Det (AdvCN (AdjCN (UseComparA yellow_A) (PartNP (UseN2 father_N2) (UsePN paris_PN))) now_Adv)))) bite_V2) UseCopula)
LangEng: distance to few more yellow fathers of Paris now bitten hadn't been
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (RelNP (PPartNP (MassNP (ApposCN (ApposCN (PossNP (UseN animal_N) (UsePron i_Pron)) (ExtAdvNP (DetNP somePl_Det) everywhere_Adv)) (PredetNP all_Predet (ExtAdvNP (AdvNP (UsePN john_PN) now_Adv) here_Adv)))) buy_V2) (UseRCl (TTAnt TFut ASimul) PPos (RelCl (PredVP (PredetNP only_Predet (ExtAdvNP (UsePron youPl_Pron) here_Adv)) (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PNeg (QuestVP whoPl_IP UseCopula)))))))) (ComplSlash (SlashV2a do_V2) (CountNP (DetQuant (PossPron we_Pron) NumPl) (DetCN somePl_Det (UseN bike_N)))))
LangEng: animal of mine some , everywhere , all John now , here , bought , such that only you , here , will always know who wouldn't be , will do ours of some bikes
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (DetCN few_Det (UseN2 father_N2)) (ComplSlash (Slash3V3 add_V3 (MassNP (RelCN (PossNP (PartNP (UseN2 (Use3N3 distance_N3)) (UsePron she_Pron)) (UsePron i_Pron)) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP (UseComp (CompAdv everywhere_Adv))))))) (AdvNP (DetCN someSg_Det (RelCN (UseN friend_N) (UseRCl (TTAnt TCond ASimul) PNeg (RelCl (PredVP (UsePron youPl_Pron) (UseV play_V)))))) everywhere_Adv)))
LangEng: few fathers won't have added some friend such that you wouldn't play everywhere to distance of her of mine that hasn't been everywhere
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePN john_PN) (UseComp (CompNP (DetCN someSg_Det (AdvCN (UseN friend_N) everywhere_Adv)))))
LangEng: John would be some friend everywhere
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (MassNP (UseN bread_N)) (UseComp (CompCN (PossNP (UseN2 (ComplN3 distance_N3 (CountNP every_Det (PPartNP (DetNP every_Det) do_V2)))) (PPartNP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPast AAnter) PNeg (RelVP IdRP (ComplVV want_VV UseCopula)))) understand_V2)))))
LangEng: bread won't be a distance from everything of everything done of Paris , that hadn't wanted to be , understood
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (RelNP (UsePron we_Pron) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (ComplVA become_VA (AdjOrd (OrdSuperl ready_A)))))) (UseComp (CompAdv everywhere_Adv)))
LangEng: we , that won't become readiest , weren't everywhere
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePN john_PN) (ComplVA become_VA (UseComparA black_A)))
LangEng: John wouldn't have become blacker
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (CountNP many_Det (AdvNP (DetCN many_Det (ComplN2 (Use3N3 distance_N3) (PredetNP only_Predet (MassNP (ComplN2 father_N2 (UsePron youPl_Pron)))))) (PrepNP under_Prep (UsePN paris_PN)))) (ComplVV must_VV UseCopula))
LangEng: many of many distances to only father of you under Paris will have had to be
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (RelNP (PredetNP only_Predet (ExtAdvNP (MassNP (RelCN (UseN bread_N) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP (AdVVP always_AdV UseCopula))))) here_Adv)) (UseRCl (TTAnt TCond AAnter) PNeg (RelCl (PredVP (DetCN every_Det (UseN train_N)) UseCopula)))) (AdvVP (UseComp (CompAP (AdAP very_AdA (AdjOrd (OrdDigits (IDig D_1)))))) (PrepNP behind_Prep (PPartNP (RelNP (DetNP (DetQuant this_Quant NumSg)) (UseRCl (TTAnt TPres AAnter) PNeg (RelCl (PredVP (DetNP many_Det) (UseV come_V))))) cut_V2))))
LangEng: only bread that hasn't always been , here , such that every train wouldn't have been , hasn't been very 1st behind this , such that many haven't come , cut
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (RelNP (AdvNP (PredetNP not_Predet (CountNP somePl_Det (PPartNP (PPartNP (DetNP every_Det) do_V2) teach_V2))) now_Adv) (UseRCl (TTAnt TPast AAnter) PPos (RelCl (PredVP (RelNP (PredetNP all_Predet (UsePron it_Pron)) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (AdVVP always_AdV UseCopula)))) (ComplVS know_VS (UseCl (TTAnt TCond ASimul) PPos (PredVP (DetNP someSg_Det) (ComplVV can8know_VV UseCopula)))))))) (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PPos (QuestIAdv how_IAdv (PredVP (UsePN john_PN) UseCopula)))))
LangEng: not some of everything done taught now , such that all it , that has always been , had known that some would be able to be , won't have known how John had been
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (DetNP every_Det) UseCopula)
LangEng: everything hadn't been
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (UsePN paris_PN) UseCopula)
LangEng: Paris won't have been
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (RelNP (DetNP someSg_Det) (UseRCl (TTAnt TPast AAnter) PPos (RelSlash IdRP (SlashVP (ExtAdvNP (DetCN every_Det (PossNP (UseN2 father_N2) (UsePron it_Pron))) everywhere_Adv) (AdVVPSlash always_AdV (SlashVV can8know_VV (AdVVPSlash always_AdV (SlashV2a do_V2)))))))) (ComplVA become_VA (AdjOrd (OrdNumeral (num (pot3 (pot2 (pot0 n4))))))))
LangEng: some , that every father of its , everywhere , had always been able to always do , won't have become four hundred thousandth
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PPartNP (DetCN few_Det (PartNP (RelCN (ComplN2 (Use2N3 distance_N3) (AdvNP (AdvNP (UsePN paris_PN) here_Adv) now_Adv)) (UseRCl (TTAnt TPast ASimul) PNeg (RelCl (PredVP (UsePron we_Pron) (AdVVP always_AdV UseCopula))))) (DetCN somePl_Det (UseN animal_N)))) close_V2) (ComplVA become_VA (AdAP very_AdA (AdAP very_AdA (AdjOrd (OrdDigits (IDig D_8)))))))
LangEng: few distances from Paris here now such that we weren't always of some animals closed wouldn't have become very very 8th
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PPartNP (UsePN john_PN) wait_V2) (ComplVA become_VA (UseComparA hot_A)))
LangEng: John waited wouldn't have become hotter
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (PossNP (RelCN (AdjCN (PositA green_A) (UseN fire_N)) (UseRCl (TTAnt TPast ASimul) PNeg (RelSlash IdRP (SlashVP (DetNP few_Det) (SlashV2a fear_V2))))) (RelNP (UsePN john_PN) (UseRCl (TTAnt TFut ASimul) PPos (RelSlash IdRP (SlashVP (MassNP (UseN2 father_N2)) (SlashV2a close_V2))))))) (UseV come_V))
LangEng: green fire that few didn't fear of John , that father will close , wouldn't come
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePN paris_PN) UseCopula)
LangEng: Paris wouldn't be
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePron i_Pron) (AdVVP always_AdV (ComplVV can_VV (UseComp (CompCN (ComplN2 (ComplN3 distance_N3 (UsePN paris_PN)) (UsePron it_Pron)))))))
LangEng: I wouldn't always be able to be a distance from Paris to it
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (DetCN few_Det (UseN2 (ComplN3 distance_N3 (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPres AAnter) PPos (RelCl (PredVP (UsePN john_PN) (UseV live_V)))))))) UseCopula)
LangEng: few distances from Paris , such that John has lived , hadn't been
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (UsePron i_Pron) (UseComp (CompAP (PositA hot_A))))
LangEng: I will be hot
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (RelNP (CountNP (DetQuantOrd IndefArt NumPl (OrdNumeralSuperl (num (pot2as3 (pot1as2 (pot1to19 n6)))) ready_A)) (UsePron youSg_Pron)) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP (AdvVP UseCopula now_Adv)))) (UseV run_V))
LangEng: sixteenth readiest of you , that will have been now , will run
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (MassNP (PossNP (ComplN2 (ComplN3 distance_N3 (DetCN few_Det (AdjCN (AdjOrd (OrdSuperl young_A)) (PartNP (UseN tree_N) (UsePN paris_PN))))) (DetNP (DetQuantOrd IndefArt NumSg (OrdSuperl red_A)))) (UsePron it_Pron))) (UseV play_V))
LangEng: distance from few youngest trees of Paris to a reddest of its hasn't played
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (RelNP (AdvNP (CountNP (DetQuantOrd that_Quant (NumCard (AdNum almost_AdN (NumDigits (IDig D_8)))) (OrdDigits (IIDig D_3 (IDig D_1)))) (RelNP (UsePN john_PN) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP UseCopula)))) (PrepNP with_Prep (PredetNP most_Predet (CountNP someSg_Det (AdvNP (CountNP (DetQuant this_Quant NumPl) (UsePron we_Pron)) (PrepNP on_Prep (UsePron he_Pron))))))) (UseRCl (TTAnt TPast ASimul) PNeg (RelCl (PredVP (CountNP few_Det (PredetNP only_Predet (DetCN many_Det (UseN milk_N)))) UseCopula)))) (ComplVS hope_VS (UseCl (TTAnt TPres ASimul) PPos (PredVP (AdvNP (DetCN (DetQuantOrd DefArt NumSg (OrdDigits (IDig D_6))) (UseN2 (Use2N3 distance_N3))) everywhere_Adv) (AdVVP always_AdV (ComplSlash (Slash2V3 add_V3 (ExtAdvNP (UsePN paris_PN) now_Adv)) (PredetNP not_Predet (MassNP (UseN2 father_N2)))))))))
LangEng: those almost 8 3 &+ 1st of John , that has been , with most some of these of us on him , such that few of only many milks weren't , have hoped that the 6th distance everywhere always adds Paris , now , to not father
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (CountNP (DetQuantOrd DefArt (NumCard (NumNumeral (num (pot2as3 (pot1as2 (pot1 n5)))))) (OrdNumeral (num (pot3 (pot2plus pot01 (pot1to19 n4)))))) (DetCN (DetQuant this_Quant NumSg) (AdjCN (UseComparA black_A) (RelCN (AdjCN (PositA new_A) (AdvCN (PossNP (UseN2 father_N2) (DetNP somePl_Det)) now_Adv)) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (UseComp (CompAdv now_Adv)))))))) (ComplVA become_VA (AdAP almost_AdA (PositA blue_A))))
LangEng: the fifty one hundred and fourteen thousandth of this blacker new father of some now that will be now don't become almost blue
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (CountNP (DetQuant that_Quant NumSg) (PPartNP (DetNP every_Det) break_V2)) (UseComp (CompCN (ApposCN (AdjCN (AdjOrd (OrdSuperl ready_A)) (AdvCN (UseN2 father_N2) everywhere_Adv)) (AdvNP (DetCN somePl_Det (ApposCN (UseN city_N) (DetCN every_Det (UseN2 father_N2)))) (PrepNP with_Prep (DetCN many_Det (ComplN2 (Use2N3 distance_N3) (UsePron she_Pron)))))))))
LangEng: that of everything broken will have been a readiest father everywhere some cities every father with many distances from her
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (AdvNP (ExtAdvNP (PPartNP (PPartNP (MassNP (PartNP (PossNP (UseN grammar_N) (DetNP someSg_Det)) (AdvNP (DetNP somePl_Det) everywhere_Adv))) fear_V2) understand_V2) now_Adv) (PrepNP from_Prep (DetNP someSg_Det))) (ComplSlash (Slash2V3 sell_V3 (RelNP (ExtAdvNP (UsePN paris_PN) here_Adv) (UseRCl (TTAnt TPast ASimul) PPos (RelCl (PredVP (UsePN john_PN) (ComplVV can_VV UseCopula)))))) (DetNP many_Det)))
LangEng: grammar of some of some everywhere feared understood , now , from some hadn't sold Paris , here , such that John could be , to many
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (PredetNP all_Predet (MassNP (UseN wine_N))) (AdvVP (UseV play_V) now_Adv))
LangEng: all wine wouldn't play now
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePron she_Pron) (UseComp (CompCN (RelCN (RelCN (UseN sea_N) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (ComplVA become_VA (PositA warm_A))))) (UseRCl (TTAnt TPres AAnter) PNeg (RelCl (PredVP (UsePron it_Pron) UseCopula)))))))
LangEng: she won't be a sea that won't become warm such that it hasn't been
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePN paris_PN) (ComplVA become_VA (UseComparA hot_A)))
LangEng: Paris will have become hotter
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (UsePron she_Pron) (ComplVA become_VA (PositA cold_A)))
LangEng: she has become cold
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePN john_PN) UseCopula)
LangEng: John wasn't
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePN paris_PN) (ComplVV can8know_VV (UseV go_V)))
LangEng: Paris hasn't been able to go
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePN john_PN) (UseV travel_V))
LangEng: John wouldn't have travelled
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (DetNP few_Det) (ComplVS hope_VS (UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePron youSg_Pron) (ComplVV can8know_VV (ComplVS hope_VS (UseCl (TTAnt TPres ASimul) PNeg (PredVP (UsePN john_PN) (UseV run_V)))))))))
LangEng: few will hope that you haven't been able to hope that John doesn't run
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (AdvNP (UsePron we_Pron) everywhere_Adv) (ComplVV must_VV (UseV come_V)))
LangEng: we everywhere wouldn't have had to come
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (DetCN someSg_Det (AdjCN (AdjOrd (OrdSuperl green_A)) (UseN flower_N))) (UseV go_V))
LangEng: some greenest flower goes
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (RelNP (DetCN few_Det (RelCN (UseN2 father_N2) (UseRCl (TTAnt TFut AAnter) PNeg (RelSlash IdRP (SlashVP (AdvNP (DetNP every_Det) everywhere_Adv) (AdVVPSlash always_AdV (SlashV2a close_V2))))))) (UseRCl (TTAnt TPast AAnter) PPos (RelCl (PredVP (MassNP (ApposCN (UseN2 (Use3N3 distance_N3)) (DetNP many_Det))) (ComplSlash (AdVVPSlash always_AdV (Slash2V3 sell_V3 (UsePron it_Pron))) (UsePron it_Pron)))))) (AdVVP always_AdV (AdVVP always_AdV (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PPos (QuestCl (PredVP (UsePN john_PN) UseCopula)))))))
LangEng: few fathers that everything everywhere won't always have closed , such that distance many had always sold it to it , will always always have known if John would have been
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (RelNP (UsePron i_Pron) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP (UseV play_V)))) (ComplSlash (AdvVPSlash (AdvVPSlash (SlashV2a eat_V2) now_Adv) (PrepNP between_Prep (MassNP (AdvCN (RelCN (ApposCN (UseN man_N) (UsePron we_Pron)) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP UseCopula))) here_Adv)))) (DetCN somePl_Det (AdjCN (AdjOrd (OrdSuperl ready_A)) (ComplN2 (ComplN3 distance_N3 (PPartNP (PPartNP (UsePN john_PN) cut_V2) see_V2)) (UsePron she_Pron))))))
LangEng: I , that won't have played , don't eat now between man we that was here some readiest distances from John cut seen to her
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (DetCN (DetQuant this_Quant NumPl) (UseN2 (Use3N3 distance_N3))) (ComplVA become_VA (UseComparA green_A)))
LangEng: these distances have become greener
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePron he_Pron) (AdvVP (ComplVV can_VV (UseComp (CompCN (ComplN2 (ComplN3 distance_N3 (AdvNP (UsePron she_Pron) here_Adv)) (UsePN paris_PN))))) now_Adv))
LangEng: he couldn't be a distance from her here to Paris now
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (CountNP few_Det (ExtAdvNP (AdvNP (UsePron i_Pron) now_Adv) now_Adv)) (ComplSlash (AdVVPSlash always_AdV (SlashVV can8know_VV (SlashV2a read_V2))) (PPartNP (RelNP (PPartNP (PredetNP only_Predet (DetNP someSg_Det)) kill_V2) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP (ComplVA become_VA (AdAP so_AdA (UseComparA cold_A)))))) teach_V2)))
LangEng: few of me now , now , wouldn't always have been able to read only some killed , that hasn't become so colder , taught
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TFut AAnter) PNeg (RelSlash IdRP (SlashVP (MassNP (RelCN (PartNP (UseN2 father_N2) (UsePron we_Pron)) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP UseCopula)))) (SlashV2a bite_V2))))) (UseV run_V))
LangEng: Paris , that father of us that won't have been won't have bitten , had run
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (DetNP somePl_Det) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestIAdv when_IAdv (PredVP (AdvNP (UsePN john_PN) everywhere_Adv) (ComplVV can8know_VV (ComplSlash (AdVVPSlash always_AdV (SlashV2a bite_V2)) (AdvNP (UsePN john_PN) here_Adv))))))))
LangEng: some would know when John everywhere could always bite John here
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (CountNP many_Det (MassNP (UseN2 father_N2))) (ComplVA become_VA (AdjOrd (OrdDigits (IIDig D_0 (IIDig D_2 (IIDig D_0 (IIDig D_6 (IDig D_4)))))))))
LangEng: many of father won't have become 0 &+ 2 &+ , &+ 0 &+ 6 &+ 4th
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePron she_Pron) (AdvVP (ComplVA become_VA (AdAP too_AdA (AdjOrd (OrdNumeral (num (pot2as3 (pot1as2 pot110))))))) everywhere_Adv))
LangEng: she becomes too tenth everywhere
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (ExtAdvNP (AdvNP (ExtAdvNP (PPartNP (DetCN someSg_Det (AdvCN (PartNP (UseN2 father_N2) (UsePN john_PN)) here_Adv)) fear_V2) now_Adv) here_Adv) here_Adv) (AdvVP (UseComp (CompAP (AdAP so_AdA (PositA heavy_A)))) now_Adv))
LangEng: some father of John here feared , now , here , here , hasn't been so heavy now
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (UseComp (CompCN (PossNP (AdvCN (UseN fish_N) now_Adv) (MassNP (UseN2 father_N2)))))))) (ComplVS say_VS (UseCl (TTAnt TPast ASimul) PPos (PredVP (PPartNP (AdvNP (AdvNP (AdvNP (UsePN paris_PN) here_Adv) here_Adv) everywhere_Adv) drink_V2) (UseComp (CompAdv (PrepNP in_Prep (CountNP somePl_Det (UsePN paris_PN)))))))))
LangEng: Paris , that has been a fish now of father , would say that Paris here here everywhere drunk was in some of Paris
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (CountNP (DetQuant DefArt (NumCard (NumNumeral (num (pot3 (pot2 pot01)))))) (PPartNP (UsePN paris_PN) kill_V2)) (ComplVS say_VS (UseCl (TTAnt TPast AAnter) PNeg (PredVP (AdvNP (MassNP (PartNP (AdvCN (UseN2 father_N2) here_Adv) (PredetNP most_Predet (UsePN john_PN)))) (PrepNP under_Prep (DetNP someSg_Det))) UseCopula))))
LangEng: the one hundred thousand of Paris killed said that father here of most John under some hadn't been
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (CountNP (DetQuant this_Quant NumPl) (PredetNP all_Predet (MassNP (RelCN (ComplN2 father_N2 (UsePN paris_PN)) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP (AdvVP (AdvVP UseCopula here_Adv) here_Adv))))))) (AdvVP (UseComp (CompAdv here_Adv)) here_Adv))
LangEng: these of all father of Paris that wasn't here here are here here
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (ExtAdvNP (AdvNP (DetCN every_Det (RelCN (PartNP (UseN milk_N) (RelNP (CountNP many_Det (UsePron youSg_Pron)) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP UseCopula)))) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula)))) now_Adv) everywhere_Adv) UseCopula)
LangEng: every milk of many of you , that had been , that is now , everywhere , would be
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (CountNP (DetQuant IndefArt (NumCard (NumNumeral (num (pot3plus (pot2 pot01) (pot1as2 pot110)))))) (PredetNP most_Predet (DetCN (DetQuantOrd (PossPron youPl_Pron) NumPl (OrdDigits (IDig D_4))) (UseN beer_N)))) (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PPos (QuestIComp (CompIP whoSg_IP) (UsePron he_Pron)))))
LangEng: one hundred thousand ten of most your 4th beers would know who he is
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (PPartNP (PPartNP (DetNP (DetQuant this_Quant NumSg)) count_V2) kill_V2) (UseComp (CompAP (AdjOrd (OrdDigits (IDig D_8))))))
LangEng: this counted killed will be 8th
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (CountNP few_Det (UsePron it_Pron)) (ComplVA become_VA (AdjOrd (OrdSuperl small_A))))
LangEng: few of it wouldn't have become smallest
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (ApposCN (RelCN (ApposCN (AdjCN (AdjOrd (OrdDigits (IDig D_1))) (PartNP (UseN sea_N) (CountNP (DetQuant no_Quant NumSg) (UsePN john_PN)))) (PPartNP (CountNP someSg_Det (DetCN few_Det (UseN2 father_N2))) love_V2)) (UseRCl (TTAnt TPres AAnter) PNeg (RelSlash IdRP (SlashVP (UsePN paris_PN) (Slash2V3 talk_V3 (DetNP someSg_Det)))))) (MassNP (AdjCN (PositA bad_A) (AdvCN (PossNP (AdjCN (PositA young_A) (UseN2 father_N2)) (PPartNP (UsePron we_Pron) kill_V2)) here_Adv))))) (ComplVV want_VV (UseComp (CompAP (PositA big_A)))))
LangEng: 1st sea of none of John some of few fathers loved that Paris hasn't talked to some about bad young father of ours killed here wouldn't want to be big
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (PPartNP (UsePron i_Pron) fear_V2) (UseComp (CompAP (PositA cold_A))))
LangEng: I feared wouldn't be cold
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (AdvNP (DetCN (DetQuantOrd DefArt NumPl (OrdNumeralSuperl (num (pot2as3 (pot2plus (pot0 n9) (pot1 n9)))) hot_A)) (PartNP (AdjCN (UseComparA warm_A) (PartNP (ApposCN (AdvCN (UseN baby_N) now_Adv) (DetCN somePl_Det (UseN man_N))) (MassNP (AdjCN (PositA good_A) (UseN bird_N))))) (PPartNP (RelNP (DetNP (DetQuantOrd (PossPron i_Pron) NumSg (OrdSuperl blue_A))) (UseRCl (TTAnt TFut ASimul) PPos (RelVP IdRP (AdVVP always_AdV UseCopula)))) close_V2))) now_Adv) UseCopula)
LangEng: the nine hundred and ninetieth hottest warmer babies now some men of good bird of my bluest , that will always be , closed now won't be
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetCN many_Det (AdjCN (UseComparA black_A) (AdjCN (UseComparA red_A) (PartNP (AdjCN (AdAP so_AdA (AdAP almost_AdA (PositA young_A))) (UseN house_N)) (DetCN many_Det (AdjCN (AdAP too_AdA (PositA clean_A)) (UseN bike_N))))))) (UseV sleep_V))
LangEng: many blacker redder so almost young houses of many too clean bikes haven't slept
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (ExtAdvNP (UsePN john_PN) here_Adv) (UseV walk_V))
LangEng: John , here , walked
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (DetCN few_Det (ComplN2 (Use2N3 distance_N3) (RelNP (PredetNP most_Predet (ExtAdvNP (ExtAdvNP (ExtAdvNP (UsePN john_PN) now_Adv) now_Adv) now_Adv)) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP (AdVVP always_AdV (ComplVA become_VA (PositA red_A)))))))) (ComplVV must_VV (AdVVP always_AdV (ComplSlash (Slash3V3 talk_V3 (MassNP (PossNP (ComplN2 father_N2 (DetNP someSg_Det)) (UsePron she_Pron)))) (MassNP (AdvCN (UseN2 (Use3N3 distance_N3)) everywhere_Adv))))))
LangEng: few distances from most John , now , now , now , that will always have become red , had to always talk to distance everywhere about father of some of hers
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (AdvNP (UsePron youSg_Pron) (PrepNP after_Prep (CountNP few_Det (UsePN paris_PN)))) (ComplVV can8know_VV (ComplVS say_VS (UseCl (TTAnt TPast ASimul) PNeg (PredVP (RelNP (PredetNP all_Predet (UsePron he_Pron)) (UseRCl (TTAnt TFut AAnter) PNeg (RelVP IdRP (AdVVP always_AdV UseCopula)))) (AdVVP always_AdV (ComplSlash (SlashV2a have_V2) (DetCN (DetQuant this_Quant NumPl) (UseN flower_N)))))))))
LangEng: you after few of Paris will have been able to say that all he , that won't always have been , didn't always have these flowers
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (RelNP (PPartNP (ExtAdvNP (AdvNP (UsePron she_Pron) (PrepNP from_Prep (PredetNP all_Predet (MassNP (UseN wine_N))))) (PrepNP in8front_Prep (UsePron youSg_Pron))) understand_V2) (UseRCl (TTAnt TFut AAnter) PNeg (RelCl (PredVP (MassNP (RelCN (PossNP (UseN fish_N) (DetNP somePl_Det)) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP UseCopula)))) (ComplVS fear_VS (UseCl (TTAnt TPast ASimul) PPos (PredVP (UsePN paris_PN) (AdVVP always_AdV UseCopula)))))))) (ComplVA become_VA (PositA ready_A)))
LangEng: she from all wine , in front of you , understood , such that fish of some that hasn't been won't have feared that Paris was always , has become ready
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (UsePN paris_PN) (AdvVP (UseComp (CompNP (UsePron we_Pron))) everywhere_Adv))
LangEng: Paris had been us everywhere
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePN paris_PN) (ComplVS fear_VS (UseCl (TTAnt TCond AAnter) PPos (PredVP (DetNP (DetQuant (PossPron i_Pron) NumPl)) UseCopula))))
LangEng: Paris hasn't feared that mine would have been
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (UsePron he_Pron) (ComplSlash (AdVVPSlash always_AdV (Slash2V3 send_V3 (AdvNP (UsePron i_Pron) everywhere_Adv))) (CountNP few_Det (CountNP many_Det (PPartNP (AdvNP (RelNP (PredetNP not_Predet (DetNP someSg_Det)) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP UseCopula))) (PrepNP under_Prep (MassNP (UseN2 father_N2)))) have_V2)))))
LangEng: he always sent me everywhere to few of many of not some , that hasn't been , under father had
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (MassNP (ComplN2 father_N2 (AdvNP (AdvNP (ExtAdvNP (UsePN paris_PN) everywhere_Adv) everywhere_Adv) everywhere_Adv))) (ComplVA become_VA (PositA heavy_A)))
LangEng: father of Paris , everywhere , everywhere everywhere became heavy
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (CountNP few_Det (UsePron she_Pron)) (ComplVA become_VA (AdAP so_AdA (UseComparA bad_A))))
LangEng: few of her hadn't become so worse
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePN paris_PN) (UseComp (CompAP (AdjOrd (OrdNumeral (num (pot3 (pot1as2 (pot0as1 pot01)))))))))
LangEng: Paris wouldn't have been one thousandth
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PredetNP all_Predet (ExtAdvNP (MassNP (PartNP (AdvCN (UseN tree_N) now_Adv) (CountNP few_Det (DetNP someSg_Det)))) everywhere_Adv)) (ComplVS fear_VS (UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePN paris_PN) UseCopula))))
LangEng: all tree now of few of some , everywhere , would have feared that Paris won't be
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (DetNP someSg_Det) (ComplVV want_VV (ComplVQ know_VQ (UseQCl (TTAnt TFut ASimul) PNeg (QuestVP (IdetIP how8many_IDet) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestVP (IdetIP how8many_IDet) (AdvVP UseCopula here_Adv)))))))))
LangEng: some wanted to know how many won't know how many won't have been here
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (AdvNP (DetNP someSg_Det) (PrepNP on_Prep (DetCN someSg_Det (AdjCN (AdAP so_AdA (UseComparA white_A)) (ApposCN (AdvCN (ApposCN (UseN fire_N) (UsePron she_Pron)) everywhere_Adv) (DetCN few_Det (PossNP (UseN book_N) (DetNP many_Det)))))))) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestCl (PredVP (PredetNP only_Predet (DetCN every_Det (PossNP (UseN2 father_N2) (DetNP few_Det)))) (ComplVS hope_VS (UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePron he_Pron) (ComplVV can_VV UseCopula)))))))))
LangEng: some on some so whiter fire she everywhere few books of many won't have known if only every father of few wouldn't have hoped that he couldn't be
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (RelNP (PredetNP all_Predet (CountNP (DetQuantOrd no_Quant NumPl (OrdNumeralSuperl (num (pot2as3 (pot2 pot01))) bad_A)) (RelNP (MassNP (UseN2 father_N2)) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP (AdvVP (UseV sleep_V) everywhere_Adv)))))) (UseRCl (TTAnt TCond ASimul) PNeg (RelSlash IdRP (SlashVP (PPartNP (ExtAdvNP (CountNP every_Det (UsePron youSg_Pron)) (PrepNP with_Prep (UsePN paris_PN))) kill_V2) (Slash3V3 sell_V3 (DetCN (DetQuant that_Quant NumPl) (ApposCN (UseN2 father_N2) (UsePron youPl_Pron)))))))) (ComplVA become_VA (AdjOrd (OrdSuperl cold_A))))
LangEng: all no one hundredth worst of father , that didn't sleep everywhere , that everything of you , with Paris , killed wouldn't sell to those fathers you , didn't become coldest
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (CountNP few_Det (ExtAdvNP (DetCN (DetQuant this_Quant NumSg) (UseN boat_N)) (PrepNP to_Prep (UsePron youPl_Pron)))) (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PNeg (QuestIAdv why_IAdv (PredVP (UsePron we_Pron) (ComplSlash (SlashVV want_VV (SlashV2a teach_V2)) (UsePN john_PN)))))))
LangEng: few of this boat , to you , haven't known why we wouldn't want to teach John
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (AdvNP (MassNP (ComplN2 (Use2N3 distance_N3) (PredetNP only_Predet (ExtAdvNP (RelNP (ExtAdvNP (DetNP many_Det) everywhere_Adv) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula))) here_Adv)))) everywhere_Adv) (AdvVP (UseV go_V) here_Adv))
LangEng: distance from only many , everywhere , that are , here , everywhere wouldn't go here
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (UsePN john_PN) (AdvVP (AdvVP UseCopula here_Adv) here_Adv))
LangEng: John was here here
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (DetCN every_Det (AdjCN (AdAP almost_AdA (PositA young_A)) (UseN2 father_N2))) (ComplVV want_VV (ComplSlash (SlashVV must_VV (SlashVV want_VV (AdvVPSlash (SlashVV want_VV (Slash3V3 send_V3 (UsePN john_PN))) here_Adv))) (PredetNP all_Predet (PredetNP all_Predet (PredetNP not_Predet (UsePron youPl_Pron)))))))
LangEng: every almost young father would have wanted to have to all all not you want to want to send to John here
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (PredetNP only_Predet (AdvNP (ExtAdvNP (UsePron he_Pron) here_Adv) everywhere_Adv)) (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot2as3 (pot2 pot01))) big_A))))
LangEng: only he , here , everywhere has become one hundredth biggest
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (CountNP few_Det (MassNP (UseN2 father_N2))) (ComplVA become_VA (PositA old_A)))
LangEng: few of father become old
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (ExtAdvNP (UsePron i_Pron) everywhere_Adv) UseCopula)
LangEng: I , everywhere , am not
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PPartNP (PPartNP (DetNP (DetQuant (PossPron it_Pron) NumSg)) buy_V2) bite_V2) (ComplVA become_VA (AdAP so_AdA (AdAP too_AdA (UseComparA good_A)))))
LangEng: its bought bitten would have become so too better
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (PPartNP (RelNP (PredetNP all_Predet (PredetNP not_Predet (MassNP (AdvCN (AdvCN (UseN2 father_N2) now_Adv) (PrepNP behind_Prep (UsePN paris_PN)))))) (UseRCl (TTAnt TPast ASimul) PPos (RelCl (PredVP (CountNP many_Det (AdvNP (UsePron i_Pron) everywhere_Adv)) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestVP whoSg_IP UseCopula))))))) read_V2) (ComplVA become_VA (UseComparA clean_A)))
LangEng: all not father now behind Paris , such that many of me everywhere knew who was , read will have become cleaner
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (PPartNP (CountNP somePl_Det (CountNP few_Det (DetCN someSg_Det (UseN2 father_N2)))) buy_V2) (AdvVP (ComplVV can_VV (AdvVP UseCopula everywhere_Adv)) here_Adv))
LangEng: some of few of some father bought will have been able to be everywhere here
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP only_Predet (ExtAdvNP (RelNP (RelNP (DetCN every_Det (AdjCN (AdjOrd (OrdSuperl bad_A)) (AdjCN (PositA green_A) (UseN flower_N)))) (UseRCl (TTAnt TCond AAnter) PPos (RelSlash IdRP (SlashVP (DetNP someSg_Det) (SlashV2a love_V2))))) (UseRCl (TTAnt TPres AAnter) PPos (RelCl (PredVP (UsePron it_Pron) (UseComp (CompAdv here_Adv)))))) (PrepNP behind_Prep (UsePN john_PN)))) (AdvVP (ComplVV must_VV (ComplVA become_VA (AdjOrd (OrdNumeralSuperl (num (pot3 (pot1as2 pot110))) hot_A)))) everywhere_Adv))
LangEng: only every worst green flower , that some would have loved , such that it has been here , behind John , mustn't become ten thousandth hottest everywhere
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (DetNP someSg_Det) (ComplSlash (AdVVPSlash always_AdV (AdvVPSlash (Slash3V3 add_V3 (ExtAdvNP (PredetNP most_Predet (DetCN (DetQuant no_Quant NumPl) (UseN friend_N))) here_Adv)) everywhere_Adv)) (RelNP (UsePron we_Pron) (UseRCl (TTAnt TPres ASimul) PNeg (RelCl (PredVP (CountNP many_Det (UsePron i_Pron)) (ComplVA become_VA (AdjOrd (OrdSuperl big_A)))))))))
LangEng: some hasn't always added us , such that many of me don't become biggest , to most no friends , here , everywhere
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (CountNP somePl_Det (UsePron he_Pron)) (ComplVV can8know_VV (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PNeg (QuestIComp (CompIAdv where_IAdv) (DetNP every_Det))))))
LangEng: some of him have been able to know where everything hadn't been
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (ExtAdvNP (AdvNP (ExtAdvNP (DetNP many_Det) (PrepNP to_Prep (PredetNP most_Predet (PPartNP (AdvNP (UsePron he_Pron) everywhere_Adv) teach_V2)))) here_Adv) now_Adv) (ComplSlash (Slash2V3 talk_V3 (DetCN (DetQuant that_Quant NumPl) (AdvCN (AdjCN (PositA bad_A) (AdjCN (PositA yellow_A) (AdvCN (UseN ship_N) here_Adv))) here_Adv))) (UsePN john_PN)))
LangEng: many , to most him everywhere taught , here , now , wouldn't have talked to those bad yellow ships here here about John
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (UsePN paris_PN) (ComplVS know_VS (UseCl (TTAnt TPres ASimul) PPos (PredVP (MassNP (RelCN (ApposCN (AdvCN (UseN bike_N) everywhere_Adv) (ExtAdvNP (UsePN paris_PN) here_Adv)) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP (AdVVP always_AdV UseCopula))))) (ComplVA become_VA (UseComparA small_A))))))
LangEng: Paris will have known that bike everywhere Paris , here , that wasn't always becomes smaller
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (DetCN someSg_Det (ApposCN (ComplN2 (Use3N3 distance_N3) (MassNP (ComplN2 father_N2 (PredetNP all_Predet (CountNP every_Det (DetNP few_Det)))))) (UsePN john_PN))) (AdvVP (ComplVV must_VV (AdVVP always_AdV (ComplVS fear_VS (UseCl (TTAnt TPast ASimul) PNeg (PredVP (PPartNP (DetNP every_Det) do_V2) (ComplSlash (SlashV2a cut_V2) (UsePN paris_PN))))))) (PrepNP on_Prep (PPartNP (AdvNP (DetCN every_Det (ComplN2 father_N2 (UsePN paris_PN))) everywhere_Adv) do_V2))))
LangEng: some distance to father of all everything of few John will have to always fear that everything done didn't cut Paris on every father of Paris everywhere done
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePron he_Pron) (ComplVA become_VA (PositA young_A)))
LangEng: he wouldn't become young
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePron youPl_Pron) (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PPos (QuestSlash (IdetCN how8many_IDet (ComplN2 father_N2 (PPartNP (UsePron he_Pron) understand_V2))) (SlashVP (RelNP (CountNP (DetQuant IndefArt NumSg) (UsePron we_Pron)) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (AdVVP always_AdV UseCopula)))) (AdvVPSlash (Slash2V3 sell_V3 (UsePN john_PN)) now_Adv))))))
LangEng: you wouldn't have known how many fathers of him understood one of us , that wouldn't always be , sells John now to
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePN john_PN) (UseV run_V))
LangEng: John runs
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (ExtAdvNP (UsePN paris_PN) everywhere_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PNeg (QuestVP (IdetIP how8many_IDet) (ComplSlash (SlashVV can_VV (Slash2V3 give_V3 (PPartNP (DetNP many_Det) kill_V2))) (AdvNP (MassNP (UseN2 (Use3N3 distance_N3))) here_Adv))))))
LangEng: Paris , everywhere , won't have known how many couldn't give many killed distance here
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (RelNP (PredetNP not_Predet (DetCN (DetQuant DefArt NumSg) (AdvCN (UseN2 (ComplN3 distance_N3 (DetNP someSg_Det))) (PrepNP in_Prep (PredetNP most_Predet (UsePron it_Pron)))))) (UseRCl (TTAnt TPres ASimul) PNeg (RelSlash IdRP (SlashVP (UsePron i_Pron) (SlashVV can8know_VV (SlashVV must_VV (Slash2V3 talk_V3 (DetNP every_Det)))))))) (ComplVS fear_VS (UseCl (TTAnt TCond ASimul) PNeg (PredVP (MassNP (UseN bird_N)) UseCopula))))
LangEng: not the distance from some in most it , that I can't have to talk to everything about , doesn't fear that bird wouldn't be
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (PPartNP (UsePN john_PN) see_V2) (ComplSlash (Slash3V3 talk_V3 (UsePron it_Pron)) (DetCN somePl_Det (AdjCN (AdjOrd (OrdSuperl blue_A)) (AdvCN (AdvCN (PossNP (UseN2 (Use2N3 distance_N3)) (DetCN someSg_Det (UseN2 father_N2))) now_Adv) now_Adv)))))
LangEng: John seen will talk to some bluest distances of some father now now about it
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (RelNP (DetNP (DetQuantOrd no_Quant (NumCard (NumNumeral (num (pot3plus (pot2 pot01) (pot2 pot01))))) (OrdDigits (IDig D_0)))) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP (ComplSlash (Slash3V3 sell_V3 (UsePN john_PN)) (DetCN every_Det (ComplN2 (ComplN3 distance_N3 (UsePron youSg_Pron)) (DetNP few_Det))))))) (UseComp (CompAP (UseComparA white_A))))
LangEng: no one hundred thousand one hundred 0th , that didn't sell every distance from you to few to John , would be whiter
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (AdvNP (UsePN paris_PN) everywhere_Adv) (ComplVV can_VV (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PPos (QuestSlash whatPl_IP (SlashVP (DetNP many_Det) (Slash2V3 talk_V3 (UsePron it_Pron))))))))
LangEng: Paris everywhere wouldn't be able to know what many would talk to it about
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (PredetNP most_Predet (AdvNP (MassNP (AdvCN (AdjCN (AdjOrd (OrdDigits (IDig D_9))) (UseN2 (Use3N3 distance_N3))) (PrepNP under_Prep (DetNP (DetQuant this_Quant NumSg))))) everywhere_Adv)) (UseV live_V))
LangEng: most 9th distance under this everywhere won't live
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (PredetNP only_Predet (PredetNP most_Predet (MassNP (RelCN (ComplN2 father_N2 (MassNP (UseN beer_N))) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP (ComplVV must_VV (ComplVV can_VV UseCopula)))))))) (ComplVS hope_VS (UseCl (TTAnt TFut AAnter) PPos (PredVP (DetCN few_Det (ComplN2 father_N2 (RelNP (AdvNP (DetNP somePl_Det) everywhere_Adv) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP UseCopula))))) (ComplSlash (Slash2V3 give_V3 (DetCN someSg_Det (PartNP (UseN2 father_N2) (DetNP many_Det)))) (CountNP (DetQuant no_Quant NumSg) (PPartNP (DetCN many_Det (UseN music_N)) drink_V2)))))))
LangEng: only most father of beer that must be able to be wouldn't hope that few fathers of some everywhere , that won't be , will have given some father of many none of many musics drunk
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PredetNP only_Predet (DetCN (DetQuant DefArt NumPl) (PossNP (UseN2 (ComplN3 distance_N3 (DetCN someSg_Det (ComplN2 (Use3N3 distance_N3) (UsePN john_PN))))) (PredetNP only_Predet (MassNP (ComplN2 (Use2N3 distance_N3) (MassNP (UseN2 father_N2)))))))) (ComplVS know_VS (UseCl (TTAnt TCond ASimul) PPos (PredVP (AdvNP (PPartNP (DetCN few_Det (ComplN2 (Use2N3 distance_N3) (UsePN john_PN))) cut_V2) everywhere_Adv) (ComplSlash (AdvVPSlash (AdVVPSlash always_AdV (SlashVV can_VV (SlashV2a cut_V2))) everywhere_Adv) (CountNP few_Det (UsePron i_Pron)))))))
LangEng: only the distances from some distance to John of only distance from father wouldn't have known that few distances from John cut everywhere would always be able to cut everywhere few of me
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP only_Predet (CountNP many_Det (PredetNP all_Predet (UsePN john_PN)))) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PNeg (QuestIAdv why_IAdv (PredVP (DetCN (DetQuantOrd (PossPron we_Pron) NumPl (OrdDigits (IDig D_5))) (AdvCN (ComplN2 (Use2N3 distance_N3) (UsePron i_Pron)) everywhere_Adv)) (UseV come_V))))))
LangEng: only many of all John don't know why our 5th distances from me everywhere won't have come
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (MassNP (ApposCN (UseN apple_N) (DetNP many_Det))) (UseV jump_V))
LangEng: apple many would jump
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetCN every_Det (ApposCN (RelCN (ComplN2 (Use2N3 distance_N3) (MassNP (ApposCN (PossNP (UseN2 father_N2) (UsePN paris_PN)) (PredetNP all_Predet (UsePron it_Pron))))) (UseRCl (TTAnt TPres ASimul) PNeg (RelSlash IdRP (SlashVP (CountNP few_Det (UsePN john_PN)) (SlashVV want_VV (SlashV2a love_V2)))))) (ExtAdvNP (MassNP (ComplN2 (ComplN3 distance_N3 (MassNP (UseN cloud_N))) (RelNP (AdvNP (DetNP few_Det) here_Adv) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP UseCopula))))) now_Adv))) (UseComp (CompAP (PositA heavy_A))))
LangEng: every distance from father of Paris all it that few of John don't want to love distance from cloud to few here , that were , now , wasn't heavy
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PredetNP all_Predet (PredetNP most_Predet (RelNP (CountNP somePl_Det (PredetNP only_Predet (UsePN john_PN))) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (ComplVQ know_VQ (UseQCl (TTAnt TCond ASimul) PNeg (QuestVP whatSg_IP UseCopula)))))))) (ComplSlash (SlashVV can8know_VV (Slash3V3 send_V3 (UsePron youPl_Pron))) (PPartNP (MassNP (ComplN2 (Use2N3 distance_N3) (PredetNP not_Predet (PPartNP (ExtAdvNP (DetNP many_Det) everywhere_Adv) cut_V2)))) eat_V2)))
LangEng: all most some of only John , that won't know what wouldn't be , wouldn't have been able to distance from not many , everywhere , cut eaten send to you
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (MassNP (ComplN2 father_N2 (AdvNP (DetNP many_Det) here_Adv))) (AdVVP always_AdV (ComplVA become_VA (UseComparA young_A))))
LangEng: father of many here would always become younger
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (CountNP few_Det (DetCN (DetQuant DefArt (NumCard (AdNum almost_AdN (NumDigits (IIDig D_7 (IDig D_5)))))) (UseN language_N))) (AdvVP (ComplVV can8know_VV (UseComp (CompAP (UseComparA green_A)))) here_Adv))
LangEng: few of the almost 7 &+ 5 languages can't be greener here
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (DetCN few_Det (RelCN (PossNP (UseN fire_N) (MassNP (PartNP (RelCN (UseN2 (Use3N3 distance_N3)) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP UseCopula))) (CountNP many_Det (UsePron youSg_Pron))))) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (AdvVP UseCopula (PrepNP in_Prep (AdvNP (DetNP somePl_Det) now_Adv))))))) (ComplVV must_VV UseCopula))
LangEng: few fires of distance that hasn't been of many of you that have been in some now wouldn't have to be
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (AdvNP (DetNP (DetQuantOrd IndefArt NumPl (OrdSuperl bad_A))) (PrepNP with_Prep (ExtAdvNP (PPartNP (ExtAdvNP (AdvNP (DetCN (DetQuant this_Quant NumSg) (UseN ship_N)) (PrepNP in_Prep (UsePN john_PN))) here_Adv) do_V2) everywhere_Adv))) (UseComp (CompAP (AdjOrd (OrdNumeralSuperl (num (pot2as3 (pot1as2 (pot1to19 n7)))) bad_A)))))
LangEng: worst with this ship in John , here , done , everywhere , have been seventeenth worst
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (PPartNP (ExtAdvNP (AdvNP (UsePron he_Pron) now_Adv) (PrepNP to_Prep (UsePron it_Pron))) kill_V2) (AdVVP always_AdV (ComplVS know_VS (UseCl (TTAnt TFut ASimul) PPos (PredVP (ExtAdvNP (CountNP somePl_Det (PredetNP not_Predet (DetNP every_Det))) (PrepNP to_Prep (MassNP (UseN2 father_N2)))) (ComplVV want_VV UseCopula))))))
LangEng: he now , to it , killed had always known that some of not everything , to father , will want to be
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (CountNP many_Det (DetNP someSg_Det)) (ComplSlash (SlashV2a read_V2) (MassNP (UseN2 (Use3N3 distance_N3)))))
LangEng: many of some didn't read distance
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (MassNP (RelCN (RelCN (PartNP (UseN man_N) (MassNP (PartNP (ApposCN (UseN2 father_N2) (UsePN john_PN)) (UsePN john_PN)))) (UseRCl (TTAnt TPres ASimul) PPos (RelCl (PredVP (AdvNP (UsePron it_Pron) here_Adv) (AdVVP always_AdV (UseV sleep_V)))))) (UseRCl (TTAnt TPast AAnter) PNeg (RelCl (PredVP (ExtAdvNP (PredetNP all_Predet (UsePN paris_PN)) everywhere_Adv) UseCopula))))) UseCopula)
LangEng: man of father John of John such that it here always sleeps such that all Paris , everywhere , hadn't been would be
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (AdvNP (DetCN (DetQuantOrd IndefArt NumSg (OrdNumeral (num (pot2as3 (pot2plus (pot0 n5) (pot0as1 pot01)))))) (UseN book_N)) here_Adv) (ComplSlash (AdvVPSlash (AdVVPSlash always_AdV (AdVVPSlash always_AdV (SlashVV want_VV (Slash3V3 give_V3 (DetCN every_Det (UseN ship_N)))))) now_Adv) (PPartNP (UsePN john_PN) eat_V2)))
LangEng: a five hundred and first book here had always always wanted John eaten to give every ship now
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (PredetNP all_Predet (UsePron she_Pron)) (ComplVS hope_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (DetCN every_Det (UseN2 (ComplN3 distance_N3 (ExtAdvNP (UsePN paris_PN) everywhere_Adv)))) UseCopula))))
LangEng: all she wouldn't have hoped that every distance from Paris , everywhere , has been
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (DetNP (DetQuantOrd IndefArt (NumCard (NumDigits (IIDig D_3 (IDig D_1)))) (OrdNumeralSuperl (num (pot3 (pot1as2 (pot1to19 n5)))) cold_A))) (ComplVV can_VV (AdvVP (ComplSlash (Slash3V3 give_V3 (DetCN (DetQuantOrd this_Quant NumSg (OrdDigits (IDig D_1))) (PartNP (ApposCN (UseN2 father_N2) (DetNP someSg_Det)) (MassNP (UseN grammar_N))))) (PPartNP (UsePron it_Pron) do_V2)) here_Adv)))
LangEng: 3 &+ 1 fifteen thousandth coldest won't be able to give it done this 1st father some of grammar here
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetNP few_Det) UseCopula)
LangEng: few weren't
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PredetNP only_Predet (UsePN paris_PN)) (ComplVA become_VA (AdjOrd (OrdNumeral (num (pot3 (pot1as2 (pot0as1 pot01))))))))
LangEng: only Paris hadn't become one thousandth
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (DetNP someSg_Det) (ComplSlash (AdVVPSlash always_AdV (AdVVPSlash always_AdV (AdvVPSlash (SlashV2a find_V2) (PrepNP after_Prep (DetCN few_Det (PartNP (UseN2 father_N2) (UsePN paris_PN))))))) (UsePN john_PN)))
LangEng: some always always finds after few fathers of Paris John
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePron he_Pron) (AdVVP always_AdV (UseV run_V)))
LangEng: he always runs
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (RelNP (RelNP (PredetNP only_Predet (ExtAdvNP (UsePron youSg_Pron) everywhere_Adv)) (UseRCl (TTAnt TCond AAnter) PNeg (RelCl (PredVP (DetNP few_Det) (ComplVV want_VV (ComplVA become_VA (UseComparA heavy_A))))))) (UseRCl (TTAnt TPast ASimul) PPos (RelSlash IdRP (SlashVP (UsePron he_Pron) (Slash2V3 add_V3 (UsePN john_PN)))))) (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PPos (QuestVP whatPl_IP (UseV come_V)))))
LangEng: only you , everywhere , such that few wouldn't have wanted to become heavier , that he added John to , knew what have come
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (DetNP somePl_Det) (ComplVS hope_VS (UseCl (TTAnt TCond AAnter) PNeg (PredVP (PredetNP only_Predet (ExtAdvNP (AdvNP (DetCN few_Det (UseN2 father_N2)) everywhere_Adv) now_Adv)) (ComplVQ know_VQ (UseQCl (TTAnt TFut AAnter) PPos (QuestSlash whoSg_IP (SlashVP (UsePN john_PN) (SlashV2a cut_V2)))))))))
LangEng: some hope that only few fathers everywhere , now , wouldn't have known whom John will have cut
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (AdvNP (DetCN (DetQuant that_Quant NumPl) (PossNP (RelCN (AdvCN (AdvCN (UseN2 father_N2) now_Adv) everywhere_Adv) (UseRCl (TTAnt TCond AAnter) PPos (RelSlash IdRP (SlashVP (UsePN john_PN) (SlashV2a wait_V2))))) (AdvNP (UsePN paris_PN) now_Adv))) now_Adv) (ComplVV want_VV (ComplVS fear_VS (UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePron youPl_Pron) (UseComp (CompCN (UseN2 (Use3N3 distance_N3)))))))))
LangEng: those fathers now everywhere that John would have waited for of Paris now now want to fear that you won't be distances
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (DetCN few_Det (AdjCN (AdAP very_AdA (AdAP so_AdA (AdAP too_AdA (UseComparA cold_A)))) (PossNP (PartNP (PossNP (PossNP (AdjCN (UseComparA red_A) (UseN2 father_N2)) (AdvNP (UsePN john_PN) here_Adv)) (PredetNP most_Predet (DetCN few_Det (UseN2 father_N2)))) (UsePN john_PN)) (PPartNP (ExtAdvNP (UsePN paris_PN) everywhere_Adv) kill_V2)))) (UseComp (CompAP (AdAP almost_AdA (AdjOrd (OrdNumeralSuperl (num (pot2as3 (pot2plus pot01 pot111))) hot_A))))))
LangEng: few very so too colder redder fathers of John here of most few fathers of John of Paris , everywhere , killed have been almost one hundred and eleventh hottest
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (PredetNP all_Predet (DetCN someSg_Det (PossNP (RelCN (PartNP (RelCN (ComplN2 (Use2N3 distance_N3) (UsePN paris_PN)) (UseRCl (TTAnt TPres ASimul) PNeg (RelVP IdRP UseCopula))) (CountNP somePl_Det (MassNP (UseN2 father_N2)))) (UseRCl (TTAnt TCond ASimul) PPos (RelCl (PredVP (UsePron youPl_Pron) (AdVVP always_AdV UseCopula))))) (PPartNP (MassNP (ComplN2 father_N2 (UsePN paris_PN))) kill_V2)))) (ComplVA become_VA (AdAP so_AdA (PositA young_A))))
LangEng: all some distance from Paris that isn't of some of father such that you would always be of father of Paris killed had become so young
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (PPartNP (DetCN every_Det (ComplN2 (Use3N3 distance_N3) (PPartNP (PPartNP (DetNP many_Det) cut_V2) kill_V2))) understand_V2) (AdvVP (AdVVP always_AdV (AdvVP (UseV go_V) now_Adv)) (PrepNP on_Prep (DetNP every_Det))))
LangEng: every distance to many cut killed understood always went now on everything
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (ExtAdvNP (UsePron we_Pron) now_Adv) (AdvVP (AdVVP always_AdV (UseV walk_V)) (PrepNP on_Prep (UsePN paris_PN))))
LangEng: we , now , always walk on Paris
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (MassNP (RelCN (AdvCN (RelCN (UseN language_N) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP (UseComp (CompAdv here_Adv))))) (PrepNP in_Prep (AdvNP (CountNP (DetQuantOrd that_Quant NumSg (OrdSuperl green_A)) (PredetNP most_Predet (UsePN paris_PN))) everywhere_Adv))) (UseRCl (TTAnt TCond AAnter) PNeg (RelSlash IdRP (SlashVP (ExtAdvNP (UsePron it_Pron) now_Adv) (Slash3V3 give_V3 (DetNP every_Det))))))) (ComplSlash (AdvVPSlash (AdVVPSlash always_AdV (SlashV2a see_V2)) everywhere_Adv) (AdvNP (UsePron he_Pron) here_Adv)))
LangEng: language that will have been here in that greenest of most Paris everywhere that it , now , wouldn't have given everything always sees everywhere him here
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (CountNP many_Det (ExtAdvNP (RelNP (AdvNP (DetCN few_Det (AdjCN (AdjOrd (OrdSuperl small_A)) (UseN2 (Use3N3 distance_N3)))) everywhere_Adv) (UseRCl (TTAnt TCond ASimul) PNeg (RelVP IdRP (UseComp (CompNP (UsePron she_Pron)))))) (PrepNP with_Prep (UsePN paris_PN)))) (AdVVP always_AdV (AdvVP UseCopula everywhere_Adv)))
LangEng: many of few smallest distances everywhere , that wouldn't be her , with Paris , will always have been everywhere
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (DetCN few_Det (RelCN (ComplN2 (ComplN3 distance_N3 (UsePron she_Pron)) (DetNP every_Det)) (UseRCl (TTAnt TPast AAnter) PNeg (RelCl (PredVP (DetNP (DetQuantOrd this_Quant NumSg (OrdSuperl white_A))) (UseComp (CompAP (PositA new_A)))))))) (ComplVV can8know_VV (UseV come_V)))
LangEng: few distances from her to everything such that this whitest hadn't been new won't have been able to come
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (MassNP (PossNP (ApposCN (AdjCN (UseComparA black_A) (PossNP (PartNP (PartNP (UseN2 father_N2) (UsePron she_Pron)) (PPartNP (UsePron it_Pron) break_V2)) (DetNP every_Det))) (UsePron he_Pron)) (RelNP (MassNP (PartNP (PartNP (UseN girl_N) (AdvNP (UsePN john_PN) everywhere_Adv)) (RelNP (CountNP someSg_Det (DetNP few_Det)) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP UseCopula))))) (UseRCl (TTAnt TPres AAnter) PNeg (RelCl (PredVP (PredetNP not_Predet (DetNP every_Det)) (ComplSlash (SlashV2a cut_V2) (DetNP somePl_Det)))))))) (ComplSlash (AdVVPSlash always_AdV (Slash2V3 sell_V3 (DetCN someSg_Det (PartNP (PossNP (PossNP (UseN apple_N) (UsePron she_Pron)) (UsePN john_PN)) (RelNP (AdvNP (UsePron she_Pron) here_Adv) (UseRCl (TTAnt TPres ASimul) PPos (RelVP IdRP UseCopula))))))) (MassNP (PossNP (ApposCN (ApposCN (AdjCN (PositA good_A) (UseN bird_N)) (PPartNP (PPartNP (DetNP someSg_Det) break_V2) do_V2)) (PredetNP all_Predet (DetNP many_Det))) (UsePN john_PN)))))
LangEng: blacker father of her of it broken of everything he of girl of John everywhere of some of few , that wouldn't have been , such that not everything hasn't cut some , won't always have sold some apple of hers of John of her here , that is , to good bird some broken done all many of John
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePN paris_PN) (AdvVP (ComplVA become_VA (PositA green_A)) everywhere_Adv))
LangEng: Paris won't become green everywhere
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (DetNP many_Det) (ComplVS know_VS (UseCl (TTAnt TPres AAnter) PPos (PredVP (PredetNP not_Predet (ExtAdvNP (PredetNP not_Predet (UsePron we_Pron)) now_Adv)) (UseComp (CompAdv everywhere_Adv))))))
LangEng: many have known that not not we , now , have been everywhere
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (UsePron youPl_Pron) (AdVVP always_AdV (ComplVA become_VA (AdAP very_AdA (PositA green_A)))))
LangEng: you have always become very green
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (ExtAdvNP (DetNP (DetQuant this_Quant NumSg)) (PrepNP behind_Prep (CountNP someSg_Det (ExtAdvNP (UsePN paris_PN) now_Adv)))) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PPos (QuestCl (PredVP (DetCN somePl_Det (UseN2 (ComplN3 distance_N3 (DetNP every_Det)))) UseCopula)))))
LangEng: this , behind some of Paris , now , knows if some distances from everything were
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePN john_PN) (AdVVP always_AdV UseCopula))
LangEng: John hadn't always been
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (MassNP (PartNP (PossNP (UseN2 (ComplN3 distance_N3 (CountNP few_Det (UsePN paris_PN)))) (AdvNP (UsePN paris_PN) (PrepNP with_Prep (DetCN many_Det (AdvCN (UseN house_N) everywhere_Adv))))) (RelNP (DetNP someSg_Det) (UseRCl (TTAnt TFut ASimul) PPos (RelCl (PredVP (ExtAdvNP (DetNP many_Det) now_Adv) (ComplSlash (SlashV2a teach_V2) (DetNP someSg_Det)))))))) (AdvVP (ComplVV can_VV (AdvVP (ComplSlash (AdVVPSlash always_AdV (Slash2V3 give_V3 (UsePN john_PN))) (DetCN many_Det (ComplN2 (Use3N3 distance_N3) (DetNP someSg_Det)))) now_Adv)) here_Adv))
LangEng: distance from few of Paris of Paris with many houses everywhere of some , such that many , now , will teach some , couldn't always give John many distances to some now here
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PPartNP (DetCN someSg_Det (PossNP (ComplN2 (Use2N3 distance_N3) (MassNP (PossNP (UseN blood_N) (PPartNP (UsePN paris_PN) read_V2)))) (CountNP somePl_Det (AdvNP (AdvNP (UsePN paris_PN) (PrepNP in8front_Prep (DetNP someSg_Det))) here_Adv)))) find_V2) (UseV jump_V))
LangEng: some distance from blood of Paris read of some of Paris in front of some here found would have jumped
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (AdvNP (UsePron she_Pron) here_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PNeg (QuestVP whatSg_IP (UseV run_V)))))
LangEng: she here won't know what didn't run
Lang: UseCl (TTAnt TPres ASimul) PNeg (PredVP (PredetNP all_Predet (PPartNP (RelNP (DetCN every_Det (AdvCN (UseN2 (Use3N3 distance_N3)) here_Adv)) (UseRCl (TTAnt TPast AAnter) PPos (RelVP IdRP (AdVVP always_AdV UseCopula)))) do_V2)) (UseV play_V))
LangEng: all every distance here , that had always been , done doesn't play
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (UsePron he_Pron) (AdVVP always_AdV (ComplVV can8know_VV (ComplSlash (Slash2V3 give_V3 (DetCN someSg_Det (UseN2 (ComplN3 distance_N3 (DetNP somePl_Det))))) (CountNP every_Det (ExtAdvNP (PPartNP (DetCN many_Det (UseN2 father_N2)) teach_V2) here_Adv))))))
LangEng: he hasn't always been able to give some distance from some everything of many fathers taught , here
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (AdvNP (ExtAdvNP (UsePN john_PN) (PrepNP on_Prep (RelNP (CountNP somePl_Det (DetCN someSg_Det (UseN sea_N))) (UseRCl (TTAnt TFut ASimul) PNeg (RelVP IdRP (AdvVP (ComplVV can_VV UseCopula) everywhere_Adv)))))) here_Adv) (AdvVP (ComplVV must_VV (UseComp (CompAdv everywhere_Adv))) now_Adv))
LangEng: John , on some of some sea , that won't be able to be everywhere , here hadn't had to be everywhere now
Lang: UseCl (TTAnt TFut ASimul) PNeg (PredVP (PredetNP all_Predet (RelNP (DetCN many_Det (UseN apple_N)) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP (ComplVQ know_VQ (UseQCl (TTAnt TPres ASimul) PPos (QuestIComp (CompIP whoSg_IP) (UsePN john_PN)))))))) (ComplVV can_VV (ComplSlash (Slash2V3 add_V3 (UsePN paris_PN)) (DetNP someSg_Det))))
LangEng: all many apples , that knew who John is , won't be able to add Paris to some
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (DetCN (DetQuantOrd DefArt NumSg (OrdNumeral (num (pot3plus (pot2 pot01) (pot1as2 pot110))))) (ComplN2 (ComplN3 distance_N3 (MassNP (AdvCN (ComplN2 (Use2N3 distance_N3) (CountNP few_Det (UsePron he_Pron))) now_Adv))) (PPartNP (UsePN john_PN) kill_V2))) (UseComp (CompCN (AdvCN (UseN2 father_N2) everywhere_Adv))))
LangEng: the one hundred thousand tenth distance from distance from few of him now to John killed would be a father everywhere
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePron we_Pron) (UseV jump_V))
LangEng: we wouldn't jump
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (CountNP every_Det (MassNP (UseN boat_N))) (AdvVP (ComplVS know_VS (UseCl (TTAnt TPast ASimul) PNeg (PredVP (UsePron i_Pron) (ComplVV must_VV (UseV live_V))))) everywhere_Adv))
LangEng: everything of boat wouldn't know everywhere that I hadn't to live
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (RelNP (CountNP somePl_Det (PredetNP only_Predet (DetNP (DetQuant IndefArt NumSg)))) (UseRCl (TTAnt TCond AAnter) PPos (RelCl (PredVP (AdvNP (RelNP (PPartNP (UsePN john_PN) see_V2) (UseRCl (TTAnt TPres AAnter) PNeg (RelVP IdRP UseCopula))) now_Adv) UseCopula)))) (ComplVA become_VA (PositA hot_A)))
LangEng: some of only one , such that John seen , that hasn't been , now would have been , would have become hot
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (PredetNP only_Predet (CountNP every_Det (UsePN paris_PN))) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PPos (QuestVP whoSg_IP (ComplVV can_VV (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_6)))))))))
LangEng: only everything of Paris hasn't known who would have been able to become 6th
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePN john_PN) (ComplVS know_VS (UseCl (TTAnt TPast ASimul) PNeg (PredVP (PPartNP (CountNP (DetQuantOrd this_Quant NumSg (OrdSuperl cold_A)) (DetNP (DetQuant no_Quant NumSg))) cut_V2) (UseV play_V)))))
LangEng: John wouldn't know that this coldest of none cut didn't play
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (CountNP someSg_Det (DetCN (DetQuantOrd that_Quant (NumCard (NumDigits (IIDig D_5 (IDig D_7)))) (OrdNumeral (num (pot3plus (pot2 pot01) (pot2plus (pot0 n8) pot110))))) (ComplN2 (ComplN3 distance_N3 (PPartNP (DetNP someSg_Det) find_V2)) (DetCN (DetQuant no_Quant NumSg) (ApposCN (RelCN (PartNP (UseN beer_N) (UsePron we_Pron)) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP UseCopula))) (DetNP (DetQuant no_Quant NumPl))))))) UseCopula)
LangEng: some of those 5 &+ 7 one hundred thousand eight hundred and tenth distances from some found to no beer of us that will have been none hadn't been
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (DetCN someSg_Det (PossNP (ComplN2 (ComplN3 distance_N3 (CountNP (DetQuant this_Quant NumSg) (PredetNP all_Predet (DetCN (DetQuant this_Quant NumPl) (UseN2 father_N2))))) (ExtAdvNP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TFut AAnter) PPos (RelVP IdRP (AdvVP UseCopula now_Adv)))) (PrepNP under_Prep (UsePron youSg_Pron)))) (RelNP (CountNP few_Det (CountNP (DetQuant DefArt NumPl) (DetCN (DetQuant IndefArt NumPl) (AdjCN (PositA black_A) (UseN2 father_N2))))) (UseRCl (TTAnt TPast ASimul) PPos (RelVP IdRP (AdvVP (AdVVP always_AdV (AdVVP always_AdV UseCopula)) here_Adv)))))) (ComplVS fear_VS (UseCl (TTAnt TFut AAnter) PPos (PredVP (DetCN few_Det (PartNP (ApposCN (UseN2 (Use3N3 distance_N3)) (MassNP (UseN car_N))) (CountNP somePl_Det (MassNP (UseN baby_N))))) UseCopula))))
LangEng: some distance from this of all these fathers to Paris , that will have been now , under you , of few of them of black fathers , that were always always here , hadn't feared that few distances car of some of baby will have been
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (AdvNP (AdvNP (PPartNP (DetCN many_Det (RelCN (AdvCN (ComplN2 (Use3N3 distance_N3) (UsePN paris_PN)) (PrepNP with_Prep (UsePron i_Pron))) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP UseCopula)))) drink_V2) now_Adv) here_Adv) (AdvVP (ComplVS know_VS (UseCl (TTAnt TFut AAnter) PNeg (PredVP (AdvNP (DetCN many_Det (ApposCN (UseN horse_N) (UsePron i_Pron))) now_Adv) (UseComp (CompAP (AdjOrd (OrdSuperl good_A))))))) (PrepNP between_Prep (AdvNP (DetNP somePl_Det) everywhere_Adv))))
LangEng: many distances to Paris with me that weren't drunk now here had known between some everywhere that many horses I now won't have been best
Lang: UseCl (TTAnt TFut AAnter) PPos (PredVP (ExtAdvNP (DetNP (DetQuant (PossPron youPl_Pron) (NumCard (AdNum at_least_AdN (AdNum at_least_AdN (NumDigits (IDig D_3))))))) now_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PPos (QuestVP whoSg_IP (ComplVQ know_VQ (UseQCl (TTAnt TPast ASimul) PNeg (QuestIComp (CompIP whatPl_IP) (UsePN paris_PN))))))))
LangEng: your at least at least 3 , now , will have known who would have known what Paris wasn't
Lang: UseCl (TTAnt TCond ASimul) PNeg (PredVP (UsePron it_Pron) (UseV travel_V))
LangEng: it wouldn't travel
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (ExtAdvNP (CountNP many_Det (ExtAdvNP (DetNP somePl_Det) everywhere_Adv)) here_Adv) (ComplVS fear_VS (UseCl (TTAnt TFut ASimul) PPos (PredVP (DetNP (DetQuantOrd (PossPron he_Pron) NumSg (OrdSuperl green_A))) (AdVVP always_AdV (AdVVP always_AdV UseCopula))))))
LangEng: many of some , everywhere , here , would have feared that his greenest will always always be
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (DetCN (DetQuantOrd no_Quant NumPl (OrdNumeralSuperl (num (pot3 (pot2 (pot0 n2)))) cold_A)) (ApposCN (ApposCN (ApposCN (UseN2 (Use2N3 distance_N3)) (DetNP somePl_Det)) (PredetNP not_Predet (AdvNP (DetNP somePl_Det) here_Adv))) (RelNP (AdvNP (UsePN john_PN) now_Adv) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (AdvVP (ComplVV can8know_VV UseCopula) (PrepNP from_Prep (DetNP every_Det)))))))) (AdvVP (UseComp (CompNP (UsePN paris_PN))) everywhere_Adv))
LangEng: no two hundred thousandth coldest distances some not some here John now , that has been able to be from everything , wouldn't have been Paris everywhere
Lang: UseCl (TTAnt TFut ASimul) PPos (PredVP (RelNP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP (UseV run_V)))) (UseRCl (TTAnt TFut ASimul) PPos (RelSlash IdRP (SlashVP (UsePN paris_PN) (SlashV2a find_V2))))) (ComplVV want_VV (UseV go_V)))
LangEng: Paris , that has run , that Paris will find , will want to go
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (UsePron he_Pron) (AdvVP (ComplSlash (Slash2V3 sell_V3 (CountNP every_Det (CountNP (DetQuant this_Quant NumSg) (ExtAdvNP (AdvNP (UsePN john_PN) here_Adv) (PrepNP under_Prep (DetNP every_Det)))))) (RelNP (AdvNP (RelNP (UsePN paris_PN) (UseRCl (TTAnt TPres AAnter) PPos (RelVP IdRP UseCopula))) everywhere_Adv) (UseRCl (TTAnt TFut ASimul) PPos (RelSlash IdRP (SlashVP (PPartNP (UsePron youPl_Pron) break_V2) (SlashVV must_VV (SlashV2a cut_V2))))))) now_Adv))
LangEng: he would sell everything of this of John here , under everything , to Paris , that has been , everywhere , that you broken will have to cut , now
Lang: UseCl (TTAnt TCond AAnter) PPos (PredVP (PPartNP (RelNP (CountNP many_Det (UsePron i_Pron)) (UseRCl (TTAnt TPast ASimul) PPos (RelSlash IdRP (SlashVP (CountNP few_Det (DetNP someSg_Det)) (SlashV2a see_V2))))) teach_V2) (ComplVV can8know_VV (ComplVV want_VV (AdvVP (ComplSlash (SlashVV want_VV (SlashVV can_VV (AdvVPSlash (SlashV2a find_V2) now_Adv))) (AdvNP (MassNP (UseN2 (Use3N3 distance_N3))) here_Adv)) now_Adv))))
LangEng: many of me , that few of some saw , taught would have been able to want to want to be able to find now distance here now
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (PredetNP not_Predet (UsePN paris_PN)) (AdvVP (UseV come_V) (PrepNP between_Prep (MassNP (AdvCN (RelCN (ApposCN (AdjCN (UseComparA green_A) (UseN2 father_N2)) (AdvNP (UsePron we_Pron) here_Adv)) (UseRCl (TTAnt TCond AAnter) PPos (RelVP IdRP (AdvVP UseCopula everywhere_Adv)))) now_Adv)))))
LangEng: not Paris hadn't come between greener father we here that would have been everywhere now
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (ExtAdvNP (PredetNP most_Predet (PPartNP (CountNP many_Det (DetCN (DetQuantOrd DefArt NumPl (OrdSuperl big_A)) (PossNP (PartNP (UseN flower_N) (UsePron youSg_Pron)) (PredetNP all_Predet (DetNP somePl_Det))))) eat_V2)) everywhere_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TCond AAnter) PNeg (QuestSlash whatPl_IP (SlashVP (DetNP somePl_Det) (AdvVPSlash (SlashV2a eat_V2) here_Adv))))))
LangEng: most many of the biggest flowers of you of all some eaten , everywhere , wouldn't have known what some wouldn't have eaten here
Lang: UseCl (TTAnt TPres AAnter) PNeg (PredVP (PPartNP (DetCN few_Det (AdvCN (UseN2 (ComplN3 distance_N3 (MassNP (PartNP (UseN star_N) (DetNP every_Det))))) everywhere_Adv)) break_V2) (ComplSlash (Slash3V3 talk_V3 (RelNP (UsePron we_Pron) (UseRCl (TTAnt TCond AAnter) PNeg (RelVP IdRP UseCopula)))) (AdvNP (MassNP (AdvCN (PartNP (ComplN2 (ComplN3 distance_N3 (DetNP many_Det)) (PredetNP not_Predet (UsePN paris_PN))) (DetCN few_Det (PossNP (UseN car_N) (UsePN paris_PN)))) (PrepNP from_Prep (CountNP somePl_Det (PPartNP (UsePN paris_PN) kill_V2))))) (PrepNP under_Prep (PredetNP most_Predet (UsePN john_PN))))))
LangEng: few distances from star of everything everywhere broken haven't talked to distance from many to not Paris of few cars of Paris from some of Paris killed under most John about us , that wouldn't have been
Lang: UseCl (TTAnt TPast AAnter) PNeg (PredVP (UsePron we_Pron) (ComplVS hope_VS (UseCl (TTAnt TFut ASimul) PNeg (PredVP (UsePN john_PN) (UseV come_V)))))
LangEng: we hadn't hoped that John won't come
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (ExtAdvNP (UsePN john_PN) everywhere_Adv) (ComplVQ know_VQ (UseQCl (TTAnt TPast AAnter) PNeg (QuestIComp (CompIP whoPl_IP) (UsePN paris_PN)))))
LangEng: John , everywhere , had known who Paris hadn't been
Lang: UseCl (TTAnt TPast ASimul) PPos (PredVP (MassNP (PossNP (ComplN2 (Use2N3 distance_N3) (PPartNP (AdvNP (PPartNP (DetNP few_Det) wait_V2) everywhere_Adv) love_V2)) (DetCN someSg_Det (ApposCN (AdvCN (ComplN2 (Use3N3 distance_N3) (MassNP (UseN2 father_N2))) now_Adv) (UsePron youPl_Pron))))) (AdVVP always_AdV (ComplVA become_VA (PositA hot_A))))
LangEng: distance from few waited everywhere loved of some distance to father now you always became hot
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (ExtAdvNP (ExtAdvNP (ExtAdvNP (CountNP every_Det (MassNP (PartNP (UseN2 (Use2N3 distance_N3)) (ExtAdvNP (DetNP few_Det) everywhere_Adv)))) (PrepNP in8front_Prep (MassNP (ComplN2 (Use2N3 distance_N3) (UsePN john_PN))))) here_Adv) everywhere_Adv) (AdvVP (AdvVP (ComplVQ know_VQ (UseQCl (TTAnt TPres AAnter) PPos (QuestSlash whoPl_IP (SlashVP (CountNP every_Det (UsePN john_PN)) (Slash3V3 give_V3 (UsePN paris_PN)))))) here_Adv) (PrepNP between_Prep (ExtAdvNP (AdvNP (PredetNP only_Predet (PPartNP (UsePron we_Pron) cut_V2)) everywhere_Adv) everywhere_Adv))))
LangEng: everything of distance of few , everywhere , in front of distance from John , here , everywhere , didn't know here between only us cut everywhere , everywhere , whom everything of John has given Paris
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (AdvNP (MassNP (ApposCN (UseN2 (ComplN3 distance_N3 (DetCN every_Det (PossNP (UseN2 father_N2) (UsePron he_Pron))))) (RelNP (UsePN john_PN) (UseRCl (TTAnt TFut AAnter) PPos (RelSlash IdRP (SlashVP (DetNP somePl_Det) (SlashV2a see_V2))))))) now_Adv) (UseComp (CompAP (PositA big_A))))
LangEng: distance from every father of his John , that some will have seen , now wasn't big
Lang: UseCl (TTAnt TPres ASimul) PPos (PredVP (DetNP few_Det) (UseV run_V))
LangEng: few run
Lang: UseCl (TTAnt TPres AAnter) PPos (PredVP (PPartNP (DetCN few_Det (AdjCN (AdjOrd (OrdDigits (IDig D_4))) (ComplN2 father_N2 (UsePron he_Pron)))) understand_V2) (AdVVP always_AdV (UseComp (CompNP (MassNP (PartNP (PartNP (ComplN2 (Use3N3 distance_N3) (DetNP every_Det)) (DetNP someSg_Det)) (UsePron she_Pron)))))))
LangEng: few 4th fathers of him understood have always been distance to everything of some of her
Lang: UseCl (TTAnt TPast ASimul) PNeg (PredVP (DetCN somePl_Det (AdvCN (UseN woman_N) everywhere_Adv)) (ComplVS hope_VS (UseCl (TTAnt TPast ASimul) PNeg (PredVP (PredetNP not_Predet (MassNP (ComplN2 (Use2N3 distance_N3) (UsePN paris_PN)))) (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_7))))))))
LangEng: some women everywhere didn't hope that not distance from Paris didn't become 7th
Lang: UseCl (TTAnt TPast AAnter) PPos (PredVP (RelNP (AdvNP (MassNP (AdvCN (UseN2 (ComplN3 distance_N3 (DetNP someSg_Det))) everywhere_Adv)) now_Adv) (UseRCl (TTAnt TPast ASimul) PNeg (RelVP IdRP (ComplVS hope_VS (UseCl (TTAnt TFut AAnter) PPos (PredVP (AdvNP (UsePN paris_PN) here_Adv) UseCopula)))))) UseCopula)
LangEng: distance from some everywhere now , that didn't hope that Paris here will have been , had been
Lang: UseCl (TTAnt TCond AAnter) PNeg (PredVP (UsePN john_PN) (UseComp (CompAP (UseComparA blue_A))))
LangEng: John wouldn't have been bluer
Lang: UseCl (TTAnt TFut AAnter) PNeg (PredVP (UsePN paris_PN) (ComplVA become_VA (AdjOrd (OrdDigits (IDig D_8)))))
LangEng: Paris won't have become 8th
Lang: UseCl (TTAnt TCond ASimul) PPos (PredVP (PredetNP not_Predet (ExtAdvNP (UsePron he_Pron) (PrepNP between_Prep (UsePN john_PN)))) (ComplVS fear_VS (UseCl (TTAnt TFut AAnter) PPos (PredVP (DetNP (DetQuantOrd no_Quant NumPl (OrdDigits (IIDig D_8 (IDig D_4))))) (ComplVA become_VA (PositA old_A))))))
LangEng: not he , between John , would fear that no 8 &+ 4th will have become old
